{
    "pipes": [],
    "interfaces": [
        {
            "name": "AddSchedule",
            "id": "interface-AddSchedule-d44e4ca0c257e71d67cc71aeb47cbff7",
            "file": "src/app/store/models/add-schedule.i.ts",
            "type": "interface",
            "sourceCode": "export interface AddSchedule {\r\n  title: string;\r\n  description: string;\r\n  timeStart?: Date;\r\n  dueDate?: Date;\r\n  timeStartRepeat?: string;\r\n  timeDueRepeat?: string;\r\n  important?: string;\r\n  place: string;\r\n  userIds: number[];\r\n  equipmentName?: Equipment[];\r\n  scheduleCategoryId?: number;\r\n  createBy?: number;\r\n  typeRepeat: string;\r\n  valueRepeat?: string;\r\n  scheduleId?: number;\r\n  isDelete?: boolean;\r\n  created?: Date;\r\n  modified?: Date;\r\n}\r\n\r\nexport class Equipment {\r\n  equipmentId: number;\r\n  timeStart?: Date;\r\n  timeDue?: Date;\r\n}\r\nexport interface CheckFreeTimeParams {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n\r\nexport interface CheckFreeTimeResponse {\r\n  count: number,\r\n  records:RecordsCheckTime[];\r\n}\r\nexport interface RecordsCheckTime {\r\n  equipment_id: number;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "createBy",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "created",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "dueDate",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "equipmentName",
                    "type": "Equipment[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "important",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isDelete",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modified",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "place",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "scheduleCategoryId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "scheduleId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "timeDueRepeat",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "timeStart",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "timeStartRepeat",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "typeRepeat",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "userIds",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "valueRepeat",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "addTodoValue",
            "id": "interface-addTodoValue-dbc5267f568d7340cb372254f4ba4c7c",
            "file": "src/app/store/models/addtodo.i.ts",
            "type": "interface",
            "sourceCode": "export interface addTodoValue {\r\n    todoName: string;\r\n    todoCategoryId?: number;\r\n    deadline?: string;\r\n    importance?: string;\r\n    description?: string;\r\n    userId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "deadline",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "todoCategoryId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "todoName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-0a3ffff667a785b4db2460f34fd92a86",
            "file": "src/app/store/app-state.ts",
            "type": "interface",
            "sourceCode": "import { SnackbarState, snackbarReducer } from './reducers/snackbar.reducer';\r\nimport { scheduleReducer, ScheduleState } from './reducers/schedule.reducer';\r\nimport {\r\n  noticeReducer,\r\n  NotificationState,\r\n} from './reducers/notification.reducer';\r\nimport { ActionReducerMap } from '@ngrx/store';\r\nimport { todoReducer, TodoState } from './reducers/todo.reducer';\r\nexport interface AppState {\r\n  todo: TodoState;\r\n  notification: NotificationState;\r\n  schedule: ScheduleState;\r\n  snackbar: SnackbarState;\r\n}\r\n\r\nexport const appReducer: ActionReducerMap<AppState> = {\r\n  todo: todoReducer,\r\n  notification: noticeReducer,\r\n  schedule: scheduleReducer,\r\n  snackbar: snackbarReducer,\r\n};\r\n",
            "properties": [
                {
                    "name": "notification",
                    "type": "NotificationState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "schedule",
                    "type": "ScheduleState",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "snackbar",
                    "type": "SnackbarState",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "todo",
                    "type": "TodoState",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ButtonFilterSchedule",
            "id": "interface-ButtonFilterSchedule-eec6ab79729277b83660d57eb83f0f32",
            "file": "src/app/store/models/schedule-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n  sort?: SortItem[];\r\n}\r\n\r\nexport interface LabelFilterSchedule<T> {\r\n  labelImportance?: T;\r\n  labelFromDate?: T;\r\n  labelToDate?: T;\r\n  labelCategory?: T;\r\n}\r\n\r\nexport interface PlaceholderFilterSchedule {\r\n  placeholderSearch?: string;\r\n  titleImportance?: string;\r\n  titleCategory?: string;\r\n}\r\n\r\nexport interface ButtonFilterSchedule<T> {\r\n  buttonSubmit?: T;\r\n  buttonReset?: T;\r\n}\r\n\r\nexport interface ValueFilterSchedule {\r\n  valueSearch?: string;\r\n  valueImportance?: string;\r\n  valueCategory?: string[];\r\n  valueGetToDate?: string;\r\n  valueGetToTimeNow?: string;\r\n  valueGetToHour?: string;\r\n  valueGetToMinute?: string;\r\n  valueGetFromDate?: string;\r\n  valueGetFromTimeNow?: string;\r\n  valueGetFromHour?: string;\r\n  valueGetFromMinute?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonReset",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "buttonSubmit",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-4dbce34391401abfb19acab9c888c6aa",
            "file": "src/app/store/models/category.i.ts",
            "type": "interface",
            "sourceCode": "export interface Category{\r\n  categoryId : number;\r\n  categoryName  : string;\r\n}\r\n",
            "properties": [
                {
                    "name": "categoryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "categoryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CategoryDetailTodo",
            "id": "interface-CategoryDetailTodo-d70dda1b693590efe74a7e6390cb0a2e",
            "file": "src/app/store/models/detail-todo.ts",
            "type": "interface",
            "sourceCode": "export interface TodoDetail {\r\n    todoId: string;\r\n    todoName: string;\r\n    description: string;\r\n    status: string;\r\n    deadline: Date;\r\n    importance: string;\r\n    created: Date;\r\n    modified: Date;\r\n    todoDetailUser?: UserDetailTodo;\r\n    todoDetailCategory?: CategoryDetailTodo;\r\n  }\r\n  \r\n  export interface UserDetailTodo {\r\n    userId: string;\r\n    userName: string;\r\n    fullName: string;\r\n  }\r\n  \r\n  export interface CategoryDetailTodo {\r\n    todoCategoryId: string;\r\n    todoCategoryName: string;\r\n  }\r\n",
            "properties": [
                {
                    "name": "todoCategoryId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "todoCategoryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CategorySchedule",
            "id": "interface-CategorySchedule-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "colors",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "created",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "modified",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "scheduleCategoryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CheckboxInterface",
            "id": "interface-CheckboxInterface-96b35ae13637225b1c8f1e46acb74710",
            "file": "src/app/store/models/checkbox-item.i.ts",
            "type": "interface",
            "sourceCode": "export interface ICheckBoxItem {\r\n  label?: string;\r\n  value?: string;\r\n  checked: boolean;\r\n  disabled?: boolean;\r\n}\r\nexport interface CheckboxInterface{\r\n  name: string;\r\n  checked: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CheckFreeTime",
            "id": "interface-CheckFreeTime-09d5c2aaaa277b1027fbb182a51bc2fc",
            "file": "src/app/store/models/checkFreeTime.i.ts",
            "type": "interface",
            "sourceCode": "export interface CheckFreeTime {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dueTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "equipmentId",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "startTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CheckFreeTimeParams",
            "id": "interface-CheckFreeTimeParams-d44e4ca0c257e71d67cc71aeb47cbff7",
            "file": "src/app/store/models/add-schedule.i.ts",
            "type": "interface",
            "sourceCode": "export interface AddSchedule {\r\n  title: string;\r\n  description: string;\r\n  timeStart?: Date;\r\n  dueDate?: Date;\r\n  timeStartRepeat?: string;\r\n  timeDueRepeat?: string;\r\n  important?: string;\r\n  place: string;\r\n  userIds: number[];\r\n  equipmentName?: Equipment[];\r\n  scheduleCategoryId?: number;\r\n  createBy?: number;\r\n  typeRepeat: string;\r\n  valueRepeat?: string;\r\n  scheduleId?: number;\r\n  isDelete?: boolean;\r\n  created?: Date;\r\n  modified?: Date;\r\n}\r\n\r\nexport class Equipment {\r\n  equipmentId: number;\r\n  timeStart?: Date;\r\n  timeDue?: Date;\r\n}\r\nexport interface CheckFreeTimeParams {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n\r\nexport interface CheckFreeTimeResponse {\r\n  count: number,\r\n  records:RecordsCheckTime[];\r\n}\r\nexport interface RecordsCheckTime {\r\n  equipment_id: number;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "dueTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "equipmentId",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "startTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CheckFreeTimeResponse",
            "id": "interface-CheckFreeTimeResponse-d44e4ca0c257e71d67cc71aeb47cbff7",
            "file": "src/app/store/models/add-schedule.i.ts",
            "type": "interface",
            "sourceCode": "export interface AddSchedule {\r\n  title: string;\r\n  description: string;\r\n  timeStart?: Date;\r\n  dueDate?: Date;\r\n  timeStartRepeat?: string;\r\n  timeDueRepeat?: string;\r\n  important?: string;\r\n  place: string;\r\n  userIds: number[];\r\n  equipmentName?: Equipment[];\r\n  scheduleCategoryId?: number;\r\n  createBy?: number;\r\n  typeRepeat: string;\r\n  valueRepeat?: string;\r\n  scheduleId?: number;\r\n  isDelete?: boolean;\r\n  created?: Date;\r\n  modified?: Date;\r\n}\r\n\r\nexport class Equipment {\r\n  equipmentId: number;\r\n  timeStart?: Date;\r\n  timeDue?: Date;\r\n}\r\nexport interface CheckFreeTimeParams {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n\r\nexport interface CheckFreeTimeResponse {\r\n  count: number,\r\n  records:RecordsCheckTime[];\r\n}\r\nexport interface RecordsCheckTime {\r\n  equipment_id: number;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "records",
                    "type": "RecordsCheckTime[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Column",
            "id": "interface-Column-0b12ef3c1544cd74dc87d691ef7a08a7",
            "file": "src/app/store/models/column.i.ts",
            "type": "interface",
            "sourceCode": "export interface Column {\r\n  title: string;\r\n  dataIndex: string;\r\n  sort?: boolean;\r\n}\r\n\r\nexport enum SortType {\r\n  asc = 'asc',\r\n  desc = 'desc',\r\n  none = 'none',\r\n}\r\n\r\nexport interface SortItem {\r\n  name: string;\r\n  sort: SortType;\r\n}\r\n",
            "properties": [
                {
                    "name": "dataIndex",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sort",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "configButton",
            "id": "interface-configButton-7a4479c64cdf5136597f09653ed8e504",
            "file": "src/app/store/models/button.i.ts",
            "type": "interface",
            "sourceCode": "export interface configButton {\r\n  colorButton: string;\r\n  colorMouseOver?: string;\r\n  colorMouseOut?: string;\r\n  type: string;\r\n  text: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "colorButton",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "colorMouseOut",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "colorMouseOver",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DatetimePicker",
            "id": "interface-DatetimePicker-0f45b301f9e26b321947ae52a811979c",
            "file": "src/app/store/models/datetime-picker.i.ts",
            "type": "interface",
            "sourceCode": "export interface DatetimePicker {\r\n    day: string,\r\n    month: string,\r\n    year: string,\r\n    hour: string,\r\n    minute: string\r\n}\r\n",
            "properties": [
                {
                    "name": "day",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hour",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "minute",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "month",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "year",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EquipmentNames",
            "id": "interface-EquipmentNames-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "dueTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "equipmentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "equipmentName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "startTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EventNotification",
            "id": "interface-EventNotification-4a8fed05879acdbafcd6e7815bad0643",
            "file": "src/app/store/models/event-notification.i.ts",
            "type": "interface",
            "sourceCode": "export interface EventNotification {\r\n  eventId: number;\r\n  eventName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "eventId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "eventName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FilterNotification",
            "id": "interface-FilterNotification-dd0b69dda9a49ec081d53deb6bda1aa5",
            "file": "src/app/store/models/notificaiton-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterNotification {\r\n  textSearch?: string;\r\n  category?: string;\r\n  event?: string;\r\n  sort?: SortItem[];\r\n  status : number;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "event",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sort",
                    "type": "SortItem[]",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "textSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FilterSchedule",
            "id": "interface-FilterSchedule-eec6ab79729277b83660d57eb83f0f32",
            "file": "src/app/store/models/schedule-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n  sort?: SortItem[];\r\n}\r\n\r\nexport interface LabelFilterSchedule<T> {\r\n  labelImportance?: T;\r\n  labelFromDate?: T;\r\n  labelToDate?: T;\r\n  labelCategory?: T;\r\n}\r\n\r\nexport interface PlaceholderFilterSchedule {\r\n  placeholderSearch?: string;\r\n  titleImportance?: string;\r\n  titleCategory?: string;\r\n}\r\n\r\nexport interface ButtonFilterSchedule<T> {\r\n  buttonSubmit?: T;\r\n  buttonReset?: T;\r\n}\r\n\r\nexport interface ValueFilterSchedule {\r\n  valueSearch?: string;\r\n  valueImportance?: string;\r\n  valueCategory?: string[];\r\n  valueGetToDate?: string;\r\n  valueGetToTimeNow?: string;\r\n  valueGetToHour?: string;\r\n  valueGetToMinute?: string;\r\n  valueGetFromDate?: string;\r\n  valueGetFromTimeNow?: string;\r\n  valueGetFromHour?: string;\r\n  valueGetFromMinute?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fromDateList",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sort",
                    "type": "SortItem[]",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "textSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "toDateList",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FilterSchedule",
            "id": "interface-FilterSchedule-2abf7ea972dc717b97830297996feeba-1",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "from",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fromDateList",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "sort",
                    "type": "SortItem[]",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "textSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "to",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "toDateList",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FilterSchedule-1"
        },
        {
            "name": "FilterTodo",
            "id": "interface-FilterTodo-3f5091a54ca9d6fe5e22eecf31780a8b",
            "file": "src/app/store/models/todo-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterTodo {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  status?: string;\r\n  fromDate?: string;\r\n  toDate?: string;\r\n  sort?: SortItem[];\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "fromDate",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sort",
                    "type": "SortItem[]",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "textSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "toDate",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IButtonGroup",
            "id": "interface-IButtonGroup-eebd915cf8874faf8232594decb42f25",
            "file": "src/app/store/models/button-group.i.ts",
            "type": "interface",
            "sourceCode": "export interface IButtonGroup<T> {\r\n  value: T;\r\n  displayValue: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ICheckBoxItem",
            "id": "interface-ICheckBoxItem-96b35ae13637225b1c8f1e46acb74710",
            "file": "src/app/store/models/checkbox-item.i.ts",
            "type": "interface",
            "sourceCode": "export interface ICheckBoxItem {\r\n  label?: string;\r\n  value?: string;\r\n  checked: boolean;\r\n  disabled?: boolean;\r\n}\r\nexport interface CheckboxInterface{\r\n  name: string;\r\n  checked: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IsRead",
            "id": "interface-IsRead-8921e0097959bf695dd5b93d66d2eee8",
            "file": "src/app/store/models/is_read.i.ts",
            "type": "interface",
            "sourceCode": "export interface IsRead {\r\n    isRead: number;\r\n    notificationId: number;\r\n    userId: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "isRead",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "notificationId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LabelExpansionFilter",
            "id": "interface-LabelExpansionFilter-5f217b55f31afbf3e02a5169b88fe6f8",
            "file": "src/app/store/models/labelvalue.i.ts",
            "type": "interface",
            "sourceCode": "export interface LabelledValue<T> {\r\n  label: string;\r\n  value: T;\r\n}\r\n\r\nexport interface LabelExpansionFilter {\r\n  title: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LabelFilterSchedule",
            "id": "interface-LabelFilterSchedule-eec6ab79729277b83660d57eb83f0f32",
            "file": "src/app/store/models/schedule-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n  sort?: SortItem[];\r\n}\r\n\r\nexport interface LabelFilterSchedule<T> {\r\n  labelImportance?: T;\r\n  labelFromDate?: T;\r\n  labelToDate?: T;\r\n  labelCategory?: T;\r\n}\r\n\r\nexport interface PlaceholderFilterSchedule {\r\n  placeholderSearch?: string;\r\n  titleImportance?: string;\r\n  titleCategory?: string;\r\n}\r\n\r\nexport interface ButtonFilterSchedule<T> {\r\n  buttonSubmit?: T;\r\n  buttonReset?: T;\r\n}\r\n\r\nexport interface ValueFilterSchedule {\r\n  valueSearch?: string;\r\n  valueImportance?: string;\r\n  valueCategory?: string[];\r\n  valueGetToDate?: string;\r\n  valueGetToTimeNow?: string;\r\n  valueGetToHour?: string;\r\n  valueGetToMinute?: string;\r\n  valueGetFromDate?: string;\r\n  valueGetFromTimeNow?: string;\r\n  valueGetFromHour?: string;\r\n  valueGetFromMinute?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "labelCategory",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "labelFromDate",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "labelImportance",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "labelToDate",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LabelInterface",
            "id": "interface-LabelInterface-f790f22ff0fb8d9fad1bfd983b4ec387",
            "file": "src/app/store/models/label.i.ts",
            "type": "interface",
            "sourceCode": "export interface LabelInterface {\r\n    content: string,\r\n    size: number,\r\n    color: string,\r\n    backgroundColor: string,\r\n}",
            "properties": [
                {
                    "name": "backgroundColor",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "content",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "size",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LabelledValue",
            "id": "interface-LabelledValue-5f217b55f31afbf3e02a5169b88fe6f8",
            "file": "src/app/store/models/labelvalue.i.ts",
            "type": "interface",
            "sourceCode": "export interface LabelledValue<T> {\r\n  label: string;\r\n  value: T;\r\n}\r\n\r\nexport interface LabelExpansionFilter {\r\n  title: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Login",
            "id": "interface-Login-5341334cb27bd74b607fcf6c3d7d93a2",
            "file": "src/app/store/models/login.i.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: number;\r\n  fullName: string;\r\n  userName: string;\r\n}\r\nexport interface Login {\r\n  accessToken: string;\r\n  user: User;\r\n  typeToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "typeToken",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-08a5c96dc7de9c36d5fdea92cec24cc0",
            "file": "src/app/store/models/menu-item.i.ts",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n    text: string,\r\n    link: string,\r\n    icon: string\r\n}",
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "link",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-1bb31dab82425b67621cf29ef881a771",
            "file": "src/app/store/models/notification.i.ts",
            "type": "interface",
            "sourceCode": "export interface Notification {\r\n  notificationId: number;\r\n  title: string;\r\n  description: string;\r\n  eventEndTime: Date;\r\n  eventId :number;\r\n  eventPath : string;\r\n  eventStartTime: Date;\r\n  eventTypeName: string;\r\n  isRead: number;\r\n}\r\n\r\nexport interface NotificationData {\r\n  data: Notification[];\r\n  pageSize: number;\r\n  page: number;\r\n  total: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "eventEndTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "eventId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "eventPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "eventStartTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "eventTypeName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isRead",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notificationId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NotificationData",
            "id": "interface-NotificationData-1bb31dab82425b67621cf29ef881a771",
            "file": "src/app/store/models/notification.i.ts",
            "type": "interface",
            "sourceCode": "export interface Notification {\r\n  notificationId: number;\r\n  title: string;\r\n  description: string;\r\n  eventEndTime: Date;\r\n  eventId :number;\r\n  eventPath : string;\r\n  eventStartTime: Date;\r\n  eventTypeName: string;\r\n  isRead: number;\r\n}\r\n\r\nexport interface NotificationData {\r\n  data: Notification[];\r\n  pageSize: number;\r\n  page: number;\r\n  total: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "NotificationState",
            "id": "interface-NotificationState-8902f2bbc9bb597f9d3e290876298ca9",
            "file": "src/app/store/reducers/notification.reducer.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  ENotification,\r\n  NotificationAction,\r\n} from './../actions/notification.action';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { Notification } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport interface NotificationState {\r\n  listNotification: Notification[];\r\n  pagination: Pagination;\r\n  searchText?: string;\r\n  currentNotification?: Notification;\r\n  isLoading: boolean;\r\n  error?: string;\r\n  countTotal?: number;\r\n  /**\r\n   * Type event Notification\r\n   */\r\n  listEvent: EventNotification[];\r\n  selectedEvent: string;\r\n  /**\r\n   * Status Notification\r\n   */\r\n  isRead: number;\r\n}\r\n\r\nconst initNotificationState: NotificationState = {\r\n  listNotification: [],\r\n  pagination: {\r\n    total: 0,\r\n    page: 1,\r\n    pageSize: 10,\r\n  },\r\n  isLoading: false,\r\n  listEvent: [],\r\n  selectedEvent: '',\r\n  isRead: -1,\r\n};\r\n\r\nexport function noticeReducer(\r\n  state = initNotificationState,\r\n  action: NotificationAction\r\n) {\r\n  switch (action.type) {\r\n    /**\r\n     * TODO : FETCH DATA\r\n     */\r\n    case ENotification.LOAD_ALL:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ENotification.LOAD_ALL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listNotification: action.payload.notifications.data,\r\n        isRead: action.payload.filter.status,\r\n        selectedEvent: action.payload.filter.event,\r\n        pagination: {\r\n          total: action.payload.notifications.total,\r\n          page: action.payload.notifications.page,\r\n          pageSize: action.payload.notifications.pageSize,\r\n        },\r\n      };\r\n    case ENotification.LOAD_ALL_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    /**\r\n     * TODO : FILTER DATA\r\n     *\r\n     */\r\n    case ENotification.FILTER_EVENT:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ENotification.FILTER_EVENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listNotification: action.payload.notifications.data,\r\n        pagination: {\r\n          total: action.payload.notifications.total,\r\n          page: action.payload.notifications.page,\r\n          pageSize: action.payload.notifications.pageSize,\r\n        },\r\n      };\r\n    case ENotification.FILTER_STATUS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    /**\r\n     * TODO : FILTER BY STATUS Notification\r\n     */\r\n    case ENotification.FILTER_STATUS:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ENotification.FILTER_STATUS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listNotification: action.payload.notifications.data,\r\n        pagination: {\r\n          total: action.payload.notifications.total,\r\n          page: action.payload.notifications.page,\r\n          pageSize: action.payload.notifications.pageSize,\r\n        },\r\n      };\r\n    case ENotification.FILTER_STATUS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ENotification.GET_EVENT:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ENotification.GET_EVENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listEvent: action.payload.event,\r\n      };\r\n    case ENotification.GET_EVENT_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    // count\r\n    case ENotification.COUNT_NOTIFICATIONS:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ENotification.COUNT_NOTIFICATIONS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        countTotal: action.payload.total,\r\n      };\r\n    case ENotification.COUNT_NOTIFICATIONS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "countTotal",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "currentNotification",
                    "type": "Notification",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isRead",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Status Notification</p>\n",
                    "line": 24
                },
                {
                    "name": "listEvent",
                    "type": "EventNotification[]",
                    "optional": false,
                    "description": "<p>Type event Notification</p>\n",
                    "line": 19
                },
                {
                    "name": "listNotification",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "searchText",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedEvent",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-4c67909aad84fd74acbad4610c7a97d6",
            "file": "src/app/store/models/page.i.ts",
            "type": "interface",
            "sourceCode": "export interface Page<T>{\r\n  data: T[],\r\n  page: number,\r\n  total: number,\r\n  pageSize: number\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-78e0c6b6f0a1786c2548549a1b981714",
            "file": "src/app/store/models/pagination.i.ts",
            "type": "interface",
            "sourceCode": "export interface Pagination {\r\n  page: number,\r\n  pageSize: number,\r\n  total?: number,\r\n}\r\n",
            "properties": [
                {
                    "name": "page",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "total",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PlaceholderFilterSchedule",
            "id": "interface-PlaceholderFilterSchedule-eec6ab79729277b83660d57eb83f0f32",
            "file": "src/app/store/models/schedule-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n  sort?: SortItem[];\r\n}\r\n\r\nexport interface LabelFilterSchedule<T> {\r\n  labelImportance?: T;\r\n  labelFromDate?: T;\r\n  labelToDate?: T;\r\n  labelCategory?: T;\r\n}\r\n\r\nexport interface PlaceholderFilterSchedule {\r\n  placeholderSearch?: string;\r\n  titleImportance?: string;\r\n  titleCategory?: string;\r\n}\r\n\r\nexport interface ButtonFilterSchedule<T> {\r\n  buttonSubmit?: T;\r\n  buttonReset?: T;\r\n}\r\n\r\nexport interface ValueFilterSchedule {\r\n  valueSearch?: string;\r\n  valueImportance?: string;\r\n  valueCategory?: string[];\r\n  valueGetToDate?: string;\r\n  valueGetToTimeNow?: string;\r\n  valueGetToHour?: string;\r\n  valueGetToMinute?: string;\r\n  valueGetFromDate?: string;\r\n  valueGetFromTimeNow?: string;\r\n  valueGetFromHour?: string;\r\n  valueGetFromMinute?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "placeholderSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "titleCategory",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "titleImportance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PollList",
            "id": "interface-PollList-ede9c35708b0eac2583c6163990bfd80",
            "file": "src/app/store/models/pollList.i.ts",
            "type": "interface",
            "sourceCode": "export interface PollList {\r\n    filterBox: string;\r\n    title: string;\r\n    btnAdd: string;\r\n  }\r\n  ",
            "properties": [
                {
                    "name": "btnAdd",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "filterBox",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RecordsCheckTime",
            "id": "interface-RecordsCheckTime-d44e4ca0c257e71d67cc71aeb47cbff7",
            "file": "src/app/store/models/add-schedule.i.ts",
            "type": "interface",
            "sourceCode": "export interface AddSchedule {\r\n  title: string;\r\n  description: string;\r\n  timeStart?: Date;\r\n  dueDate?: Date;\r\n  timeStartRepeat?: string;\r\n  timeDueRepeat?: string;\r\n  important?: string;\r\n  place: string;\r\n  userIds: number[];\r\n  equipmentName?: Equipment[];\r\n  scheduleCategoryId?: number;\r\n  createBy?: number;\r\n  typeRepeat: string;\r\n  valueRepeat?: string;\r\n  scheduleId?: number;\r\n  isDelete?: boolean;\r\n  created?: Date;\r\n  modified?: Date;\r\n}\r\n\r\nexport class Equipment {\r\n  equipmentId: number;\r\n  timeStart?: Date;\r\n  timeDue?: Date;\r\n}\r\nexport interface CheckFreeTimeParams {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n\r\nexport interface CheckFreeTimeResponse {\r\n  count: number,\r\n  records:RecordsCheckTime[];\r\n}\r\nexport interface RecordsCheckTime {\r\n  equipment_id: number;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "equipment_id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ReminderNotification",
            "id": "interface-ReminderNotification-2fb5419d00fa1a7eb6cd7ab671f1500f",
            "file": "src/app/store/models/reminder-notification.i.ts",
            "type": "interface",
            "sourceCode": "export interface ReminderNotification {\r\n    eventId: number;\r\n    eventViewPath: string;\r\n    eventStartTime?: Date;\r\n    eventTypeId: number;\r\n    notificationId?: number;\r\n    categoryName?: string;\r\n    notificationTitle: string;\r\n    notificationDescription: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "categoryName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "eventId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "eventStartTime",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "eventTypeId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "eventViewPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "notificationDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notificationId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "notificationTitle",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Schedule",
            "id": "interface-Schedule-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "allDay",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdBy",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dueTime",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "place",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "scheduleCategoryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "scheduleCategoryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "scheduleId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "time",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "timeStart",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "typeRepeat",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "typeSchedule",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "users",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ScheduleData",
            "id": "interface-ScheduleData-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "count",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "records",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ScheduleDetail",
            "id": "interface-ScheduleDetail-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createBy",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "createByFullName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "created",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "createdByName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "dueDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "equipmentNames",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "important",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "modified",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "place",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "scheduleCategoryId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "scheduleCategoryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "scheduleId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "startDate",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "timeDueRepeat",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "timeStartRepeat",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "userNames",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "valueRepeat",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ScheduleList",
            "id": "interface-ScheduleList-7ce36bb05af64080534829a3b16623a6",
            "file": "src/app/store/models/scheduleList.i.ts",
            "type": "interface",
            "sourceCode": "export interface ScheduleList {\r\n  filterBox: string;\r\n  title: string;\r\n  btnAdd: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnAdd",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "filterBox",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ScheduleState",
            "id": "interface-ScheduleState-a2db14f96af18fd7109631ba0987c3e5",
            "file": "src/app/store/reducers/schedule.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ESchedule, ScheduleAction } from './../actions/schedule.action';\r\nimport {\r\n  Schedule,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport {\r\n  getDate,\r\n  getDay,\r\n  getMonth,\r\n  getYear,\r\n  isWithinInterval,\r\n  startOfDay,\r\n  endOfDay,\r\n} from 'date-fns';\r\nimport * as _ from 'lodash';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { LabelledValue } from '../models/labelvalue.i';\r\nimport { CheckFreeTimeResponse } from '../models/add-schedule.i';\r\nexport interface ScheduleState {\r\n  userId: number;\r\n  listSchedule: Schedule[];\r\n  pagination: Pagination;\r\n  currentSchedule?: Schedule;\r\n  listImportance: LabelledValue<string>[];\r\n  isLoading: boolean;\r\n  error?: string;\r\n  filter: FilterSchedule;\r\n  eventsToday: Schedule[];\r\n  eventsTomorrow: Schedule[];\r\n  eventsAfterTomorrow: Schedule[];\r\n  delSchedule?: Schedule[];\r\n  categories: CategorySchedule[];\r\n  scheduleFilter: Schedule[];\r\n  listEquipment?;\r\n  scheduleRealAfterDel?: Schedule;\r\n}\r\nconst initScheduleState: ScheduleState = {\r\n  userId: 1,\r\n  listSchedule: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 20,\r\n  },\r\n  listImportance: [\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ],\r\n  isLoading: false,\r\n  filter: {\r\n    textSearch: '',\r\n    importance: '',\r\n    category: [],\r\n    from: '',\r\n    to: '',\r\n    fromDateList: '',\r\n    toDateList: '',\r\n  },\r\n  eventsToday: [],\r\n  eventsTomorrow: [],\r\n  eventsAfterTomorrow: [],\r\n  delSchedule: [],\r\n  categories: [],\r\n  scheduleFilter: [],\r\n};\r\n\r\nexport function scheduleReducer(\r\n  state = initScheduleState,\r\n  action: ScheduleAction\r\n) {\r\n  switch (action.type) {\r\n    case ESchedule.LOAD_ALL:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        filter: action.payload,\r\n      };\r\n    case ESchedule.LOAD_ALL_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listSchedule: action.payload.schedules,\r\n      };\r\n    case ESchedule.LOAD_ALL_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_TODAY:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        filter: action.payload,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_TODAY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        eventsToday: action.payload.eventsToday,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_TODAY_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    case ESchedule.LOAD_EVENTS_TOMORROW:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        filter: action.payload,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        eventsTomorrow: action.payload.eventsTomorrow,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_TOMORROW_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_AFTER_TOMORROW:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        filter: action.payload,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        eventsAfterTomorrow: action.payload.eventsAfterTomorrow,\r\n      };\r\n    case ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    case ESchedule.DELETE_EVENT:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.DELETE_EVENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        delSchedule: state.listSchedule.filter(\r\n          (event) => event.scheduleId === action.payload.delSchedule.scheduleId\r\n        ),\r\n        scheduleRealAfterDel: action.payload.delSchedule,\r\n        listSchedule: state.listSchedule.filter(\r\n          (event) => event.scheduleId !== action.payload.delSchedule.scheduleId\r\n          // && event.createdBy !== action.payload.delSchedule.createdBy\r\n        ),\r\n        eventsToday: state.eventsToday.filter(\r\n          (event) => event.scheduleId !== action.payload.delSchedule.scheduleId\r\n          // && event.createdBy !== action.payload.delSchedule.createdBy\r\n        ),\r\n        eventsTomorrow: state.eventsTomorrow.filter(\r\n          (event) => event.scheduleId !== action.payload.delSchedule.scheduleId\r\n          // && event.createdBy !== action.payload.delSchedule.createdBy\r\n        ),\r\n        eventsAfterTomorrow: state.eventsAfterTomorrow.filter(\r\n          (event) => event.scheduleId !== action.payload.delSchedule.scheduleId\r\n          // && event.createdBy !== action.payload.delSchedule.createdBy\r\n        ),\r\n        scheduleFilter: state.scheduleFilter.filter(\r\n          (event) => event.scheduleId !== action.payload.delSchedule.scheduleId\r\n        ),\r\n      };\r\n    case ESchedule.DELETE_EVENT_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: action.payload.message,\r\n      };\r\n    case ESchedule.UNDO_DELETE_EVENT:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ESchedule.UNDO_DELETE_EVENT_SUCCESS:\r\n      const today = new Date();\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      const afterTomorrow = new Date(today);\r\n      afterTomorrow.setDate(afterTomorrow.getDate() + 2);\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        delSchedule: [],\r\n        scheduleRealAfterDel: null,\r\n        listSchedule: [\r\n          ...state.listSchedule.concat(\r\n            ...action.payload.listRestoreSchedule.map((rs) => {\r\n              return { ...rs, users: JSON.stringify(rs.users) };\r\n            })\r\n          ),\r\n        ],\r\n        eventsToday: isWithinInterval(new Date(today), {\r\n          start: startOfDay(new Date(action.payload.delSchedule.timeStart)),\r\n          end: endOfDay(new Date(action.payload.delSchedule.dueTime)),\r\n        })\r\n          ? [\r\n              ...state.eventsToday,\r\n              {\r\n                ...action.payload.delSchedule,\r\n                users: JSON.stringify(action.payload.delSchedule.users),\r\n              },\r\n            ]\r\n          : [...state.eventsToday],\r\n        eventsTomorrow: isWithinInterval(tomorrow, {\r\n          start: startOfDay(new Date(action.payload.delSchedule.timeStart)),\r\n          end: endOfDay(new Date(action.payload.delSchedule.dueTime)),\r\n        })\r\n          ? [\r\n              ...state.eventsTomorrow,\r\n              {\r\n                ...action.payload.delSchedule,\r\n                users: JSON.stringify(action.payload.delSchedule.users),\r\n              },\r\n            ]\r\n          : [...state.eventsTomorrow],\r\n        eventsAfterTomorrow: isWithinInterval(afterTomorrow, {\r\n          start: startOfDay(new Date(action.payload.delSchedule.timeStart)),\r\n          end: endOfDay(new Date(action.payload.delSchedule.dueTime)),\r\n        })\r\n          ? [\r\n              ...state.eventsAfterTomorrow,\r\n              {\r\n                ...action.payload.delSchedule,\r\n                users: JSON.stringify(action.payload.delSchedule.users),\r\n              },\r\n            ]\r\n          : [...state.eventsAfterTomorrow],\r\n        scheduleFilter: [\r\n          ...state.scheduleFilter,\r\n          {\r\n            ...action.payload.delSchedule,\r\n            users: JSON.stringify(action.payload.delSchedule.users),\r\n          },\r\n        ],\r\n      };\r\n\r\n    case ESchedule.LOAD_CATEGORY:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.LOAD_CATEGORY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        categories: action.payload.categories.map((cate) => {\r\n          return {\r\n            ...cate,\r\n            colors: colors[randomObj(colors)],\r\n          };\r\n        }),\r\n      };\r\n    case ESchedule.LOAD_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    case ESchedule.ADD:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.ADD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ESchedule.ADD_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n\r\n    case ESchedule.CHECK_EQUIPMENT:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.FILTER_BY_CATEGORY:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.FILTER_BY_CATEGORY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        scheduleFilter: _.filter(state.listSchedule, (v: Schedule) =>\r\n          _.includes(action.payload.idsScheduleCategory, v.scheduleCategoryId)\r\n        ),\r\n      };\r\n    case ESchedule.FILTER_BY_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ESchedule.CHECK_EQUIPMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listEquipment: action.payload.list,\r\n      };\r\n    case ESchedule.CHECK_EQUIPMENT_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ESchedule.FILTER:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ESchedule.FILTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listSchedule: action.payload.schedules,\r\n        pagination: action.payload.pagination,\r\n        filter: action.payload.filter,\r\n      };\r\n    case ESchedule.FILTER_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport const colors = {\r\n  aqua: { primary: '#00ffff', secondary: '#D1E8FF' },\r\n  azure: { primary: '#f0ffff', secondary: '#D1E8FF' },\r\n  beige: { primary: '#f5f5dc', secondary: '#E9F5DC' },\r\n  blue: { primary: '#0000ff', secondary: '#0080FF' },\r\n  brown: { primary: '#a52a2a', secondary: '#A52A68' },\r\n  cyan: { primary: '#00ffff', secondary: '#0080FF' },\r\n  darkblue: { primary: '#00008b', secondary: '#00468B' },\r\n  darkcyan: { primary: '#008b8b', secondary: '#008B46' },\r\n  darkgrey: { primary: '#a9a9a9', secondary: '#A9A9A9' },\r\n  darkgreen: { primary: '#006400', secondary: '#006432' },\r\n  darkkhaki: { primary: '#bdb76b', secondary: '#9ABD6B' },\r\n  darkmagenta: { primary: '#8b008b', secondary: '#8B0046' },\r\n  darkolivegreen: { primary: '#556b2f', secondary: '#376B2F' },\r\n  darkorange: { primary: '#ff8c00', secondary: '#F3FF00' },\r\n  darkorchid: { primary: '#9932cc', secondary: '#CC32B2' },\r\n  darkred: { primary: '#8b0000', secondary: '#8B4600' },\r\n  darksalmon: { primary: '#e9967a', secondary: '#E9CD7A' },\r\n  darkviolet: { primary: '#9400d3', secondary: '#D300A8' },\r\n  fuchsia: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  gold: { primary: '#ffd700', secondary: '#A7FF00' },\r\n  green: { primary: '#008000', secondary: '#008040' },\r\n  indigo: { primary: '#4b0082', secondary: '#820078' },\r\n  khaki: { primary: '#f0e68c', secondary: '#C8F08C' },\r\n  lightblue: { primary: '#add8e6', secondary: '#ADBCE6' },\r\n  lightcyan: { primary: '#e0ffff', secondary: '#E0F0FF' },\r\n  lightgreen: { primary: '#90ee90', secondary: '#90EEBF' },\r\n  lightgrey: { primary: '#d3d3d3', secondary: '#D3D3D3' },\r\n  lightpink: { primary: '#ffb6c1', secondary: '#FFD0B6' },\r\n  lightyellow: { primary: '#ffffe0', secondary: '#F0FFE0' },\r\n  lime: { primary: '#00ff00', secondary: '#00FF80' },\r\n  magenta: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  maroon: { primary: '#800000', secondary: '#804000' },\r\n  navy: { primary: '#000080', secondary: '#400080' },\r\n  olive: { primary: '#808000', secondary: '#408000' },\r\n  orange: { primary: '#ffa500', secondary: '#FF2600' },\r\n  pink: { primary: '#ffc0cb', secondary: '#FFD4C0' },\r\n  purple: { primary: '#800080', secondary: '#800040' },\r\n  red: { primary: '#ff0000', secondary: '#FF8000' },\r\n  yellow: { primary: '#ffff00', secondary: '#80FF00' },\r\n};\r\nexport default function randomObj(obj: any) {\r\n  const objKeys = Object.keys(obj);\r\n  return objKeys[Math.floor(Math.random() * objKeys.length)];\r\n}\r\n",
            "properties": [
                {
                    "name": "categories",
                    "type": "CategorySchedule[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "currentSchedule",
                    "type": "Schedule",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "delSchedule",
                    "type": "Schedule[]",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "eventsAfterTomorrow",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "eventsToday",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "eventsTomorrow",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "filter",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isLoading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "listEquipment",
                    "type": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "listImportance",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "listSchedule",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "scheduleFilter",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "scheduleRealAfterDel",
                    "type": "Schedule",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SnackbarState",
            "id": "interface-SnackbarState-fbb0b0e0d38b1d5f540b0f291a118924",
            "file": "src/app/store/reducers/snackbar.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\n\r\nimport * as SnackbarActions from '../actions/snackbar.actions';\r\nexport interface SnackbarState {\r\n  show: boolean;\r\n}\r\nexport const initialState: SnackbarState = {\r\n  show: false,\r\n};\r\nconst _snackbarReducer = createReducer(\r\n  initialState,\r\n\r\n  on(SnackbarActions.OpenSnackbars, (state, action) => {\r\n    return { ...state, show: true };\r\n  }),\r\n\r\n  on(SnackbarActions.CloseSnackbars, (state, action) => {\r\n    return { ...state, show: false };\r\n  })\r\n);\r\n\r\nexport function snackbarReducer(\r\n  state: SnackbarState | undefined,\r\n  action: Action\r\n) {\r\n  return _snackbarReducer(state, action);\r\n}\r\n",
            "properties": [
                {
                    "name": "show",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SortItem",
            "id": "interface-SortItem-0b12ef3c1544cd74dc87d691ef7a08a7",
            "file": "src/app/store/models/column.i.ts",
            "type": "interface",
            "sourceCode": "export interface Column {\r\n  title: string;\r\n  dataIndex: string;\r\n  sort?: boolean;\r\n}\r\n\r\nexport enum SortType {\r\n  asc = 'asc',\r\n  desc = 'desc',\r\n  none = 'none',\r\n}\r\n\r\nexport interface SortItem {\r\n  name: string;\r\n  sort: SortType;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sort",
                    "type": "SortType",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Todo",
            "id": "interface-Todo-ee5b5ac77957bd34b0975641b02ce4ad",
            "file": "src/app/store/models/todo.i.ts",
            "type": "interface",
            "sourceCode": "export interface Todo{\r\n  todoId : number;\r\n  title  : string;\r\n  status?: string;\r\n  deadLine : string;\r\n  description? : string;\r\n  importance? :string;\r\n  created? : Date;\r\n  modified? : Date;\r\n  userId? : number;\r\n  todoCategoryId? : number;\r\n  todoCategoryName? : string;\r\n}\r\n",
            "properties": [
                {
                    "name": "created",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deadLine",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modified",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "todoCategoryId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "todoCategoryName",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "todoId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TodoDetail",
            "id": "interface-TodoDetail-d70dda1b693590efe74a7e6390cb0a2e",
            "file": "src/app/store/models/detail-todo.ts",
            "type": "interface",
            "sourceCode": "export interface TodoDetail {\r\n    todoId: string;\r\n    todoName: string;\r\n    description: string;\r\n    status: string;\r\n    deadline: Date;\r\n    importance: string;\r\n    created: Date;\r\n    modified: Date;\r\n    todoDetailUser?: UserDetailTodo;\r\n    todoDetailCategory?: CategoryDetailTodo;\r\n  }\r\n  \r\n  export interface UserDetailTodo {\r\n    userId: string;\r\n    userName: string;\r\n    fullName: string;\r\n  }\r\n  \r\n  export interface CategoryDetailTodo {\r\n    todoCategoryId: string;\r\n    todoCategoryName: string;\r\n  }\r\n",
            "properties": [
                {
                    "name": "created",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deadline",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "importance",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modified",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "todoDetailCategory",
                    "type": "CategoryDetailTodo",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "todoDetailUser",
                    "type": "UserDetailTodo",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "todoId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "todoName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ToDoList",
            "id": "interface-ToDoList-c2a915558cc4b26b9ccea8d8cd207c15",
            "file": "src/app/store/models/todoList.i.ts",
            "type": "interface",
            "sourceCode": "export interface ToDoList{\r\n    filterBox: string;\r\n    title: string;\r\n    btnAdd: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "btnAdd",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "filterBox",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TodoState",
            "id": "interface-TodoState-e1b65b88c21e18312fc0bba491c1efe4",
            "file": "src/app/store/reducers/todo.reducer.ts",
            "type": "interface",
            "sourceCode": "import { ETodo, TodoAction } from '../actions/todo.action';\r\nimport { Category } from '../models/category.i';\r\nimport { LabelledValue } from '../models/labelvalue.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport interface TodoState {\r\n  userId : number;\r\n  todos: Todo[];\r\n  pagination: Pagination;\r\n  currentTodo?: Todo;\r\n  isLoading: boolean;\r\n  error?: string;\r\n  listImportance: LabelledValue<string>[];\r\n  listCategory?: Category[];\r\n  filter: FilterTodo;\r\n}\r\n\r\nconst initTodoState: TodoState = {\r\n  userId : 1,\r\n  todos: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total : 20,\r\n  },\r\n  filter :{\r\n    textSearch :\"\",\r\n    category : [],\r\n    status :\"\",\r\n    fromDate :\"\",\r\n    importance :\"\",\r\n    toDate : \"\"\r\n  },\r\n  isLoading: false,\r\n  listImportance :[\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ]\r\n};\r\nexport function todoReducer(\r\n  state = initTodoState,\r\n  action: TodoAction\r\n): TodoState {\r\n  switch (action.type) {\r\n    case ETodo.ADD:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ETodo.ADD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ETodo.ADD_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ETodo.DELETE:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ETodo.DELETE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ETodo.DELETE_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ETodo.UPDATE:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ETodo.UPDATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ETodo.UPDATE_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    case ETodo.Filter:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ETodo.Filter_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        todos: action.payload.todos,\r\n        pagination: action.payload.pagination,\r\n        filter : action.payload.filter,\r\n      };\r\n    case ETodo.Filter_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n      case ETodo.LOAD_CATEGORY:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ETodo.LOAD_CATEGORY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        listCategory: action.payload.listCategory,\r\n      };\r\n    case ETodo.LOAD_CATEGORY_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload.message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "currentTodo",
                    "type": "Todo",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "error",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "filter",
                    "type": "FilterTodo",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoading",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "listCategory",
                    "type": "Category[]",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "listImportance",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "todos",
                    "type": "Todo[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-5341334cb27bd74b607fcf6c3d7d93a2",
            "file": "src/app/store/models/login.i.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: number;\r\n  fullName: string;\r\n  userName: string;\r\n}\r\nexport interface Login {\r\n  accessToken: string;\r\n  user: User;\r\n  typeToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "fullName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserDetailTodo",
            "id": "interface-UserDetailTodo-d70dda1b693590efe74a7e6390cb0a2e",
            "file": "src/app/store/models/detail-todo.ts",
            "type": "interface",
            "sourceCode": "export interface TodoDetail {\r\n    todoId: string;\r\n    todoName: string;\r\n    description: string;\r\n    status: string;\r\n    deadline: Date;\r\n    importance: string;\r\n    created: Date;\r\n    modified: Date;\r\n    todoDetailUser?: UserDetailTodo;\r\n    todoDetailCategory?: CategoryDetailTodo;\r\n  }\r\n  \r\n  export interface UserDetailTodo {\r\n    userId: string;\r\n    userName: string;\r\n    fullName: string;\r\n  }\r\n  \r\n  export interface CategoryDetailTodo {\r\n    todoCategoryId: string;\r\n    todoCategoryName: string;\r\n  }\r\n",
            "properties": [
                {
                    "name": "fullName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserNames",
            "id": "interface-UserNames-2abf7ea972dc717b97830297996feeba",
            "file": "src/app/store/models/schedule.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface Schedule {\r\n  scheduleId: number;\r\n  title: string;\r\n  description: string;\r\n  timeStart: Date;\r\n  dueTime: Date;\r\n  allDay: boolean;\r\n  createByName: string;\r\n  typeSchedule: string;\r\n  users: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: number;\r\n  createdBy: number;\r\n  userName: string;\r\n  status: string;\r\n  place?: string;\r\n  importance?: string;\r\n  typeRepeat?: string;\r\n  time?: string;\r\n}\r\n\r\nexport interface ScheduleData {\r\n  count: number;\r\n  records: Schedule[];\r\n}\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  from?: string;\r\n  to?: string;\r\n  sort?: SortItem[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n}\r\n\r\nexport interface CategorySchedule {\r\n  scheduleCategoryId: number;\r\n  name: string;\r\n  description: string;\r\n  created: Date;\r\n  modified: Date;\r\n  colors: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n}\r\nexport interface ScheduleDetail {\r\n  scheduleId: string;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  dueDate: string;\r\n  timeDueRepeat: string;\r\n  timeStartRepeat: string;\r\n  createBy: string;\r\n  createdByName: string;\r\n  createByFullName?: string;\r\n  scheduleCategoryName: string;\r\n  scheduleCategoryId: string;\r\n  created: string;\r\n  modified: string;\r\n  place: string;\r\n  important: string;\r\n  userNames: string;\r\n  equipmentNames: string;\r\n  type: string;\r\n  valueRepeat: string;\r\n}\r\nexport interface UserNames {\r\n  userId: number;\r\n  userName: string;\r\n}\r\nexport interface EquipmentNames {\r\n  dueTime: string;\r\n  startTime: string;\r\n  equipmentId: number;\r\n  equipmentName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "userId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ValueFilterSchedule",
            "id": "interface-ValueFilterSchedule-eec6ab79729277b83660d57eb83f0f32",
            "file": "src/app/store/models/schedule-filter.i.ts",
            "type": "interface",
            "sourceCode": "import { SortItem } from './column.i';\r\n\r\nexport interface FilterSchedule {\r\n  textSearch?: string;\r\n  importance?: string;\r\n  category?: string[];\r\n  fromDateList?: string;\r\n  toDateList?: string;\r\n  sort?: SortItem[];\r\n}\r\n\r\nexport interface LabelFilterSchedule<T> {\r\n  labelImportance?: T;\r\n  labelFromDate?: T;\r\n  labelToDate?: T;\r\n  labelCategory?: T;\r\n}\r\n\r\nexport interface PlaceholderFilterSchedule {\r\n  placeholderSearch?: string;\r\n  titleImportance?: string;\r\n  titleCategory?: string;\r\n}\r\n\r\nexport interface ButtonFilterSchedule<T> {\r\n  buttonSubmit?: T;\r\n  buttonReset?: T;\r\n}\r\n\r\nexport interface ValueFilterSchedule {\r\n  valueSearch?: string;\r\n  valueImportance?: string;\r\n  valueCategory?: string[];\r\n  valueGetToDate?: string;\r\n  valueGetToTimeNow?: string;\r\n  valueGetToHour?: string;\r\n  valueGetToMinute?: string;\r\n  valueGetFromDate?: string;\r\n  valueGetFromTimeNow?: string;\r\n  valueGetFromHour?: string;\r\n  valueGetFromMinute?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "valueCategory",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "valueGetFromDate",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "valueGetFromHour",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "valueGetFromMinute",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "valueGetFromTimeNow",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "valueGetToDate",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "valueGetToHour",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "valueGetToMinute",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "valueGetToTimeNow",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "valueImportance",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "valueSearch",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-5284af3b6791813336786c1ac21e6504",
            "file": "src/app/provider/api/api.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "CustomEventTitleFormatter",
            "id": "injectable-CustomEventTitleFormatter-253a5581e081a34f74dc17c0082c9ead",
            "file": "src/app/shared/components/calendar/custom-event-title-formatter.provider.ts",
            "properties": [],
            "methods": [
                {
                    "name": "day",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "week",
                    "args": [
                        {
                            "name": "event",
                            "type": "CalendarEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CalendarEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { LOCALE_ID, Inject, Injectable } from '@angular/core';\r\nimport { CalendarEventTitleFormatter, CalendarEvent } from 'angular-calendar';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class CustomEventTitleFormatter extends CalendarEventTitleFormatter {\r\n  constructor(@Inject(LOCALE_ID) private locale: string) {\r\n    super();\r\n  }\r\n\r\n  week(event: CalendarEvent): string {\r\n    return `<b>${formatDate(\r\n      event.start,\r\n      'hh:mm a',\r\n      this.locale\r\n    )} - ${formatDate(event.end, 'hh:mm a', this.locale)}</b> ${event.title}`;\r\n  }\r\n\r\n  day(event: CalendarEvent): string {\r\n    return `<b>${formatDate(\r\n      event.start,\r\n      'hh:mm a',\r\n      this.locale\r\n    )} - ${formatDate(event.end, 'hh:mm a', this.locale)}</b> ${event.title}`;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "locale",
                        "type": "string"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CalendarEventTitleFormatter",
            "type": "injectable"
        },
        {
            "name": "NotificationEffect",
            "id": "injectable-NotificationEffect-d1d84ccfb72e784de669055a76cc2749",
            "file": "src/app/store/effects/notification.effect.ts",
            "properties": [
                {
                    "name": "getAllEvent",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.GET_EVENT),\r\n      mergeMap((action: NotificationGetEvent) =>\r\n        this.noticeService.getAllEvent().pipe(\r\n          map(\r\n            (dataEvent: EventNotification[]) =>\r\n              new NotificationGetEventSuccess({\r\n                event: dataEvent,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(new NotificationGetEventFail({ message: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "getCountNotification",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.COUNT_NOTIFICATIONS),\r\n      mergeMap((action: CountNotification) =>\r\n        this.noticeService.getCountNotification().pipe(\r\n          map(\r\n            (data: number) =>\r\n              new CountNotificationSuccess({\r\n                total: data,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(new CountNotificationFail({ message: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "loadAll$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.LOAD_ALL),\r\n      mergeMap((action: NotificationLoadAll) =>\r\n        this.noticeService\r\n          .getAllNotification(action.payload.pagination, action.payload.filter)\r\n          .pipe(\r\n            map(\r\n              (dataNotification) =>\r\n                new NotificationLoadAllSuccess({\r\n                  notifications: dataNotification,\r\n                  filter: action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(new NotificationLoadAllFail({ message: error }))\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { EventNotification } from '../models/event-notification.i';\r\nimport {\r\n  CountNotification,\r\n  CountNotificationFail,\r\n  CountNotificationSuccess,\r\n  ENotification,\r\n  NotificationGetEvent,\r\n  NotificationGetEventFail,\r\n  NotificationGetEventSuccess,\r\n  NotificationLoadAll,\r\n  NotificationLoadAllFail,\r\n  NotificationLoadAllSuccess,\r\n} from './../actions/notification.action';\r\nimport { NotificationService } from './../services/notification.service';\r\n@Injectable()\r\nexport class NotificationEffect {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private noticeService: NotificationService\r\n  ) {}\r\n  loadAll$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.LOAD_ALL),\r\n      mergeMap((action: NotificationLoadAll) =>\r\n        this.noticeService\r\n          .getAllNotification(action.payload.pagination, action.payload.filter)\r\n          .pipe(\r\n            map(\r\n              (dataNotification) =>\r\n                new NotificationLoadAllSuccess({\r\n                  notifications: dataNotification,\r\n                  filter: action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(new NotificationLoadAllFail({ message: error }))\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n\r\n  getAllEvent = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.GET_EVENT),\r\n      mergeMap((action: NotificationGetEvent) =>\r\n        this.noticeService.getAllEvent().pipe(\r\n          map(\r\n            (dataEvent: EventNotification[]) =>\r\n              new NotificationGetEventSuccess({\r\n                event: dataEvent,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(new NotificationGetEventFail({ message: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  getCountNotification = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ENotification.COUNT_NOTIFICATIONS),\r\n      mergeMap((action: CountNotification) =>\r\n        this.noticeService.getCountNotification().pipe(\r\n          map(\r\n            (data: number) =>\r\n              new CountNotificationSuccess({\r\n                total: data,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(new CountNotificationFail({ message: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "noticeService",
                        "type": "NotificationService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "noticeService",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-b110acfa8d8432613d5c8aeefdb9ceba",
            "file": "src/app/store/services/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<EventNotification[]>",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "getAllNotification",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filter",
                            "type": "FilterNotification"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<Notification>>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "FilterNotification",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCountNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "updateIsRead",
                    "args": [
                        {
                            "name": "data",
                            "type": "IsRead"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IsRead",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { EventNotification } from '../models/event-notification.i';\r\nimport { IsRead } from '../models/is_read.i';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Page } from '../models/page.i';\r\nimport { Notification } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationService {\r\n  constructor(private http: HttpClient) {}\r\n  getAllNotification(\r\n    pagination: Pagination,\r\n    filter: FilterNotification\r\n  ): Observable<Page<Notification>> {\r\n    const page = pagination.page;\r\n    const pageSize = pagination.pageSize;\r\n    const httpfilter = {};\r\n    if (filter.textSearch !== '') {\r\n      httpfilter['search'] = filter.textSearch;\r\n    }\r\n    if (filter.sort != [] && filter.sort != undefined) {\r\n      filter.sort.forEach((e) => {\r\n        if (e.sort != 'none')\r\n          if (e.name !== null) {\r\n            httpfilter['sortName'] = e.name;\r\n            httpfilter['sortBy'] = e.sort;\r\n          }\r\n      });\r\n    }\r\n    if (filter.event !== \"\") {\r\n      httpfilter[\"eventTypeName\"] = filter.event;\r\n    }\r\n    if (filter.status !== -1) {\r\n      httpfilter[\"isRead\"] = filter.status;\r\n    }\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        ...httpfilter,\r\n        pageSize: String(pageSize),\r\n        page: String(page),\r\n      },\r\n    });\r\n    return this.http.get<Page<Notification>>(environment.urlNotification, {\r\n      params\r\n    });\r\n  }\r\n\r\n  getAllEvent(): Observable<EventNotification[]> {\r\n    return this.http.get<EventNotification[]>(environment.urlEvent);\r\n  }\r\n  getCountNotification(): Observable<number> {\r\n    return this.http.get<number>(environment.urlCountNotification);\r\n    // TODO : fake value vì chưa có api\r\n    // return of(12);\r\n  }\r\n  updateIsRead(data: IsRead): Observable<any> {\r\n    return this.http.put<void>(environment.urlNotification, data);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NotificationStoreFacade",
            "id": "injectable-NotificationStoreFacade-176954856f4ea6211a35f18b6efa557a",
            "file": "src/app/store/store-facades/notification.store-facade.ts",
            "properties": [
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "filterNotificationByEvent",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "event",
                            "type": "EventNotification"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "EventNotification",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterNotificationByStatus",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "status",
                            "type": "StatusNotification"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "status",
                            "type": "StatusNotification",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueCountNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "getValueNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "getValueTablePage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "loadAllNotification",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filter",
                            "type": "FilterNotification"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "FilterNotification",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCountNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "loadValueEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../app-state';\r\nimport { EventNotification } from '../models/event-notification.i';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { getCountNotification, getnotification } from '../selectors/notification.selector';\r\nimport {\r\n  CountNotification,\r\n  NotificationFilterEvent,\r\n  NotificationFilterStatus,\r\n  NotificationGetEvent,\r\n  NotificationLoadAll,\r\n} from './../actions/notification.action';\r\nimport { Pagination } from './../models/pagination.i';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NotificationStoreFacade {\r\n  constructor(private store: Store<AppState>) {\r\n    this.getValueNotification();\r\n    this.loadCountNotification();\r\n  }\r\n\r\n  public pagination: Pagination;\r\n  getValueNotification() {\r\n    this.store.select(getnotification).subscribe((notification) => {\r\n      this.pagination = notification.pagination;\r\n    })\r\n  }\r\n  loadAllNotification(pagination: Pagination, filter: FilterNotification) {\r\n    this.store.dispatch(new NotificationLoadAll({ pagination, filter }));\r\n  }\r\n  filterNotificationByStatus(pagination: Pagination, status: StatusNotification) {\r\n\r\n    this.store.dispatch(new NotificationFilterStatus({ pagination, status }));\r\n  }\r\n  filterNotificationByEvent(pagination: Pagination, event: EventNotification) {\r\n    this.store.dispatch(new NotificationFilterEvent({ pagination, event }));\r\n  }\r\n  getValueTablePage() {\r\n    return this.store.select(getnotification);\r\n  }\r\n  loadValueEvent(){\r\n    this.store.dispatch(new NotificationGetEvent({}));\r\n  }\r\n\r\n  loadCountNotification(){\r\n    this.store.dispatch(new CountNotification({}));\r\n  }\r\n  getValueCountNotification(){\r\n    return this.store.select(getCountNotification);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PollService",
            "id": "injectable-PollService-7edfef6edebf47a3c40ba89ded5f5b08",
            "file": "src/app/store/services/poll.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:8080/'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deletePoll",
                    "args": [
                        {
                            "name": "idPoll",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "idPoll",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getListOptionPoll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "getListOptionPollDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "getListPoll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "getListTopVote",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PollService {\r\n\r\n    private baseUrl = 'http://localhost:8080/';\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getListPoll(): Observable<any> {\r\n        return this.http.get(`${this.baseUrl}` + 'pollresponse-list'); // poll-list\r\n    }\r\n\r\n    getListOptionPoll(): Observable<any> {\r\n        return this.http.get(`${this.baseUrl}` + 'optionpoll-list');\r\n    }\r\n\r\n    getListOptionPollDetail(): Observable<any> {\r\n        return this.http.get(`${this.baseUrl}` + 'optionpolldetail-list');\r\n    }\r\n\r\n    getListTopVote(): Observable<any> {\r\n        return this.http.get(`${this.baseUrl}` + 'topvotes-list');\r\n    }\r\n\r\n    deletePoll(idPoll: any): Observable<any>{\r\n        return this.http.delete(`${this.baseUrl}` + `poll-delete/${idPoll}`)\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScheduleEffects",
            "id": "injectable-ScheduleEffects-cce22e46f92a4088280627808cc771e8",
            "file": "src/app/store/effects/schedule.effect.ts",
            "properties": [
                {
                    "name": "addSchedule$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.ADD),\r\n      mergeMap((action: ScheduleAdd) =>\r\n        this.scheduleService.addSchedule(action.payload.schedule).pipe(\r\n          map(() => new ScheduleAddSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleAddFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 232
                },
                {
                    "name": "deleteSchedule$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.DELETE_EVENT),\r\n      mergeMap((action: ScheduleDeleteEvent) =>\r\n        this.scheduleService.delEventsSchedule(action.payload.delSchedule).pipe(\r\n          map((res: { userId: number; scheduleId: number; title: string }) => {\r\n            this.snackbarFacade.openDeleteSchedule(res.title);\r\n            return new ScheduleDeleteEventSuccess({\r\n              delSchedule: action.payload.delSchedule,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleDeleteEventFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "filterByCategory$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.FILTER_BY_CATEGORY),\r\n      map((action: ScheduleFilterByCategory) => {\r\n        if (action.payload?.idsScheduleCategory) {\r\n          return new ScheduleFilterByCategorySuccess({\r\n            idsScheduleCategory: action.payload.idsScheduleCategory,\r\n          });\r\n        }\r\n      }),\r\n      catchError((error) =>\r\n        of(\r\n          new ScheduleFilterByCategoryFail({\r\n            message: error,\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 212
                },
                {
                    "name": "getAllEventsAfterTomorrow$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_AFTER_TOMORROW),\r\n      mergeMap((action: ScheduleLoadEventsAfterTomorrow) =>\r\n        this.scheduleService.getAllEventsAfterTomorrow().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsAfterTomorrowSuccess({\r\n                eventsAfterTomorrow: res.records,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsAfterTomorrowFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "getAllEventsToday$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_TODAY),\r\n      mergeMap((action: ScheduleLoadEventsToday) =>\r\n        this.scheduleService.getAllEventsToday().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsTodaySuccess({ eventsToday: res.records })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsTodayFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "getAllEventsTomorrow$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_TOMORROW),\r\n      mergeMap((action: ScheduleLoadEventsTomorrow) =>\r\n        this.scheduleService.getAllEventsTomorrow().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsTomorrowSuccess({\r\n                eventsTomorrow: res.records,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsTomorrowFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "getAllSchedule$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_ALL),\r\n      mergeMap((action: ScheduleLoadAll) =>\r\n        this.scheduleService.getAllSchedule(action.payload).pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadAllSuccess({ schedules: res.records })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadAllFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "getCategories$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_CATEGORY),\r\n      mergeMap(() =>\r\n        this.scheduleService.getCategoriesSchedule().pipe(\r\n          map((res) => {\r\n            return new ScheduleCategoryLoadAllSuccess({\r\n              categories: res.records,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleCategoryLoadAllFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "getEquipment$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.CHECK_EQUIPMENT),\r\n      mergeMap((action: CheckEquipment) =>\r\n        this.scheduleService.checkEquipment(action.payload.equipment).pipe(\r\n          map(\r\n            (res: CheckFreeTimeResponse) =>\r\n              new CheckEquipmentSuccess({ list: res })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckEquipmentFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 250
                },
                {
                    "name": "getFilterSchedule$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.FILTER),\r\n      mergeMap((action: ScheduleFilter) =>\r\n        this.scheduleService\r\n          .getFilterSchedule(action.payload.pagination, action.payload.filter)\r\n          .pipe(\r\n            map(\r\n              (res: Page<Schedule>) =>\r\n                new ScheduleFilterSuccess({\r\n                  schedules: res.data,\r\n                  pagination: {\r\n                    page: res.page,\r\n                    pageSize: res.pageSize,\r\n                    total: res.total,\r\n                  },\r\n                  filter: action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new ScheduleFilterFail({\r\n                  message: MessageConstants.SCHEDULE_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 271
                },
                {
                    "name": "undoDeleteSchedule$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.UNDO_DELETE_EVENT),\r\n      mergeMap((action: ScheduleUndoDeleteEvent) =>\r\n        this.scheduleService\r\n          .undoDelEventSchedule(action.payload.delSchedule)\r\n          .pipe(\r\n            map(\r\n              (res: { userId: number; scheduleId: number; title: string }) => {\r\n                // this.snackbarFacade.openUndoDeleteSchedule(res.title);\r\n                return new ScheduleUndoDeleteEventSuccess({\r\n                  delSchedule: action.payload.delSchedule,\r\n                  listRestoreSchedule: action.payload.listRestoreSchedule,\r\n                });\r\n              }\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new ScheduleUndoDeleteEventFail({\r\n                  message: error,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { ScheduleData, Schedule } from './../models/schedule.i';\r\nimport { mergeMap, map, catchError } from 'rxjs/operators';\r\nimport {\r\n  ESchedule,\r\n  ScheduleLoadAllSuccess,\r\n  ScheduleLoadAllFail,\r\n  ScheduleLoadAll,\r\n  ScheduleLoadEventsToday,\r\n  ScheduleLoadEventsTodaySuccess,\r\n  ScheduleLoadEventsTodayFail,\r\n  ScheduleLoadEventsTomorrowSuccess,\r\n  ScheduleLoadEventsTomorrow,\r\n  ScheduleLoadEventsTomorrowFail,\r\n  ScheduleLoadEventsAfterTomorrow,\r\n  ScheduleLoadEventsAfterTomorrowSuccess,\r\n  ScheduleLoadEventsAfterTomorrowFail,\r\n  ScheduleDeleteEvent,\r\n  ScheduleDeleteEventSuccess,\r\n  ScheduleDeleteEventFail,\r\n  ScheduleUndoDeleteEvent,\r\n  ScheduleUndoDeleteEventSuccess,\r\n  ScheduleUndoDeleteEventFail,\r\n  ScheduleCategoryLoadAll,\r\n  ScheduleCategoryLoadAllSuccess,\r\n  ScheduleCategoryLoadAllFail,\r\n  ScheduleFilterByCategorySuccess,\r\n  ScheduleFilterByCategory,\r\n  ScheduleFilterByCategoryFail,\r\n  ScheduleAdd,\r\n  ScheduleAddSuccess,\r\n  ScheduleAddFail,\r\n  CheckEquipment,\r\n  CheckEquipmentSuccess,\r\n  CheckEquipmentFail,\r\n  ScheduleFilter,\r\n  ScheduleFilterFail,\r\n  ScheduleFilterSuccess,\r\n} from './../actions/schedule.action';\r\nimport { ScheduleService } from './../services/schedule.service';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { of } from 'rxjs';\r\nimport { SnackbarStoreFacade } from '../store-facades/snackbar.store-facade';\r\nimport { CheckFreeTimeResponse } from '../models/add-schedule.i';\r\nimport { Page } from '../models/page.i';\r\nimport { MessageConstants } from '../../shared/constants/message.contants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScheduleEffects {\r\n  constructor(\r\n    private actions$: Actions,\r\n    private scheduleService: ScheduleService,\r\n    private snackbarFacade: SnackbarStoreFacade\r\n  ) {}\r\n  getAllSchedule$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_ALL),\r\n      mergeMap((action: ScheduleLoadAll) =>\r\n        this.scheduleService.getAllSchedule(action.payload).pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadAllSuccess({ schedules: res.records })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadAllFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  getAllEventsToday$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_TODAY),\r\n      mergeMap((action: ScheduleLoadEventsToday) =>\r\n        this.scheduleService.getAllEventsToday().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsTodaySuccess({ eventsToday: res.records })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsTodayFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  getAllEventsTomorrow$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_TOMORROW),\r\n      mergeMap((action: ScheduleLoadEventsTomorrow) =>\r\n        this.scheduleService.getAllEventsTomorrow().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsTomorrowSuccess({\r\n                eventsTomorrow: res.records,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsTomorrowFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  getAllEventsAfterTomorrow$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_EVENTS_AFTER_TOMORROW),\r\n      mergeMap((action: ScheduleLoadEventsAfterTomorrow) =>\r\n        this.scheduleService.getAllEventsAfterTomorrow().pipe(\r\n          map(\r\n            (res: ScheduleData) =>\r\n              new ScheduleLoadEventsAfterTomorrowSuccess({\r\n                eventsAfterTomorrow: res.records,\r\n              })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleLoadEventsAfterTomorrowFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  deleteSchedule$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.DELETE_EVENT),\r\n      mergeMap((action: ScheduleDeleteEvent) =>\r\n        this.scheduleService.delEventsSchedule(action.payload.delSchedule).pipe(\r\n          map((res: { userId: number; scheduleId: number; title: string }) => {\r\n            this.snackbarFacade.openDeleteSchedule(res.title);\r\n            return new ScheduleDeleteEventSuccess({\r\n              delSchedule: action.payload.delSchedule,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleDeleteEventFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  undoDeleteSchedule$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.UNDO_DELETE_EVENT),\r\n      mergeMap((action: ScheduleUndoDeleteEvent) =>\r\n        this.scheduleService\r\n          .undoDelEventSchedule(action.payload.delSchedule)\r\n          .pipe(\r\n            map(\r\n              (res: { userId: number; scheduleId: number; title: string }) => {\r\n                // this.snackbarFacade.openUndoDeleteSchedule(res.title);\r\n                return new ScheduleUndoDeleteEventSuccess({\r\n                  delSchedule: action.payload.delSchedule,\r\n                  listRestoreSchedule: action.payload.listRestoreSchedule,\r\n                });\r\n              }\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new ScheduleUndoDeleteEventFail({\r\n                  message: error,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n  getCategories$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.LOAD_CATEGORY),\r\n      mergeMap(() =>\r\n        this.scheduleService.getCategoriesSchedule().pipe(\r\n          map((res) => {\r\n            return new ScheduleCategoryLoadAllSuccess({\r\n              categories: res.records,\r\n            });\r\n          }),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleCategoryLoadAllFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  filterByCategory$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.FILTER_BY_CATEGORY),\r\n      map((action: ScheduleFilterByCategory) => {\r\n        if (action.payload?.idsScheduleCategory) {\r\n          return new ScheduleFilterByCategorySuccess({\r\n            idsScheduleCategory: action.payload.idsScheduleCategory,\r\n          });\r\n        }\r\n      }),\r\n      catchError((error) =>\r\n        of(\r\n          new ScheduleFilterByCategoryFail({\r\n            message: error,\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addSchedule$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.ADD),\r\n      mergeMap((action: ScheduleAdd) =>\r\n        this.scheduleService.addSchedule(action.payload.schedule).pipe(\r\n          map(() => new ScheduleAddSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new ScheduleAddFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getEquipment$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.CHECK_EQUIPMENT),\r\n      mergeMap((action: CheckEquipment) =>\r\n        this.scheduleService.checkEquipment(action.payload.equipment).pipe(\r\n          map(\r\n            (res: CheckFreeTimeResponse) =>\r\n              new CheckEquipmentSuccess({ list: res })\r\n          ),\r\n          catchError((error) =>\r\n            of(\r\n              new CheckEquipmentFail({\r\n                message: error,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  getFilterSchedule$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ESchedule.FILTER),\r\n      mergeMap((action: ScheduleFilter) =>\r\n        this.scheduleService\r\n          .getFilterSchedule(action.payload.pagination, action.payload.filter)\r\n          .pipe(\r\n            map(\r\n              (res: Page<Schedule>) =>\r\n                new ScheduleFilterSuccess({\r\n                  schedules: res.data,\r\n                  pagination: {\r\n                    page: res.page,\r\n                    pageSize: res.pageSize,\r\n                    total: res.total,\r\n                  },\r\n                  filter: action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new ScheduleFilterFail({\r\n                  message: MessageConstants.SCHEDULE_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "scheduleService",
                        "type": "ScheduleService"
                    },
                    {
                        "name": "snackbarFacade",
                        "type": "SnackbarStoreFacade"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scheduleService",
                        "type": "ScheduleService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarFacade",
                        "type": "SnackbarStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ScheduleService",
            "id": "injectable-ScheduleService-82bdb0a0f9042c6acaf8a8b96a46bebf",
            "file": "src/app/store/services/schedule.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addSchedule",
                    "args": [
                        {
                            "name": "schedule",
                            "type": "AddSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "schedule",
                            "type": "AddSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkEquipment",
                    "args": [
                        {
                            "name": "equipment",
                            "type": "CheckFreeTimeParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "equipment",
                            "type": "CheckFreeTimeParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertTypeRepeatEvents",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "{ count: any; records: {}; }",
                    "typeParameters": [],
                    "line": 177,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delEventsSchedule",
                    "args": [
                        {
                            "name": "delSchedule",
                            "type": "Schedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "delSchedule",
                            "type": "Schedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllEventsAfterTomorrow",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "getAllEventsToday",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "getAllEventsTomorrow",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "getAllSchedule",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategoriesSchedule",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "getDetailSchedule",
                    "args": [
                        {
                            "name": "scheduleId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ScheduleDetail>",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "scheduleId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilterSchedule",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filters",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<Schedule>>",
                    "typeParameters": [],
                    "line": 127,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "undoDelEventSchedule",
                    "args": [
                        {
                            "name": "deletedSchedule",
                            "type": "Schedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "deletedSchedule",
                            "type": "Schedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { map } from 'rxjs/operators';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {\r\n  format,\r\n  set,\r\n  isBefore,\r\n  getHours,\r\n  addWeeks,\r\n  parseISO,\r\n  getMinutes,\r\n  addMonths,\r\n  addDays,\r\n} from 'date-fns';\r\nimport { Observable } from 'rxjs';\r\nimport { AddSchedule, CheckFreeTimeParams } from '../models/add-schedule.i';\r\nimport { Page } from '../models/page.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { environment } from './../../../environments/environment';\r\nimport {\r\n  CategorySchedule,\r\n  FilterSchedule,\r\n  Schedule,\r\n  ScheduleDetail,\r\n} from './../models/schedule.i';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ScheduleService {\r\n  constructor(private http: HttpClient) {}\r\n  getAllSchedule(filter: FilterSchedule): Observable<{ records: Schedule[] }> {\r\n    let params = new HttpParams();\r\n    Object.keys(filter).forEach((k) => {\r\n      params = params.set(k, filter[k]);\r\n    });\r\n    return this.http\r\n      .get<{ records: Schedule[] }>(`${environment.urlSchedule}`, { params })\r\n      .pipe(\r\n        map((res) => {\r\n          return this.convertTypeRepeatEvents(res);\r\n        })\r\n      );\r\n  }\r\n  getAllEventsToday(): Observable<{ records: Schedule[] }> {\r\n    const today = new Date().toISOString().split('T')[0];\r\n    const params = new HttpParams()\r\n      .append('sortName', `dueTime`)\r\n      .append('sortBy', `asc`)\r\n      .append('day', `${today}`);\r\n\r\n    return this.http.get<{ records: Schedule[] }>(\r\n      `${environment.urlSchedule}/day`,\r\n      { params }\r\n    );\r\n  }\r\n  getAllEventsTomorrow(): Observable<{ records: Schedule[] }> {\r\n    const today = new Date();\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const params = new HttpParams()\r\n      .append('sortName', `dueTime`)\r\n      .append('sortBy', `asc`)\r\n      .append('day', `${format(tomorrow, 'yyyy-MM-dd')}`);\r\n\r\n    return this.http.get<{ records: Schedule[] }>(\r\n      `${environment.urlSchedule}/day`,\r\n      { params }\r\n    );\r\n  }\r\n  getAllEventsAfterTomorrow(): Observable<{ records: Schedule[] }> {\r\n    const today = new Date();\r\n    const afterTomorrow = new Date(today);\r\n    afterTomorrow.setDate(afterTomorrow.getDate() + 2);\r\n    const params = new HttpParams()\r\n      .append('sortName', `dueTime`)\r\n      .append('sortBy', `asc`)\r\n      .append('day', `${format(afterTomorrow, 'yyyy-MM-dd')}`);\r\n\r\n    return this.http.get<{ records: Schedule[] }>(\r\n      `${environment.urlSchedule}/day`,\r\n      { params }\r\n    );\r\n  }\r\n  delEventsSchedule(\r\n    delSchedule: Schedule\r\n  ): Observable<{ userId: number; scheduleId: number; title: string }> {\r\n    const params = new HttpParams().append(\r\n      'scheduleId',\r\n      `${delSchedule.scheduleId}`\r\n    );\r\n    return this.http.delete<{\r\n      userId: number;\r\n      scheduleId: number;\r\n      title: string;\r\n    }>(`${environment.urlSchedule}`, { params });\r\n  }\r\n\r\n  undoDelEventSchedule(\r\n    deletedSchedule: Schedule\r\n  ): Observable<{ userId: number; scheduleId: number; title: string }> {\r\n    const params = new HttpParams().append(\r\n      'scheduleId',\r\n      `${deletedSchedule.scheduleId}`\r\n    );\r\n    return this.http.delete<{\r\n      userId: number;\r\n      scheduleId: number;\r\n      title: string;\r\n    }>(`${environment.urlSchedule}/undoDelete`, { params });\r\n  }\r\n  getCategoriesSchedule(): Observable<{ records: CategorySchedule[] }> {\r\n    return this.http.get<{ records: CategorySchedule[] }>(\r\n      `${environment.urlSchedule}/category`\r\n    );\r\n  }\r\n  getDetailSchedule(scheduleId: number): Observable<ScheduleDetail> {\r\n    return this.http.get<ScheduleDetail>(\r\n      environment.urlSchedule + `/${scheduleId}`\r\n    );\r\n  }\r\n  addSchedule(schedule: AddSchedule) {\r\n    return this.http.post(environment.urlSchedule, schedule);\r\n  }\r\n  checkEquipment(equipment: CheckFreeTimeParams) {\r\n    return this.http.post(environment.urlEquipment, equipment);\r\n  }\r\n  public getFilterSchedule(\r\n    pagination: Pagination,\r\n    filters: FilterSchedule\r\n  ): Observable<Page<Schedule>> {\r\n    const page = pagination ? pagination.page : 1;\r\n    const pageSize = pagination ? pagination.pageSize : 10;\r\n    const {\r\n      textSearch = '',\r\n      importance = '',\r\n      category = [],\r\n      sort,\r\n      fromDateList = '',\r\n      toDateList = '',\r\n    } = filters || {};\r\n    const httpFilter = {};\r\n    if (importance != '') {\r\n      httpFilter['importance'] = importance;\r\n    }\r\n    if (category.length > 0) {\r\n      httpFilter['categoryId'] = category;\r\n    }\r\n    if (textSearch != '') {\r\n      httpFilter['keyword'] = textSearch;\r\n    }\r\n    if (fromDateList != '') {\r\n      httpFilter['from'] = fromDateList;\r\n    }\r\n    if (toDateList != '') {\r\n      httpFilter['to'] = toDateList;\r\n    }\r\n    if (sort != [] && sort != undefined) {\r\n      sort.forEach((e) => {\r\n        if (e.sort != 'none')\r\n          if (e.name !== null) {\r\n            httpFilter['sortName'] = e.name;\r\n            httpFilter['sortBy'] = e.sort;\r\n          }\r\n      });\r\n    }\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        ...httpFilter,\r\n        pageSize: String(pageSize),\r\n        page: String(page),\r\n      },\r\n    });\r\n    return this.http.get<Page<Schedule>>(`${environment.urlSchedule}/filter`, {\r\n      params: params,\r\n    });\r\n  }\r\n  private convertTypeRepeatEvents(data: any) {\r\n    let arr = [];\r\n    data.records?.map((rs) => {\r\n      switch (rs.typeRepeat) {\r\n        case 'weekly':\r\n          let week = parseISO(rs.timeStart);\r\n          while (isBefore(week, parseISO(rs.dueTime))) {\r\n            const timeStart = rs.repeatStartTime?.split(':');\r\n            const timeEnd = rs.repeatDueTime?.split(':');\r\n            const data = {\r\n              ...rs,\r\n              timeStart: set(week, {\r\n                hours: Number(timeStart[0]),\r\n                minutes: Number(timeStart[1]),\r\n              }),\r\n              dueTime: set(week, {\r\n                hours: Number(timeEnd[0]),\r\n                minutes: Number(timeEnd[1]),\r\n              }),\r\n            };\r\n            arr.push(data);\r\n            week = addWeeks(week, 1);\r\n          }\r\n          break;\r\n        case 'monthly':\r\n          let month = parseISO(rs.timeStart);\r\n          while (isBefore(month, parseISO(rs.dueTime))) {\r\n            const timeStart = rs.repeatStartTime?.split(':');\r\n            const timeEnd = rs.repeatDueTime?.split(':');\r\n            const dataMonly = {\r\n              ...rs,\r\n              timeStart: set(month, {\r\n                hours: Number(timeStart[0]),\r\n                minutes: Number(timeStart[1]),\r\n              }),\r\n              dueTime: set(month, {\r\n                hours: Number(timeEnd[0]),\r\n                minutes: Number(timeEnd[1]),\r\n              }),\r\n            };\r\n            arr.push(dataMonly);\r\n            month = addMonths(month, 1);\r\n          }\r\n          break;\r\n        case 'everyday':\r\n          let day = parseISO(rs.timeStart);\r\n          while (isBefore(day, parseISO(rs.dueTime))) {\r\n            const timeStart = rs.repeatStartTime?.split(':');\r\n            const timeEnd = rs.repeatDueTime?.split(':');\r\n            const dataEveryday = {\r\n              ...rs,\r\n              timeStart: set(day, {\r\n                hours: Number(timeStart[0]),\r\n                minutes: Number(timeStart[1]),\r\n              }),\r\n              dueTime: set(day, {\r\n                hours: Number(timeEnd[0]),\r\n                minutes: Number(timeEnd[1]),\r\n              }),\r\n            };\r\n            arr.push(dataEveryday);\r\n            day = addDays(day, 1);\r\n          }\r\n          break;\r\n        case 'normal':\r\n          arr.push(rs);\r\n      }\r\n    });\r\n    return {\r\n      count: arr?.length,\r\n      records: arr,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarEffects",
            "id": "injectable-SnackbarEffects-91e6d7e0b22663c275a00d155a5943fa",
            "file": "src/app/store/effects/snackbar.effects.ts",
            "properties": [
                {
                    "name": "closeSnackbars$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(SnackbarActions.CloseSnackbars),\r\n        tap(() => this.matSnackBar.dismiss())\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "deleteSchedule",
                    "type": "Schedule",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showSnackbar$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(SnackbarActions.OpenSnackbars),\r\n      map((action) => action.config),\r\n      tap((config) => {\r\n        const snackBarRef = this.matSnackBar.open(\r\n          config.message,\r\n          config.action,\r\n          config.config\r\n        );\r\n        if (config.action === 'Undo') {\r\n          snackBarRef.afterDismissed().subscribe((info) => {\r\n            if (info.dismissedByAction === true) {\r\n              let data: Schedule[];\r\n              let dataReal: Schedule;\r\n              this.store.select(getDelSchedule).subscribe((rs) => {\r\n                data = rs;\r\n              });\r\n              this.store.select(getDelScheduleReal).subscribe((rs) => {\r\n                dataReal = rs;\r\n              });\r\n              this.store.dispatch(\r\n                new ScheduleUndoDeleteEvent({\r\n                  delSchedule: dataReal,\r\n                  listRestoreSchedule: data,\r\n                })\r\n              );\r\n            }\r\n          });\r\n        }\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        throw new err();\r\n      }),\r\n      delay(environment.snackbarDelayTime),\r\n      map(() => {\r\n        return CloseSnackbars();\r\n      })\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import {\r\n  getEventsToday,\r\n  getDelSchedule,\r\n  getDelScheduleReal,\r\n} from './../selectors/schedule.selector';\r\nimport { Schedule } from './../models/schedule.i';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from './../app-state';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {\r\n  map,\r\n  tap,\r\n  delay,\r\n  catchError,\r\n  mergeMap,\r\n  switchMap,\r\n  concatMap,\r\n} from 'rxjs/operators';\r\nimport * as SnackbarActions from '../actions/snackbar.actions';\r\nimport { CloseSnackbars, OpenSnackbars } from '../actions/snackbar.actions';\r\nimport { environment } from '../../../environments/environment';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ScheduleUndoDeleteEvent } from '../actions/schedule.action';\r\nimport { concat, forkJoin, zip } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class SnackbarEffects {\r\n  deleteSchedule: Schedule;\r\n  closeSnackbars$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(SnackbarActions.CloseSnackbars),\r\n        tap(() => this.matSnackBar.dismiss())\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  showSnackbar$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(SnackbarActions.OpenSnackbars),\r\n      map((action) => action.config),\r\n      tap((config) => {\r\n        const snackBarRef = this.matSnackBar.open(\r\n          config.message,\r\n          config.action,\r\n          config.config\r\n        );\r\n        if (config.action === 'Undo') {\r\n          snackBarRef.afterDismissed().subscribe((info) => {\r\n            if (info.dismissedByAction === true) {\r\n              let data: Schedule[];\r\n              let dataReal: Schedule;\r\n              this.store.select(getDelSchedule).subscribe((rs) => {\r\n                data = rs;\r\n              });\r\n              this.store.select(getDelScheduleReal).subscribe((rs) => {\r\n                dataReal = rs;\r\n              });\r\n              this.store.dispatch(\r\n                new ScheduleUndoDeleteEvent({\r\n                  delSchedule: dataReal,\r\n                  listRestoreSchedule: data,\r\n                })\r\n              );\r\n            }\r\n          });\r\n        }\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        throw new err();\r\n      }),\r\n      delay(environment.snackbarDelayTime),\r\n      map(() => {\r\n        return CloseSnackbars();\r\n      })\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private matSnackBar: MatSnackBar,\r\n    private store: Store<AppState>\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matSnackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarStoreFacade",
            "id": "injectable-SnackbarStoreFacade-9aeb5276f46330aa464cf0b89e885e4f",
            "file": "src/app/store/store-facades/snackbar.store-facade.ts",
            "properties": [
                {
                    "name": "copyright$",
                    "defaultValue": "of(new Date())",
                    "type": "Observable<Date>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methods": [
                {
                    "name": "openDeleteSchedule",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEffect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openError",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openInfo",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSuccess",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openUndoDeleteSchedule",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import {\r\n  snackbarSUCCESS,\r\n  snackbarINFO,\r\n  snackbarERROR,\r\n} from '../../shared/constants/snackbar.constants';\r\nimport {\r\n  OpenSnackbars,\r\n  OpenSnackbarsFromEffect,\r\n} from '../actions/snackbar.actions';\r\nimport { AppState } from '../app-state';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SnackbarStoreFacade {\r\n  copyright$: Observable<Date> = of(new Date());\r\n  constructor(private store: Store<AppState>) {}\r\n  openSuccess(event: any) {\r\n    this.store.dispatch(\r\n      OpenSnackbars({\r\n        config: {\r\n          message: 'You opened Success',\r\n          action: 'Undo',\r\n          config: snackbarSUCCESS,\r\n        },\r\n      })\r\n    );\r\n  }\r\n  openInfo(event: any) {\r\n    this.store.dispatch(\r\n      OpenSnackbars({\r\n        config: {\r\n          message: 'You opened Info',\r\n          action: 'Close',\r\n          config: snackbarINFO,\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  openError(event: any) {\r\n    this.store.dispatch(\r\n      OpenSnackbars({\r\n        config: {\r\n          message: 'You opened Error',\r\n          action: 'Close',\r\n          config: snackbarERROR,\r\n        },\r\n      })\r\n    );\r\n  }\r\n\r\n  openEffect(event: any) {\r\n    this.store.dispatch(\r\n      OpenSnackbarsFromEffect({\r\n        config: {\r\n          message: 'You opened Snackar from effect',\r\n          action: 'UNDO',\r\n          config: snackbarSUCCESS,\r\n        },\r\n      })\r\n    );\r\n  }\r\n  openDeleteSchedule(title: string) {\r\n    this.store.dispatch(\r\n      OpenSnackbars({\r\n        config: {\r\n          message: `Event ${title} deleted successfully.`,\r\n          action: 'Undo',\r\n          config: snackbarSUCCESS,\r\n        },\r\n      })\r\n    );\r\n  }\r\n  openUndoDeleteSchedule(title: string) {\r\n    this.store.dispatch(\r\n      OpenSnackbars({\r\n        config: {\r\n          message: `Event ${title} undo successfully.`,\r\n          action: 'Close',\r\n          config: snackbarSUCCESS,\r\n        },\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocketClientService",
            "id": "injectable-SocketClientService-9d1cf4529228f68e6c55e1103dae2a35",
            "file": "src/app/socket-client/socket-client.service.ts",
            "properties": [
                {
                    "name": "socket",
                    "type": "SocketIOClient.Socket",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "defaultValue": "environment.urlSocket",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "connectionSocket",
                    "args": [
                        {
                            "name": "token",
                            "type": "string"
                        },
                        {
                            "name": "userName",
                            "type": "string"
                        },
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disconnectSocket",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listernNotification$",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport * as io from 'socket.io-client';\r\nimport { environment } from '../../environments/environment';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SocketClientService {\r\n  url: string = environment.urlSocket;\r\n  constructor() {}\r\n  public socket: SocketIOClient.Socket;\r\n  public connectionSocket(token: string, userName: string, userId: string) {\r\n    this.socket = io.connect(this.url, {\r\n      transports: ['polling', 'websocket'],\r\n      query: {\r\n        token: token,\r\n        username: userName,\r\n        userId: userId,\r\n      },\r\n    });\r\n    this.socket.emit('authentication');\r\n  }\r\n  public disconnectSocket() {\r\n    this.socket.disconnect();\r\n  }\r\n  public listernNotification$(): Observable<any> {\r\n    return new Observable<any>((o) => {\r\n      if (this.socket !== undefined) {\r\n        this.socket.on('setPopUpNotification', (data) => {\r\n          o.next(data);\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "type": "injectable"
        },
        {
            "name": "StoreFacade",
            "id": "injectable-StoreFacade-3210e669c05c3f1d51e01e61c45f2059",
            "file": "src/app/store/store-facades/login.store-facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { LogoutAction } from '../actions/login.action';\r\nimport { AppState } from '../app-state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreFacade {\r\n  constructor(private store: Store<AppState>) {}\r\n  logout() {\r\n    this.store.dispatch(new LogoutAction());\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StoreFacade",
            "id": "injectable-StoreFacade-a63b7ffe4a63fa4a7062d7678494b786-1",
            "file": "src/app/store/store-facades/schedule.store-facade.ts",
            "properties": [
                {
                    "name": "categories$",
                    "type": "Observable<CategorySchedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "deleteSchedule",
                    "type": "Schedule",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "eventsAfterTomorrow$",
                    "type": "Observable<Schedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "eventsToday$",
                    "type": "Observable<Schedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "eventsTomorrow$",
                    "type": "Observable<Schedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "filter",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "listRestoreSchedule",
                    "type": "Schedule[]",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "loading$",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "schedules$",
                    "type": "Observable<Schedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "userIdFake",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId get from localStore</p>\n",
                    "line": 74
                }
            ],
            "methods": [
                {
                    "name": "addSchedule",
                    "args": [
                        {
                            "name": "schedule",
                            "type": "AddSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "schedule",
                            "type": "AddSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkEquipment",
                    "args": [
                        {
                            "name": "equipment",
                            "type": "CheckFreeTimeParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "equipment",
                            "type": "CheckFreeTimeParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delSchedule",
                    "args": [
                        {
                            "name": "delSchedule",
                            "type": "Schedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "delSchedule",
                            "type": "Schedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchCategory",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152
                },
                {
                    "name": "dispatchFilterByCategory",
                    "args": [
                        {
                            "name": "idsScheduleCategory",
                            "type": "number[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "idsScheduleCategory",
                            "type": "number[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchSchedule",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchScheduleOnMonthChange",
                    "args": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterSchedule",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filter",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCategorySchedule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "getDataFilterByCategory$",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "getEventsAfterTomorrow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "getEventsInSiderBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155
                },
                {
                    "name": "getEventsToday",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "getEventsTomorrow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "getFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "getLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "getSchedules",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "getValuePaginationAndFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139
                },
                {
                    "name": "getValueScheduleTablePage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "undoDelSchedule",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                }
            ],
            "description": "",
            "sourceCode": "import { filter, map } from 'rxjs/operators';\r\nimport {\r\n  startOfMonth,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  endOfMonth,\r\n  isWithinInterval,\r\n  startOfDay,\r\n  endOfDay,\r\n} from 'date-fns';\r\nimport {\r\n  getFilterSchedule,\r\n  getEventsTomorrow,\r\n  getEventsAfterTomorrow,\r\n  getCategories,\r\n  getDataFilterByCategory,\r\n  getDelScheduleReal,\r\n} from './../selectors/schedule.selector';\r\nimport { FilterSchedule, CategorySchedule } from './../models/schedule.i';\r\nimport {\r\n  CheckEquipment,\r\n  ScheduleAdd,\r\n  ScheduleCategoryLoadAll,\r\n  ScheduleDeleteEvent,\r\n  ScheduleFilter,\r\n  ScheduleFilterByCategory,\r\n  ScheduleLoadEventsAfterTomorrow,\r\n  ScheduleLoadEventsAfterTomorrowFail,\r\n  ScheduleLoadEventsTodayFail,\r\n  ScheduleLoadEventsTomorrow,\r\n  ScheduleUndoDeleteEvent,\r\n} from './../actions/schedule.action';\r\nimport { ScheduleState } from '../reducers/schedule.reducer';\r\nimport { Observable, combineLatest } from 'rxjs';\r\nimport {\r\n  ScheduleLoadAll,\r\n  ScheduleLoadEventsToday,\r\n} from '../actions/schedule.action';\r\nimport {\r\n  getSchedule,\r\n  getSchedules,\r\n  getLoading,\r\n  getEventsToday,\r\n  getDelSchedule,\r\n} from '../selectors/schedule.selector';\r\nimport { Store } from '@ngrx/store';\r\nimport { Injectable } from '@angular/core';\r\nimport { AppState } from '../app-state';\r\nimport { Schedule } from '../models/schedule.i';\r\nimport { AddSchedule, CheckFreeTimeParams } from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreFacade {\r\n  constructor(private store: Store<AppState>) {\r\n  }\r\n  schedules$: Observable<Schedule[]>;\r\n  loading$: Observable<boolean>;\r\n  eventsToday$: Observable<Schedule[]>;\r\n  eventsTomorrow$: Observable<Schedule[]>;\r\n  eventsAfterTomorrow$: Observable<Schedule[]>;\r\n  categories$: Observable<CategorySchedule[]>;\r\n  filter: FilterSchedule;\r\n  deleteSchedule: Schedule;\r\n  pagination : Pagination;\r\n  listRestoreSchedule: Schedule[];\r\n\r\n  /**\r\n   * userId get from localStore\r\n   */\r\n\r\n  userIdFake: number = 1;\r\n  dispatchSchedule(filter: FilterSchedule) {\r\n    this.store.dispatch(new ScheduleLoadAll(filter));\r\n    this.store.dispatch(new ScheduleLoadEventsToday(filter));\r\n    this.store.dispatch(new ScheduleLoadEventsTomorrow(filter));\r\n    this.store.dispatch(new ScheduleLoadEventsAfterTomorrow(filter));\r\n    this.store.dispatch(new ScheduleCategoryLoadAll());\r\n  }\r\n  getSchedules() {\r\n    this.schedules$ = this.store.select(getSchedules);\r\n  }\r\n  getLoading() {\r\n    this.loading$ = this.store.select(getLoading);\r\n  }\r\n  getEventsToday() {\r\n    this.eventsToday$ = this.store.select(getEventsToday);\r\n  }\r\n  getFilter() {\r\n    this.store.select(getFilterSchedule).subscribe((filter) => {\r\n      this.filter = filter;\r\n    });\r\n  }\r\n  dispatchScheduleOnMonthChange(filter: FilterSchedule) {\r\n    this.store.dispatch(new ScheduleLoadAll(filter));\r\n  }\r\n  getEventsTomorrow() {\r\n    this.eventsTomorrow$ = this.store.select(getEventsTomorrow);\r\n  }\r\n  getEventsAfterTomorrow() {\r\n    this.eventsAfterTomorrow$ = this.store.select(getEventsAfterTomorrow);\r\n  }\r\n  delSchedule(delSchedule: Schedule) {\r\n    this.store.dispatch(new ScheduleDeleteEvent({ delSchedule }));\r\n  }\r\n  undoDelSchedule() {\r\n    combineLatest([\r\n      this.store.select(getDelScheduleReal),\r\n      this.store.select(getDelSchedule),\r\n    ]).subscribe(([rs1, rs2]) => {\r\n      this.deleteSchedule = rs1;\r\n      this.listRestoreSchedule = rs2;\r\n    });\r\n    this.store.dispatch(\r\n      new ScheduleUndoDeleteEvent({\r\n        delSchedule: this.deleteSchedule,\r\n        listRestoreSchedule: this.listRestoreSchedule,\r\n      })\r\n    );\r\n  }\r\n  getCategorySchedule() {\r\n    this.categories$ = this.store.select(getCategories);\r\n  }\r\n  dispatchFilterByCategory(idsScheduleCategory: number[]) {\r\n    this.store.dispatch(new ScheduleFilterByCategory({ idsScheduleCategory }));\r\n  }\r\n  getDataFilterByCategory$() {\r\n    return this.store.select(getDataFilterByCategory);\r\n  }\r\n  addSchedule(schedule: AddSchedule) {\r\n    this.store.dispatch(new ScheduleAdd({ schedule }));\r\n  }\r\n  checkEquipment(equipment: CheckFreeTimeParams) {\r\n    this.store.dispatch(new CheckEquipment({ equipment }));\r\n  }\r\n   //  Lấy giá trị khởi tạo từ store có hoặc không.\r\n  getValuePaginationAndFilter() {\r\n    this.store.select(getSchedule).subscribe((schedule) => {\r\n      this.filter = schedule.filter;\r\n      this.pagination = schedule.pagination;\r\n    });\r\n  }  \r\n  // thực hiện hành động push dữ liệu vào store từ action\r\n  filterSchedule(pagination: Pagination, filter: FilterSchedule) {\r\n    this.store.dispatch(new ScheduleFilter({ pagination, filter }));\r\n  }\r\n  getValueScheduleTablePage() {\r\n    return this.store.select(getSchedule);\r\n  }\r\n  dispatchCategory() {\r\n    this.store.dispatch(new ScheduleCategoryLoadAll());\r\n  }\r\n  getEventsInSiderBar() {\r\n    const today = new Date();\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const afterTomorrow = new Date(today);\r\n    afterTomorrow.setDate(afterTomorrow.getDate() + 2);\r\n    this.eventsToday$ = this.schedules$.pipe(\r\n      map((rs: Schedule[]) => {\r\n        return rs.filter((event) =>\r\n          isWithinInterval(new Date(today), {\r\n            start: startOfDay(new Date(event.timeStart)),\r\n            end: endOfDay(new Date(event.dueTime)),\r\n          })\r\n        );\r\n      })\r\n    );\r\n    this.eventsTomorrow$ = this.schedules$.pipe(\r\n      map((rs: Schedule[]) => {\r\n        return rs.filter((event) =>\r\n          isWithinInterval(new Date(tomorrow), {\r\n            start: startOfDay(new Date(event.timeStart)),\r\n            end: endOfDay(new Date(event.dueTime)),\r\n          })\r\n        );\r\n      })\r\n    );\r\n    this.eventsAfterTomorrow$ = this.schedules$.pipe(\r\n      map((rs: Schedule[]) => {\r\n        return rs.filter((event) =>\r\n          isWithinInterval(new Date(afterTomorrow), {\r\n            start: startOfDay(new Date(event.timeStart)),\r\n            end: endOfDay(new Date(event.dueTime)),\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "StoreFacade-1"
        },
        {
            "name": "StoreFacade",
            "id": "injectable-StoreFacade-9864aa0aee44d3543717beb26bd1c8dd-2",
            "file": "src/app/store/store-facades/todo.store-facade.ts",
            "properties": [
                {
                    "name": "filter",
                    "type": "FilterTodo",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pagination",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "addTodoValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "addTodoValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispatchCategory",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterTodo",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filter",
                            "type": "FilterTodo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "FilterTodo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValuePaginationAndFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "getValueTodoTablePage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 39
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { CategoryByUser, TodoAdd, TodoFilter } from '../actions/todo.action';\r\nimport { AppState } from '../app-state';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { getTodo } from '../selectors/todo.selector';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StoreFacade {\r\n  constructor(private store: Store<AppState>) {\r\n    this.getValuePaginationAndFilter();\r\n    this.dispatchCategory();\r\n  }\r\n  public filter: FilterTodo;\r\n  public pagination: Pagination;\r\n  //  Lấy giá trị khởi tạo từ store có hoặc không.\r\n  getValuePaginationAndFilter() {\r\n    this.store.select(getTodo).subscribe((todo) => {\r\n      this.filter = todo.filter;\r\n      this.pagination = todo.pagination;\r\n    });\r\n  }\r\n  dispatchCategory(userId: number = 1) {\r\n    this.store.dispatch(new CategoryByUser({ userId: userId }));\r\n  }\r\n  // thực hiện hành động push dữ liệu vào store từ action\r\n  filterTodo(pagination: Pagination, filter: FilterTodo) {\r\n    this.store.dispatch(new TodoFilter({ pagination, filter }));\r\n  }\r\n  // thực hiện hành động push dữ liệu vào store từ action\r\n  addTodo(todo: addTodoValue) {\r\n    this.store.dispatch(new TodoAdd({ todo }));\r\n  }\r\n  // get value from store\r\n  getValueTodoTablePage() {\r\n    return this.store.select(getTodo);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "StoreFacade-2"
        },
        {
            "name": "TodoEffect",
            "id": "injectable-TodoEffect-50936cb44d07754aad9701bf4ae45d41",
            "file": "src/app/store/effects/todo.effect.ts",
            "properties": [
                {
                    "name": "addTodo$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.ADD),\r\n      mergeMap((action: TodoAdd) =>\r\n        this.todoService.addTodo(action.payload.todo).pipe(\r\n          map(() => new TodoAddSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoAddFail({\r\n                message: MessageConstants.TODO_ADD_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "deleteTodo$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.DELETE),\r\n      mergeMap((id: number) =>\r\n        this.todoService.deleteTodo(id).pipe(\r\n          map(() => new TodoDeleteSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoDeleteFail({\r\n                message: MessageConstants.TODO_DELETE_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "getAllCategoryByUser",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.LOAD_CATEGORY),\r\n      mergeMap((id: number) =>\r\n        this.todoService\r\n          .getAllCategoryByUser(id)\r\n          .pipe(map(\r\n              (res: Category[]) =>\r\n                new CategoryByUserSuccess({\r\n                 listCategory : res\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new TodoFilterFail({\r\n                  message: MessageConstants.TODO_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "getAllTodo$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.Filter),\r\n      mergeMap((action: TodoFilter) =>\r\n        this.todoService\r\n          .getAllTodo(action.payload.pagination, action.payload.filter)\r\n          .pipe(map(\r\n              (res: Page<Todo>) =>\r\n                new TodoFilterSuccess({\r\n                  todos: res.data,\r\n                  pagination: {\r\n                    page: res.page,\r\n                    pageSize: res.pageSize,\r\n                    total: res.total,\r\n                  },\r\n                  filter : action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new TodoFilterFail({\r\n                  message: MessageConstants.TODO_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "updateTodo$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.UPDATE),\r\n      mergeMap((action: Todo) =>\r\n        this.todoService.updateTodo(action).pipe(\r\n          map(() => new TodoUpdateSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoUpdateFail({\r\n                message: MessageConstants.TODO_UPDATE_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, mergeMap, map } from 'rxjs/operators';\r\nimport { MessageConstants } from '../../shared/constants/message.contants';\r\nimport { of } from 'rxjs';\r\nimport {\r\n  CategoryByUser,\r\n  CategoryByUserSuccess,\r\n  ETodo,\r\n  TodoAdd,\r\n  TodoAddFail,\r\n  TodoAddSuccess,\r\n  TodoDeleteFail,\r\n  TodoDeleteSuccess,\r\n  TodoFilter,\r\n  TodoFilterFail,\r\n  TodoFilterSuccess,\r\n  TodoUpdateFail,\r\n  TodoUpdateSuccess,\r\n} from '../actions/todo.action';\r\nimport { TodoService } from '../services/todo.service';\r\nimport { Todo } from '../models/todo.i';\r\nimport { Page } from '../models/page.i';\r\nimport { Category } from '../models/category.i';\r\n\r\n@Injectable()\r\nexport class TodoEffect {\r\n  constructor(private actions$: Actions, private todoService: TodoService) {}\r\n\r\n  getAllTodo$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.Filter),\r\n      mergeMap((action: TodoFilter) =>\r\n        this.todoService\r\n          .getAllTodo(action.payload.pagination, action.payload.filter)\r\n          .pipe(map(\r\n              (res: Page<Todo>) =>\r\n                new TodoFilterSuccess({\r\n                  todos: res.data,\r\n                  pagination: {\r\n                    page: res.page,\r\n                    pageSize: res.pageSize,\r\n                    total: res.total,\r\n                  },\r\n                  filter : action.payload.filter,\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new TodoFilterFail({\r\n                  message: MessageConstants.TODO_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n  addTodo$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.ADD),\r\n      mergeMap((action: TodoAdd) =>\r\n        this.todoService.addTodo(action.payload.todo).pipe(\r\n          map(() => new TodoAddSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoAddFail({\r\n                message: MessageConstants.TODO_ADD_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  updateTodo$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.UPDATE),\r\n      mergeMap((action: Todo) =>\r\n        this.todoService.updateTodo(action).pipe(\r\n          map(() => new TodoUpdateSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoUpdateFail({\r\n                message: MessageConstants.TODO_UPDATE_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  deleteTodo$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.DELETE),\r\n      mergeMap((id: number) =>\r\n        this.todoService.deleteTodo(id).pipe(\r\n          map(() => new TodoDeleteSuccess()),\r\n          catchError((error) =>\r\n            of(\r\n              new TodoDeleteFail({\r\n                message: MessageConstants.TODO_DELETE_FAIL,\r\n              })\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n  getAllCategoryByUser = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ETodo.LOAD_CATEGORY),\r\n      mergeMap((id: number) =>\r\n        this.todoService\r\n          .getAllCategoryByUser(id)\r\n          .pipe(map(\r\n              (res: Category[]) =>\r\n                new CategoryByUserSuccess({\r\n                 listCategory : res\r\n                })\r\n            ),\r\n            catchError((error) =>\r\n              of(\r\n                new TodoFilterFail({\r\n                  message: MessageConstants.TODO_FILTER_FAIL,\r\n                })\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoService",
            "id": "injectable-TodoService-da4645671c04adc82f1e824f86e208f9",
            "file": "src/app/store/services/todo.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "addTodoValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "addTodoValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCategoryByUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTodo",
                    "args": [
                        {
                            "name": "pagination",
                            "type": "Pagination"
                        },
                        {
                            "name": "filters",
                            "type": "FilterTodo"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<Todo>>",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "pagination",
                            "type": "Pagination",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filters",
                            "type": "FilterTodo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDetailTodo",
                    "args": [
                        {
                            "name": "todoId",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TodoDetail>",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "todoId",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Page } from '../models/page.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\nimport { TodoDetail } from '../models/detail-todo';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TodoService {\r\n  constructor(private http: HttpClient) {}\r\n  public getAllTodo(\r\n    pagination: Pagination,\r\n    filters: FilterTodo\r\n  ): Observable<Page<Todo>> {\r\n    const page = pagination ? pagination.page : 1;\r\n    const pageSize = pagination ? pagination.pageSize : 10;\r\n    const {\r\n      textSearch = '',\r\n      fromDate = '',\r\n      toDate = '',\r\n      importance = '',\r\n      status = '',\r\n      sort,\r\n      category=[],\r\n    } = filters || {};\r\n    const httpFilter = {};\r\n    if(importance !=\"\"){\r\n      httpFilter['importance']=importance;\r\n    }\r\n    if(category.length > 0){\r\n      httpFilter['todoCategoryId']=category;\r\n    }\r\n    if(status !=\"\"){\r\n      httpFilter['status'] = status;\r\n    }\r\n    if (textSearch !== '') {\r\n      httpFilter['search'] = textSearch;\r\n    }\r\n    if (fromDate !== '') {\r\n      httpFilter['dateFrom'] = fromDate;\r\n    }\r\n    if (toDate !== '') {\r\n      httpFilter['dateTo'] = toDate;\r\n    }\r\n    if (sort != [] && sort != undefined) {\r\n      sort.forEach((e) => {\r\n        if (e.sort != 'none')\r\n          if (e.name !== null) {\r\n            httpFilter['sortName'] = e.name;\r\n            httpFilter['sortBy'] = e.sort;\r\n          }\r\n      });\r\n    }\r\n    const params = new HttpParams({\r\n      fromObject: {\r\n        ...httpFilter,\r\n        pageSize: String(pageSize),\r\n        page: String(page),\r\n      },\r\n    });\r\n    return this.http.get<Page<Todo>>(environment.urlTodo, { params : params});\r\n  }\r\n  addTodo(todo: addTodoValue) :Observable<void>{\r\n    return this.http.post<void>(environment.urlTodo, todo);\r\n  }\r\n  updateTodo(todo: Todo) {\r\n    return of();\r\n  }\r\n  deleteTodo(id: number) {\r\n    return of();\r\n  }\r\n  getAllCategoryByUser(userId : number):Observable<Category[]>{\r\n    return this.http.get<Category[]>(environment.urlCategory);\r\n  }\r\n\r\n  getDetailTodo(todoId : number) : Observable<TodoDetail>{\r\n    return this.http.get<TodoDetail>(environment.urlDetailTodo+ `/${todoId}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UploaderService",
            "id": "injectable-UploaderService-effabc90e4f9f96f97256b882726ab8e",
            "file": "src/app/shared/components/list-excel/list-excel.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getEventMessage",
                    "args": [
                        {
                            "name": "event",
                            "type": "HttpEvent<any>"
                        },
                        {
                            "name": "file",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "description": "<p>Return distinct message for sent, upload progress, &amp; response events </p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "HttpEvent<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "file",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "(error: any) => any",
                    "typeParameters": [],
                    "line": 76,
                    "description": "<p>Returns a function that handles Http upload failures.</p>\n",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2455,
                                "end": 2459,
                                "flags": 0,
                                "escapedText": "file"
                            },
                            "type": "File",
                            "tagName": {
                                "pos": 2449,
                                "end": 2454,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>File object for file being uploaded</li>\n</ul>\n<p>When no <code>UploadInterceptor</code> and no server,\nyou&#39;ll end up here in the error handler.</p>\n"
                        }
                    ]
                },
                {
                    "name": "showProgress",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "upload",
                    "args": [
                        {
                            "name": "file",
                            "type": "File"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient, HttpEvent, HttpEventType, HttpProgressEvent,\r\n  HttpRequest, HttpResponse, HttpErrorResponse\r\n} from '@angular/common/http';\r\n\r\nimport { of } from 'rxjs';\r\nimport { catchError, last, map, tap } from 'rxjs/operators';\r\n\r\n// import { MessageService } from '../message.service';\r\n\r\n@Injectable()\r\nexport class UploaderService {\r\n  constructor( private http: HttpClient) {}\r\n\r\n  // If uploading multiple files, change to:\r\n  // upload(files: FileList) {\r\n  //   const formData = new FormData();\r\n  //   files.forEach(f => formData.append(f.name, f));\r\n  //   new HttpRequest('POST', '/upload/file', formData, {reportProgress: true});\r\n  //   ...\r\n  // }\r\n\r\n  upload(file: File) {\r\n    if (!file) { return of<string>(); }\r\n\r\n    // COULD HAVE WRITTEN:\r\n    // return this.http.post('/upload/file', file, {\r\n    //   reportProgress: true,\r\n    //   observe: 'events'\r\n    // }).pipe(\r\n\r\n    // Create the request object that POSTs the file to an upload endpoint.\r\n    // The `reportProgress` option tells HttpClient to listen and return\r\n    // XHR progress events.\r\n    const req = new HttpRequest('POST', 'http://192.168.4.29:8080/api/exceltemplate', file, {\r\n      reportProgress: true\r\n    });\r\n\r\n    // The `HttpClient.request` API produces a raw event stream\r\n    // which includes start (sent), progress, and response events.\r\n    return this.http.request(req).pipe(\r\n      map(event => this.getEventMessage(event, file)),\r\n      tap(message => this.showProgress(message)),\r\n      last(), // return last (completed) message to caller\r\n      catchError(this.handleError(file))\r\n    );\r\n  }\r\n\r\n  /** Return distinct message for sent, upload progress, & response events */\r\n  private getEventMessage(event: HttpEvent<any>, file: File) {\r\n    switch (event.type) {\r\n      case HttpEventType.Sent:\r\n        return `Uploading file \"${file.name}\" of size ${file.size}.`;\r\n\r\n      case HttpEventType.UploadProgress:\r\n        // Compute and show the % done:\r\n        const percentDone = Math.round(100 * event.loaded / event.total);\r\n        return `File \"${file.name}\" is ${percentDone}% uploaded.`;\r\n\r\n      case HttpEventType.Response:\r\n        return `File \"${file.name}\" was completely uploaded!`;\r\n\r\n      default:\r\n        return `File \"${file.name}\" surprising upload event: ${event.type}.`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a function that handles Http upload failures.\r\n   * @param file - File object for file being uploaded\r\n   *\r\n   * When no `UploadInterceptor` and no server,\r\n   * you'll end up here in the error handler.\r\n   */\r\n  private handleError(file: File) {\r\n    const userMessage = `${file.name} upload failed.`;\r\n\r\n    return (error: HttpErrorResponse) => {\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      const message = (error.error instanceof Error) ?\r\n        error.error.message :\r\n       `server returned code ${error.status} with body \"${error.error}\"`;\r\n\r\n    //   this.messenger.add(`${userMessage} ${message}`);\r\n\r\n      // Let app keep running but indicate failure.\r\n      return of(userMessage);\r\n    };\r\n  }\r\n\r\n  private showProgress(message: string) {\r\n    // this.messenger.add(message);\r\n  }\r\n}\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-1fdb24d5c0941a71bd16637aa3041f28",
            "file": "src/app/store/services/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getAllUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<User[]>",
                    "typeParameters": [],
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../environments/environment';\r\nimport { User } from '../models/login.i';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  constructor(private http: HttpClient) {}\r\n  public getAllUser(): Observable<User[]> {\r\n    return this.http.get<User[]>(environment.urlUser);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddHeaderInterceptor",
            "id": "class-AddHeaderInterceptor-72eb603dd4485816f8734fd3fc99fc30",
            "file": "src/app/modules/login-page/token.interceptor.ts",
            "type": "class",
            "sourceCode": "import {\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpHandler,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport class AddHeaderInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    // Clone the request to add the new header\r\n    const clonedRequest = req.clone({\r\n      headers: req.headers.set(\r\n        'Authorization',\r\n        `Bearer ${localStorage.getItem('token')}`\r\n      ),\r\n    });\r\n\r\n    // Pass the cloned request instead of the original request to the next handle\r\n    return next.handle(clonedRequest);\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>"
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpInterceptor"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CalendarEventModel",
            "id": "class-CalendarEventModel-d5d41385ccaf35835741844ff5cb6d04",
            "file": "src/app/store/models/event.model.ts",
            "type": "class",
            "sourceCode": "import { CalendarEventAction } from 'angular-calendar';\r\nimport { startOfDay, endOfDay } from 'date-fns';\r\n\r\nexport class CalendarEventModel {\r\n  start: Date;\r\n  end?: Date;\r\n  title: string;\r\n  color: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n  actions?: CalendarEventAction[];\r\n  allDay?: boolean;\r\n  cssClass?: string;\r\n  resizable?: {\r\n    beforeStart?: boolean;\r\n    afterEnd?: boolean;\r\n  };\r\n  draggable?: boolean;\r\n  meta?: {\r\n    location: string;\r\n    notes: string;\r\n  };\r\n\r\n  /**\r\n   * Constructor\r\n   *\r\n   * @param data\r\n   */\r\n  constructor(data?) {\r\n    data = data || {};\r\n    this.start = new Date(data.start) || startOfDay(new Date());\r\n    this.end = new Date(data.end) || endOfDay(new Date());\r\n    this.title = data.title || '';\r\n    this.color = {\r\n      primary: (data.color && data.color.primary) || '#1e90ff',\r\n      secondary: (data.color && data.color.secondary) || '#D1E8FF',\r\n    };\r\n    this.draggable = data.draggable;\r\n    this.resizable = {\r\n      beforeStart: (data.resizable && data.resizable.beforeStart) || true,\r\n      afterEnd: (data.resizable && data.resizable.afterEnd) || true,\r\n    };\r\n    this.actions = data.actions || [];\r\n    this.allDay = data.allDay || false;\r\n    this.cssClass = data.cssClass || '';\r\n    this.meta = {\r\n      location: (data.meta && data.meta.location) || '',\r\n      notes: (data.meta && data.meta.notes) || '',\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor</p>\n",
                "args": [
                    {
                        "name": "data",
                        "type": "",
                        "optional": true
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 542,
                            "end": 546,
                            "flags": 0,
                            "escapedText": "data"
                        },
                        "type": "",
                        "optional": true,
                        "tagName": {
                            "pos": 536,
                            "end": 541,
                            "flags": 0,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "properties": [
                {
                    "name": "actions",
                    "type": "CalendarEventAction[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "allDay",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "color",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cssClass",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "draggable",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "end",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "meta",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "resizable",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "start",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CalendarFakeDb",
            "id": "class-CalendarFakeDb-99c7cfe46f59443e2809208278475440",
            "file": "src/app/shared/components/calendar/calendar.fakeDB.ts",
            "type": "class",
            "sourceCode": "import {\r\n  startOfDay,\r\n  endOfDay,\r\n  subDays,\r\n  addDays,\r\n  endOfMonth,\r\n  isSameDay,\r\n  isSameMonth,\r\n  addHours,\r\n} from 'date-fns';\r\n\r\nexport class CalendarFakeDb {\r\n  public static data = [\r\n    {\r\n      id: 'events',\r\n      data: [\r\n        {\r\n          start: subDays(startOfDay(new Date()), 1),\r\n          end: addDays(new Date(), 1),\r\n          title: 'A 3 day event',\r\n          allDay: true,\r\n          color: {\r\n            primary: '#F44336',\r\n            secondary: '#FFCDD2',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: startOfDay(new Date()),\r\n          title: 'An event with no end date',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#FF9800',\r\n            secondary: '#FFE0B2',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: subDays(endOfMonth(new Date()), 3),\r\n          end: addDays(endOfMonth(new Date()), 3),\r\n          title: 'A long event that spans 2 months',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#1E90FF',\r\n            secondary: '#D1E8FF',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: addHours(startOfDay(new Date()), 2),\r\n          end: new Date(),\r\n          title: 'A draggable and resizable event',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#673AB7',\r\n            secondary: '#D1C4E9',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "[\r\n    {\r\n      id: 'events',\r\n      data: [\r\n        {\r\n          start: subDays(startOfDay(new Date()), 1),\r\n          end: addDays(new Date(), 1),\r\n          title: 'A 3 day event',\r\n          allDay: true,\r\n          color: {\r\n            primary: '#F44336',\r\n            secondary: '#FFCDD2',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: startOfDay(new Date()),\r\n          title: 'An event with no end date',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#FF9800',\r\n            secondary: '#FFE0B2',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: subDays(endOfMonth(new Date()), 3),\r\n          end: addDays(endOfMonth(new Date()), 3),\r\n          title: 'A long event that spans 2 months',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#1E90FF',\r\n            secondary: '#D1E8FF',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n        {\r\n          start: addHours(startOfDay(new Date()), 2),\r\n          end: new Date(),\r\n          title: 'A draggable and resizable event',\r\n          allDay: false,\r\n          color: {\r\n            primary: '#673AB7',\r\n            secondary: '#D1C4E9',\r\n          },\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n          draggable: true,\r\n          meta: {\r\n            location: 'Los Angeles',\r\n            notes:\r\n              'Eos eu verear adipiscing, ex ornatus denique iracundia sed, quodsi oportere appellantur an pri.',\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CategoryByUser",
            "id": "class-CategoryByUser-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.LOAD_CATEGORY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CategoryByUserFail",
            "id": "class-CategoryByUserFail-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 105,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.LOAD_CATEGORY_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CategoryByUserSuccess",
            "id": "class-CategoryByUserSuccess-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.LOAD_CATEGORY_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CheckEquipment",
            "id": "class-CheckEquipment-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 190,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 191,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.CHECK_EQUIPMENT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 190,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CheckEquipmentFail",
            "id": "class-CheckEquipmentFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 198,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 199,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.CHECK_EQUIPMENT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 198,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CheckEquipmentSuccess",
            "id": "class-CheckEquipmentSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 194,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 195,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.CHECK_EQUIPMENT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 194,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CountNotification",
            "id": "class-CountNotification-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 169,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.COUNT_NOTIFICATIONS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CountNotificationFail",
            "id": "class-CountNotificationFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 177,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 178,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.COUNT_NOTIFICATIONS_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 177,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CountNotificationSuccess",
            "id": "class-CountNotificationSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 173,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 174,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.COUNT_NOTIFICATIONS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Equipment",
            "id": "class-Equipment-d44e4ca0c257e71d67cc71aeb47cbff7",
            "file": "src/app/store/models/add-schedule.i.ts",
            "type": "class",
            "sourceCode": "export interface AddSchedule {\r\n  title: string;\r\n  description: string;\r\n  timeStart?: Date;\r\n  dueDate?: Date;\r\n  timeStartRepeat?: string;\r\n  timeDueRepeat?: string;\r\n  important?: string;\r\n  place: string;\r\n  userIds: number[];\r\n  equipmentName?: Equipment[];\r\n  scheduleCategoryId?: number;\r\n  createBy?: number;\r\n  typeRepeat: string;\r\n  valueRepeat?: string;\r\n  scheduleId?: number;\r\n  isDelete?: boolean;\r\n  created?: Date;\r\n  modified?: Date;\r\n}\r\n\r\nexport class Equipment {\r\n  equipmentId: number;\r\n  timeStart?: Date;\r\n  timeDue?: Date;\r\n}\r\nexport interface CheckFreeTimeParams {\r\n  startTime: Date;\r\n  dueTime: Date;\r\n  equipmentId: number[];\r\n}\r\n\r\nexport interface CheckFreeTimeResponse {\r\n  count: number,\r\n  records:RecordsCheckTime[];\r\n}\r\nexport interface RecordsCheckTime {\r\n  equipment_id: number;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "equipmentId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "timeDue",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "timeStart",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LogoutAction",
            "id": "class-LogoutAction-25399a2c1b9822cc609ea5f3a2990e7d",
            "file": "src/app/store/actions/login.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nexport enum ELogin {\r\n  LOGOUT = '[App] logout',\r\n}\r\n\r\nexport class LogoutAction implements Action {\r\n  readonly type = ELogin.LOGOUT;\r\n}\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ELogin.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationAdd",
            "id": "class-NotificationAdd-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ENotification.ADD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : Add</p>\n",
            "rawdescription": "Action : Add",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationAddFail",
            "id": "class-NotificationAddFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.ADD_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationAddSuccess",
            "id": "class-NotificationAddSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.ADD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationDelete",
            "id": "class-NotificationDelete-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ENotification.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : DELETE</p>\n",
            "rawdescription": "Action : DELETE",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationDeleteFail",
            "id": "class-NotificationDeleteFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 112,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.DELETE_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationDeleteSuccess",
            "id": "class-NotificationDeleteSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.DELETE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterEvent",
            "id": "class-NotificationFilterEvent-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_EVENT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : FILTER EVENT</p>\n",
            "rawdescription": "Action : FILTER EVENT",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterEventFail",
            "id": "class-NotificationFilterEventFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 148,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_EVENT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterEventSuccess",
            "id": "class-NotificationFilterEventSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 145,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_EVENT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterStatus",
            "id": "class-NotificationFilterStatus-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 120,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_STATUS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : FILTER STATUS</p>\n",
            "rawdescription": "Action : FILTER STATUS",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterStatusFail",
            "id": "class-NotificationFilterStatusFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 130,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_STATUS_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationFilterStatusSuccess",
            "id": "class-NotificationFilterStatusSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 126,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.FILTER_STATUS_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationGetEvent",
            "id": "class-NotificationGetEvent-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.GET_EVENT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : GET EVENT</p>\n",
            "rawdescription": "Action : GET EVENT",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationGetEventFail",
            "id": "class-NotificationGetEventFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 164,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.GET_EVENT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 164,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationGetEventSuccess",
            "id": "class-NotificationGetEventSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 160,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.GET_EVENT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationLoadAll",
            "id": "class-NotificationLoadAll-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.LOAD_ALL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action : GetAll</p>\n",
            "rawdescription": "Action : GetAll",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationLoadAllFail",
            "id": "class-NotificationLoadAllFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.LOAD_ALL_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationLoadAllSuccess",
            "id": "class-NotificationLoadAllSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.LOAD_ALL_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationLoading",
            "id": "class-NotificationLoading-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ENotification.LOADING",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationUpdate",
            "id": "class-NotificationUpdate-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ENotification.UPDATE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>Action :Update</p>\n",
            "rawdescription": "Action :Update",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationUpdateFail",
            "id": "class-NotificationUpdateFail-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.UPDATE_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "NotificationUpdateSuccess",
            "id": "class-NotificationUpdateSuccess-b29d86984e0010b42d32d8937963dbff",
            "file": "src/app/store/actions/notification.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { FilterNotification } from '../models/notificaiton-filter.i';\r\nimport { Notification } from '../models/notification.i';\r\nimport { StatusNotification } from '../models/status-notification.e';\r\nimport { EventNotification } from './../models/event-notification.i';\r\nimport { NotificationData } from './../models/notification.i';\r\nimport { Pagination } from './../models/pagination.i';\r\nexport enum ENotification {\r\n  LOADING = '[Notification] Loading',\r\n  LOAD_SUCCESS = '[Notification] load success',\r\n  LOAD_FAIL = '[Notification] load fail',\r\n\r\n  ADD = '[Notification] Adding',\r\n  ADD_SUCCESS = '[Notification] add success',\r\n  ADD_FAIL = '[Notification] add fail',\r\n\r\n  UPDATE = '[Notification] Updating',\r\n  UPDATE_SUCCESS = '[Notification] update success',\r\n  UPDATE_FAIL = '[Notification] update fail',\r\n\r\n  DELETE = '[Notification] Deleting',\r\n  DELETE_SUCCESS = '[Notification] delete success',\r\n  DELETE_FAIL = '[Notification] delete fail',\r\n\r\n  LOAD_ALL = '[Notification] Loading All',\r\n  LOAD_ALL_SUCCESS = '[Notification] load all success',\r\n  LOAD_ALL_FAIL = '[Notification] load all fail',\r\n\r\n  FILTER_STATUS = '[Notification] Filter Status Notification',\r\n  FILTER_STATUS_SUCCESS = '[Notification] Filter status notification success',\r\n  FILTER_STATUS_FAIL = '[Notification] Filter status notification fail',\r\n\r\n  FILTER_EVENT = '[Notification] Filter Event Notification',\r\n  FILTER_EVENT_SUCCESS = '[Notification] Filter event notification success',\r\n  FILTER_EVENT_FAIL = '[Notification] Filter event notification fail',\r\n\r\n  GET_EVENT = '[Notification] Get All Event',\r\n  GET_EVENT_SUCCESS = '[NOTIFICATION] Get Event notification success',\r\n  GET_EVENT_FAIL = '[NOTIFICATION] Get Event notification fail',\r\n\r\n  COUNT_NOTIFICATIONS = '[Notification] Count notification ',\r\n  COUNT_NOTIFICATIONS_SUCCESS = '[Notification] Count notification  success',\r\n  COUNT_NOTIFICATIONS_FAIL = '[Notification] Count notification  fail',\r\n}\r\n\r\nexport class NotificationLoading implements Action {\r\n  public readonly type = ENotification.LOADING;\r\n}\r\n\r\n/**\r\n * Action : Add\r\n */\r\nexport class NotificationAdd implements Action {\r\n  public readonly type = ENotification.ADD;\r\n}\r\nexport class NotificationAddSuccess implements Action {\r\n  public readonly type = ENotification.ADD_SUCCESS;\r\n  constructor(public payload: { notification: Notification }) {}\r\n}\r\nexport class NotificationAddFail implements Action {\r\n  public readonly type = ENotification.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GetAll\r\n */\r\nexport class NotificationLoadAll implements Action {\r\n  public readonly type = ENotification.LOAD_ALL;\r\n  constructor(\r\n    public payload: { pagination: Pagination; filter: FilterNotification }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllSuccess implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_SUCCESS;\r\n  constructor(\r\n    public payload: {\r\n      notifications: NotificationData;\r\n      filter: FilterNotification;\r\n    }\r\n  ) {}\r\n}\r\nexport class NotificationLoadAllFail implements Action {\r\n  public readonly type = ENotification.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action :Update\r\n */\r\nexport class NotificationUpdate implements Action {\r\n  public readonly type = ENotification.UPDATE;\r\n}\r\nexport class NotificationUpdateSuccess implements Action {\r\n  public readonly type = ENotification.UPDATE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationUpdateFail implements Action {\r\n  public readonly type = ENotification.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n/**\r\n * Action : DELETE\r\n */\r\nexport class NotificationDelete implements Action {\r\n  public readonly type = ENotification.DELETE;\r\n}\r\nexport class NotificationDeleteSuccess implements Action {\r\n  public readonly type = ENotification.DELETE_SUCCESS;\r\n  constructor(public payload: { currentNotification: Notification }) {}\r\n}\r\nexport class NotificationDeleteFail implements Action {\r\n  public readonly type = ENotification.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER STATUS\r\n */\r\nexport class NotificationFilterStatus implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS;\r\n  constructor(\r\n    public payload: { pagination: Pagination; status: StatusNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterStatusSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterStatusFail implements Action {\r\n  public readonly type = ENotification.FILTER_STATUS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : FILTER EVENT\r\n */\r\nexport class NotificationFilterEvent implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT;\r\n  constructor(\r\n    public payload: { pagination: Pagination; event: EventNotification }\r\n  ) {}\r\n}\r\nexport class NotificationFilterEventSuccess implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_SUCCESS;\r\n  constructor(public payload: { notifications: NotificationData }) {}\r\n}\r\nexport class NotificationFilterEventFail implements Action {\r\n  public readonly type = ENotification.FILTER_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * Action : GET EVENT\r\n */\r\nexport class NotificationGetEvent implements Action {\r\n  public readonly type = ENotification.GET_EVENT;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class NotificationGetEventSuccess implements Action {\r\n  public readonly type = ENotification.GET_EVENT_SUCCESS;\r\n  constructor(public payload: { event: EventNotification[] }) {}\r\n}\r\nexport class NotificationGetEventFail implements Action {\r\n  public readonly type = ENotification.GET_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Count\r\nexport class CountNotification implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS;\r\n  constructor(public payload: {}) {}\r\n}\r\nexport class CountNotificationSuccess implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_SUCCESS;\r\n  constructor(public payload: { total: number }) {}\r\n}\r\nexport class CountNotificationFail implements Action {\r\n  public readonly type = ENotification.COUNT_NOTIFICATIONS_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type NotificationAction =\r\n  | NotificationAdd\r\n  | NotificationAddSuccess\r\n  | NotificationAddFail\r\n  | NotificationLoadAll\r\n  | NotificationLoadAllSuccess\r\n  | NotificationLoadAllFail\r\n  | NotificationUpdate\r\n  | NotificationUpdateSuccess\r\n  | NotificationUpdateFail\r\n  | NotificationDelete\r\n  | NotificationDeleteSuccess\r\n  | NotificationAddFail\r\n  | NotificationFilterEvent\r\n  | NotificationFilterEventSuccess\r\n  | NotificationFilterEventFail\r\n  | NotificationFilterStatus\r\n  | NotificationFilterStatusFail\r\n  | NotificationFilterStatusSuccess\r\n  | NotificationGetEvent\r\n  | NotificationGetEventSuccess\r\n  | NotificationGetEventFail\r\n  | CountNotification\r\n  | CountNotificationSuccess\r\n  | CountNotificationFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 94,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ENotification.UPDATE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "PollRecord",
            "id": "class-PollRecord-53eabe0f0b73b57868860c42bf1e5af1",
            "file": "src/app/store/models/pollList.ts",
            "type": "class",
            "sourceCode": "export class PollRecord{\r\n    id: string;\r\n    stt: string;\r\n    question: string;\r\n    expiration: string;\r\n    status: string;\r\n    create_by: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "create_by",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "expiration",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "question",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "status",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "stt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ScheduleAdd",
            "id": "class-ScheduleAdd-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 176,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 177,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.ADD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 176,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleAddFail",
            "id": "class-ScheduleAddFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 184,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 185,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.ADD_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 184,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleAddSuccess",
            "id": "class-ScheduleAddSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 180
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ESchedule.ADD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 180,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleCategoryLoadAll",
            "id": "class-ScheduleCategoryLoadAll-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_CATEGORY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>GET ALL CATEGORY SCHEDULE</p>\n",
            "rawdescription": "GET ALL CATEGORY SCHEDULE",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleCategoryLoadAllFail",
            "id": "class-ScheduleCategoryLoadAllFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 157,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 158,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_CATEGORY_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleCategoryLoadAllSuccess",
            "id": "class-ScheduleCategoryLoadAllSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_CATEGORY_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleDeleteEvent",
            "id": "class-ScheduleDeleteEvent-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 116,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.DELETE_EVENT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "description": "<p>DELETE Action</p>\n",
            "rawdescription": "DELETE Action",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleDeleteEventFail",
            "id": "class-ScheduleDeleteEventFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 124,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.DELETE_EVENT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleDeleteEventSuccess",
            "id": "class-ScheduleDeleteEventSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 120,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.DELETE_EVENT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilter",
            "id": "class-ScheduleFilter-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 204,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 205,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilterByCategory",
            "id": "class-ScheduleFilterByCategory-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 162,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 163,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER_BY_CATEGORY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilterByCategoryFail",
            "id": "class-ScheduleFilterByCategoryFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 171,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 172,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER_BY_CATEGORY_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilterByCategorySuccess",
            "id": "class-ScheduleFilterByCategorySuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 167,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER_BY_CATEGORY_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilterFail",
            "id": "class-ScheduleFilterFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 214,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 215,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 214,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleFilterSuccess",
            "id": "class-ScheduleFilterSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 209,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.FILTER_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadAll",
            "id": "class-ScheduleLoadAll-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_ALL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadAllFail",
            "id": "class-ScheduleLoadAllFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_ALL_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadAllSuccess",
            "id": "class-ScheduleLoadAllSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_ALL_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsAfterTomorrow",
            "id": "class-ScheduleLoadEventsAfterTomorrow-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule"
                    }
                ],
                "line": 99,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_AFTER_TOMORROW",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsAfterTomorrowFail",
            "id": "class-ScheduleLoadEventsAfterTomorrowFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 107,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsAfterTomorrowSuccess",
            "id": "class-ScheduleLoadEventsAfterTomorrowSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 103,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsToday",
            "id": "class-ScheduleLoadEventsToday-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule"
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TODAY",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsTodayFail",
            "id": "class-ScheduleLoadEventsTodayFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TODAY_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsTodaySuccess",
            "id": "class-ScheduleLoadEventsTodaySuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TODAY_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsTomorrow",
            "id": "class-ScheduleLoadEventsTomorrow-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule"
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "FilterSchedule",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TOMORROW",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsTomorrowFail",
            "id": "class-ScheduleLoadEventsTomorrowFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TOMORROW_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleLoadEventsTomorrowSuccess",
            "id": "class-ScheduleLoadEventsTomorrowSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleUndoDeleteEvent",
            "id": "class-ScheduleUndoDeleteEvent-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 129,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.UNDO_DELETE_EVENT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleUndoDeleteEventFail",
            "id": "class-ScheduleUndoDeleteEventFail-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 141,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 142,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.UNDO_DELETE_EVENT_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ScheduleUndoDeleteEventSuccess",
            "id": "class-ScheduleUndoDeleteEventSuccess-7b00537fe550f3c98ce1db70da660443",
            "file": "src/app/store/actions/schedule.action.ts",
            "type": "class",
            "sourceCode": "import {\r\n  Schedule,\r\n  ScheduleData,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../models/schedule.i';\r\nimport { CalendarEventModel } from './../models/event.model';\r\nimport { Action } from '@ngrx/store';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n  CheckFreeTimeResponse,\r\n} from '../models/add-schedule.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nexport enum ESchedule {\r\n  LOAD_ALL = '[Schedule] Load all',\r\n  LOAD_ALL_SUCCESS = '[Schedule] Load all success',\r\n  LOAD_ALL_FAIL = '[Schedule] Load all fail',\r\n\r\n  LOAD_EVENTS_TODAY = '[Schedule] Load events today',\r\n  LOAD_EVENTS_TODAY_FAIL = '[Schedule] Load events today fail',\r\n  LOAD_EVENTS_TODAY_SUCCESS = '[Schedule] Load events today success',\r\n\r\n  LOAD_EVENTS_TOMORROW = '[Schedule] Load events tomorrow',\r\n  LOAD_EVENTS_TOMORROW_FAIL = '[Schedule] Load events tomorrow fail',\r\n  LOAD_EVENTS_TOMORROW_SUCCESS = '[Schedule] Load events tomorrow success',\r\n\r\n  LOAD_EVENTS_AFTER_TOMORROW = '[Schedule] Load events after tomorrow',\r\n  LOAD_EVENTS_AFTER_TOMORROW_FAIL = '[Schedule] Load events after tomorrow fail',\r\n  LOAD_EVENTS_AFTER_TOMORROW_SUCCESS = '[Schedule] Load events after tomorrow success',\r\n\r\n  DELETE_EVENT = '[Schedule] Delete event',\r\n  DELETE_EVENT_SUCCESS = '[Schedule] Delete event success',\r\n  DELETE_EVENT_FAIL = '[Schedule] Delete event fail',\r\n\r\n  UNDO_DELETE_EVENT = '[Schedule] Undo delete event',\r\n  UNDO_DELETE_EVENT_SUCCESS = '[Schedule] Undo delete event success',\r\n  UNDO_DELETE_EVENT_FAIL = '[Schedule] Undo delete event fail',\r\n\r\n  LOAD_CATEGORY = '[Schedule] Load all category schedule',\r\n  LOAD_CATEGORY_SUCCESS = '[Schedule] Load all category schedule success',\r\n  LOAD_CATEGORY_FAIL = '[Schedule] Load all category schedule fail',\r\n\r\n  FILTER_BY_CATEGORY = '[Schedule] Filter by category schedule',\r\n  FILTER_BY_CATEGORY_SUCCESS = '[Schedule] Filter by category schedule success',\r\n  FILTER_BY_CATEGORY_FAIL = '[Schedule] Filter by category schedule fail',\r\n  ADD = '[Schedule] Adding',\r\n  ADD_SUCCESS = '[Schedule] Add success',\r\n  ADD_FAIL = '[Schedule] Add fail',\r\n\r\n  CHECK_EQUIPMENT = '[Check_equipment] Checking',\r\n  CHECK_EQUIPMENT_SUCCESS = '[Check_equipment] Check success',\r\n  CHECK_EQUIPMENT_FAIL = '[Check_equipment] Check fail',\r\n\r\n  FILTER = '[Schedule] filtering schedule',\r\n  FILTER_SUCCESS = '[Schedule] filter schedule success',\r\n  FILTER_FAIL = '[Schedule] filter schedule fail',\r\n}\r\n\r\nexport class ScheduleLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\n\r\nexport class ScheduleLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_ALL_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleLoadEventsToday implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTodaySuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_SUCCESS;\r\n  constructor(public payload: { eventsToday: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTodayFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TODAY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrow implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW;\r\n  constructor(public payload: FilterSchedule) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_SUCCESS;\r\n  constructor(public payload: { eventsAfterTomorrow: Schedule[] }) {}\r\n}\r\nexport class ScheduleLoadEventsAfterTomorrowFail implements Action {\r\n  public readonly type = ESchedule.LOAD_EVENTS_AFTER_TOMORROW_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * DELETE Action\r\n */\r\n\r\nexport class ScheduleDeleteEvent implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_SUCCESS;\r\n  constructor(public payload: { delSchedule: Schedule }) {}\r\n}\r\nexport class ScheduleDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleUndoDeleteEvent implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventSuccess implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_SUCCESS;\r\n  constructor(\r\n    public payload: { delSchedule: Schedule; listRestoreSchedule: Schedule[] }\r\n  ) {}\r\n}\r\nexport class ScheduleUndoDeleteEventFail implements Action {\r\n  public readonly type = ESchedule.UNDO_DELETE_EVENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n/**\r\n * GET ALL CATEGORY SCHEDULE\r\n */\r\nexport class ScheduleCategoryLoadAll implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY;\r\n}\r\n\r\nexport class ScheduleCategoryLoadAllSuccess implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { categories: CategorySchedule[] }) {}\r\n}\r\nexport class ScheduleCategoryLoadAllFail implements Action {\r\n  public readonly type = ESchedule.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategory implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\n\r\nexport class ScheduleFilterByCategorySuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_SUCCESS;\r\n  constructor(public payload: { idsScheduleCategory: number[] }) {}\r\n}\r\nexport class ScheduleFilterByCategoryFail implements Action {\r\n  public readonly type = ESchedule.FILTER_BY_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Add Schedule\r\nexport class ScheduleAdd implements Action {\r\n  public readonly type = ESchedule.ADD;\r\n  constructor(public payload: { schedule: AddSchedule }) {}\r\n}\r\nexport class ScheduleAddSuccess implements Action {\r\n  public readonly type = ESchedule.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\nexport class ScheduleAddFail implements Action {\r\n  public readonly type = ESchedule.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Check Equipment\r\nexport class CheckEquipment implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT;\r\n  constructor(public payload: { equipment: CheckFreeTimeParams }) {}\r\n}\r\nexport class CheckEquipmentSuccess implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_SUCCESS;\r\n  constructor(public payload: { list: CheckFreeTimeResponse }) {}\r\n}\r\nexport class CheckEquipmentFail implements Action {\r\n  public readonly type = ESchedule.CHECK_EQUIPMENT_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter schedule -------------------------------------------\r\nexport class ScheduleFilter implements Action {\r\n  public readonly type = ESchedule.FILTER;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterSchedule }) {}\r\n}\r\n\r\nexport class ScheduleFilterSuccess implements Action {\r\n  public readonly type = ESchedule.FILTER_SUCCESS;\r\n  constructor(public payload: { schedules: Schedule[]; pagination: Pagination ;filter:FilterSchedule}) {}\r\n}\r\n\r\nexport class ScheduleFilterFail implements Action {\r\n  public readonly type = ESchedule.FILTER_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\nexport type ScheduleAction =\r\n  | ScheduleLoadAll\r\n  | ScheduleLoadAllSuccess\r\n  | ScheduleLoadAllFail\r\n  | ScheduleLoadEventsToday\r\n  | ScheduleLoadEventsTodayFail\r\n  | ScheduleLoadEventsTodaySuccess\r\n  | ScheduleLoadEventsTomorrow\r\n  | ScheduleLoadEventsTomorrowFail\r\n  | ScheduleLoadEventsTomorrowSuccess\r\n  | ScheduleLoadEventsAfterTomorrow\r\n  | ScheduleLoadEventsAfterTomorrowFail\r\n  | ScheduleLoadEventsAfterTomorrowSuccess\r\n  | ScheduleDeleteEvent\r\n  | ScheduleDeleteEventSuccess\r\n  | ScheduleDeleteEventFail\r\n  | ScheduleUndoDeleteEvent\r\n  | ScheduleUndoDeleteEventSuccess\r\n  | ScheduleUndoDeleteEventFail\r\n  | ScheduleCategoryLoadAll\r\n  | ScheduleCategoryLoadAllSuccess\r\n  | ScheduleCategoryLoadAllFail\r\n  | ScheduleFilterByCategory\r\n  | ScheduleFilterByCategorySuccess\r\n  | ScheduleFilterByCategoryFail\r\n  | ScheduleAdd\r\n  | ScheduleAddSuccess\r\n  | ScheduleAddFail\r\n  | CheckEquipment\r\n  | CheckEquipmentSuccess\r\n  | CheckEquipmentFail\r\n  | ScheduleFilter\r\n  | ScheduleFilterSuccess\r\n  | ScheduleFilterFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 135,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ESchedule.UNDO_DELETE_EVENT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoAdd",
            "id": "class-TodoAdd-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.ADD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoAddFail",
            "id": "class-TodoAddFail-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.ADD_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoAddSuccess",
            "id": "class-TodoAddSuccess-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ETodo.ADD_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoDelete",
            "id": "class-TodoDelete-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.DELETE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoDeleteFail",
            "id": "class-TodoDeleteFail-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.DELETE_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoDeleteSuccess",
            "id": "class-TodoDeleteSuccess-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 68
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ETodo.DELETE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoFilter",
            "id": "class-TodoFilter-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.Filter",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoFilterFail",
            "id": "class-TodoFilterFail-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.Filter_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoFilterSuccess",
            "id": "class-TodoFilterSuccess-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.Filter_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoUpdate",
            "id": "class-TodoUpdate-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.UPDATE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoUpdateFail",
            "id": "class-TodoUpdateFail-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ETodo.UPDATE_FAIL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "TodoUpdateSuccess",
            "id": "class-TodoUpdateSuccess-91ba7fa6913d08df513a359486717ceb",
            "file": "src/app/store/actions/todo.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { addTodoValue } from '../models/addtodo.i';\r\nimport { Category } from '../models/category.i';\r\nimport { Pagination } from '../models/pagination.i';\r\nimport { FilterTodo } from '../models/todo-filter.i';\r\nimport { Todo } from '../models/todo.i';\r\n\r\nexport enum ETodo {\r\n  ADD = '[TODO] adding',\r\n  ADD_SUCCESS = '[TODO] add success',\r\n  ADD_FAIL = '[TODO] add fail',\r\n\r\n  UPDATE = '[TODO] updating',\r\n  UPDATE_SUCCESS = '[TODO] update success',\r\n  UPDATE_FAIL = '[TODO] update fail',\r\n\r\n  DELETE = '[TODO] deleting',\r\n  DELETE_SUCCESS = '[TODO] delete success',\r\n  DELETE_FAIL = '[TODO] delete fail',\r\n\r\n  Filter = '[TODO] filtering todo',\r\n  Filter_SUCCESS = '[TODO] filter todo success',\r\n  Filter_FAIL = '[TODO] filter todo fail',\r\n\r\n  LOAD_CATEGORY = '[CATEGORY] loading category by user',\r\n  LOAD_CATEGORY_SUCCESS = '[CATEGORY] load category by user success',\r\n  LOAD_CATEGORY_FAIL = '[CATEGORY] load category by user fail',\r\n}\r\n// Add todo\r\nexport class TodoAdd implements Action {\r\n  public readonly type = ETodo.ADD;\r\n  constructor(public payload: { todo: addTodoValue }) {}\r\n}\r\nexport class TodoAddSuccess implements Action {\r\n  public readonly type = ETodo.ADD_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoAddFail implements Action {\r\n  public readonly type = ETodo.ADD_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n// Update todo\r\n\r\nexport class TodoUpdate implements Action {\r\n  public readonly type = ETodo.UPDATE;\r\n  constructor(public payload: { todo: Todo }) {}\r\n}\r\n\r\nexport class TodoUpdateSuccess implements Action {\r\n  public readonly type = ETodo.UPDATE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoUpdateFail implements Action {\r\n  public readonly type = ETodo.UPDATE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// Delete todo -------------------------------------------\r\n\r\nexport class TodoDelete implements Action {\r\n  public readonly type = ETodo.DELETE;\r\n  constructor(public payload: { id: number }) {}\r\n}\r\n\r\nexport class TodoDeleteSuccess implements Action {\r\n  public readonly type = ETodo.DELETE_SUCCESS;\r\n  constructor() {}\r\n}\r\n\r\nexport class TodoDeleteFail implements Action {\r\n  public readonly type = ETodo.DELETE_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// filter todo -------------------------------------------\r\nexport class TodoFilter implements Action {\r\n  public readonly type = ETodo.Filter;\r\n  constructor(public payload: { pagination: Pagination; filter: FilterTodo }) {}\r\n}\r\n\r\nexport class TodoFilterSuccess implements Action {\r\n  public readonly type = ETodo.Filter_SUCCESS;\r\n  constructor(public payload: { todos: Todo[]; pagination: Pagination ;filter:FilterTodo}) {}\r\n}\r\n\r\nexport class TodoFilterFail implements Action {\r\n  public readonly type = ETodo.Filter_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\n\r\n// category by user  -------------------------------------------\r\nexport class CategoryByUser implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY;\r\n  constructor(public payload: { userId: number }) {}\r\n}\r\n\r\nexport class CategoryByUserSuccess implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_SUCCESS;\r\n  constructor(public payload: { listCategory: Category[] }) {}\r\n}\r\n\r\nexport class CategoryByUserFail implements Action {\r\n  public readonly type = ETodo.LOAD_CATEGORY_FAIL;\r\n  constructor(public payload: { message: string }) {}\r\n}\r\nexport type TodoAction =\r\n  | TodoAdd\r\n  | TodoAddSuccess\r\n  | TodoAddFail\r\n  | TodoUpdate\r\n  | TodoUpdateFail\r\n  | TodoUpdateSuccess\r\n  | TodoDelete\r\n  | TodoDeleteFail\r\n  | TodoDeleteSuccess\r\n  | TodoFilter\r\n  | TodoFilterFail\r\n  | TodoFilterSuccess\r\n  | CategoryByUser\r\n  | CategoryByUserSuccess\r\n  | CategoryByUserFail;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 51
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ETodo.UPDATE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Vote",
            "id": "class-Vote-8ccff6cbe8f4f96a2ebadf937b5f155a",
            "file": "src/app/store/models/vote.ts",
            "type": "class",
            "sourceCode": "export class Vote{\r\n    name: string;\r\n    soluachon: number;\r\n}",
            "properties": [
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "soluachon",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "PaginationDirective",
            "id": "directive-PaginationDirective-1eb29bdefd5aa03fe6071a65307cde15",
            "file": "src/app/shared/components/mat-paginator-custom/pagination.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Directive,\r\n  Host,\r\n  HostListener,\r\n  Input,\r\n  Optional,\r\n  Renderer2,\r\n  Self,\r\n  ViewContainerRef,\r\n} from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatButton } from '@angular/material/button';\r\n\r\n@Directive({\r\n  selector: '[appPagination]',\r\n})\r\nexport class PaginationDirective implements AfterViewInit {\r\n  @Input('length') length: number;\r\n  @Input('pageSize') pageSize: number;\r\n  @Input('pageIndex') pageIndex: number;\r\n\r\n  private currentPage = 1;\r\n  private pageGapTxt2 = '..';\r\n  private pageGapTxt = '•••';\r\n  private rangeStart;\r\n  private rangeEnd;\r\n  private buttons = [];\r\n  private showTotalPages1 = 3;\r\n\r\n  constructor(\r\n    @Host() @Self() @Optional() private readonly matPag: MatPaginator,\r\n    private vr: ViewContainerRef,\r\n    private ren: Renderer2\r\n  ) {\r\n    this.matPag.page.subscribe((v) => {\r\n      this.currentPage = v.pageIndex;\r\n      this.matPag.pageIndex = v.pageIndex;\r\n      this.initPageRange();\r\n    });\r\n  }\r\n\r\n  @HostListener('change') ngOnChanges() {\r\n    this.matPag.page.next({\r\n      length: this.length,\r\n      pageSize: this.pageSize,\r\n      pageIndex: this.pageIndex,\r\n    });\r\n  }\r\n  private buildPageNumbers = () => {\r\n    const actionContainer = this.vr.element.nativeElement.querySelector(\r\n      'div.mat-paginator-range-actions'\r\n    );\r\n    const nextPageNode = this.vr.element.nativeElement.querySelector(\r\n      'button.mat-paginator-navigation-next'\r\n    );\r\n    let prevButtonCount = this.buttons.length;\r\n\r\n    // remove buttons before creating new ones\r\n    if (prevButtonCount > 0) {\r\n      this.buttons.forEach((button) => {\r\n        this.ren.removeChild(actionContainer, button);\r\n      });\r\n      // Empty state array\r\n      prevButtonCount = 0;\r\n    }\r\n    const pagecount = this.vr.element.nativeElement.childNodes[0].childNodes[0]\r\n      .childNodes[1].childNodes[0];\r\n    const container = this.vr.element.nativeElement.childNodes[0].childNodes[0]\r\n      .childNodes[1];\r\n\r\n    this.ren.setStyle(pagecount, 'white-space', 'nowrap');\r\n    this.ren.setStyle(container, 'justify-content', 'flex-end');\r\n\r\n    // Initialize next page and last page buttons\r\n    if (prevButtonCount === 0) {\r\n      const nodeArray = this.vr.element.nativeElement.childNodes[0]\r\n        .childNodes[0].childNodes[1].childNodes;\r\n\r\n      setTimeout(() => {\r\n        for (const node of nodeArray) {\r\n          if (node.nodeName === 'BUTTON') {\r\n            // Next Button styles\r\n            if (node.innerHTML.length > 100 && node.disabled) {\r\n              this.ren.setStyle(node, 'color', '#CCC');\r\n            } else if (node.innerHTML.length > 100 && !node.disabled) {\r\n              this.ren.setStyle(node, 'color', '#999999');\r\n            } else if (node.disabled) {\r\n              this.ren.setStyle(node, 'background-color', '#3f51b5');\r\n              this.ren.setStyle(node, 'color', '#fff');\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    let dots = false;\r\n    let dots2 = false;\r\n\r\n    this.ren.insertBefore(\r\n      actionContainer,\r\n      this.createButton(0, this.matPag.pageIndex),\r\n      nextPageNode\r\n    );\r\n    const page = this.showTotalPages1 + 2;\r\n    for (let i = 1; i < this.matPag.getNumberOfPages() - 1; i = i + 1) {\r\n      if (\r\n        (i < page && this.currentPage < this.showTotalPages1) ||\r\n        (i >= this.rangeStart && i <= this.rangeEnd) ||\r\n        (this.currentPage > this.matPag.length / this.matPag.pageSize - page &&\r\n          i >= this.matPag.length / this.matPag.pageSize - page)\r\n      ) {\r\n        this.ren.insertBefore(\r\n          actionContainer,\r\n          this.createButton(i, this.matPag.pageIndex),\r\n          nextPageNode\r\n        );\r\n      } else {\r\n        if (i > this.rangeEnd && !dots) {\r\n          this.ren.insertBefore(\r\n            actionContainer,\r\n            this.createButton(this.pageGapTxt, this.matPag.pageIndex),\r\n            nextPageNode\r\n          );\r\n          dots = true;\r\n        }\r\n        if (i < this.rangeEnd && !dots2) {\r\n          this.ren.insertBefore(\r\n            actionContainer,\r\n            this.createButton(this.pageGapTxt2, this.matPag.pageIndex),\r\n            nextPageNode\r\n          );\r\n          dots2 = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.matPag.getNumberOfPages() !== 1 && this.matPag.length !== 0) {\r\n      this.ren.insertBefore(\r\n        actionContainer,\r\n        this.createButton(\r\n          this.matPag.getNumberOfPages() - 1,\r\n          this.matPag.pageIndex\r\n        ),\r\n        nextPageNode\r\n      );\r\n    }\r\n  };\r\n\r\n  private createButton(i: any, pageIndex: number): any {\r\n    const linkBtn: MatButton = this.ren.createElement('button');\r\n    this.ren.setAttribute(\r\n      linkBtn,\r\n      'style',\r\n      `color: #333333;\r\n       background: transparent;\r\n       border-radius: 4px;\r\n       border: none;\r\n       margin: 1%;\r\n       font-size: 14px;\r\n       min-width: 24px;\r\n       min-height: 24px;\r\n       max-height: 24px;\r\n       padding: unset`\r\n    );\r\n    if (i === this.pageGapTxt || i === this.pageGapTxt2) {\r\n      this.ren.setStyle(linkBtn, 'color', '#999999');\r\n    }\r\n\r\n    const pagingTxt = isNaN(i) ? this.pageGapTxt : +(i + 1);\r\n    const text = this.ren.createText(pagingTxt + '');\r\n\r\n    this.ren.addClass(linkBtn, 'mat-custom-page');\r\n\r\n    switch (i) {\r\n      case pageIndex:\r\n        this.ren.setAttribute(linkBtn, 'disabled', 'disabled');\r\n        break;\r\n      case this.pageGapTxt:\r\n        this.ren.listen(linkBtn, 'click', () => {\r\n          this.switchPage(this.currentPage + this.showTotalPages1);\r\n        });\r\n        break;\r\n      case this.pageGapTxt2:\r\n        this.ren.listen(linkBtn, 'click', () => {\r\n          this.switchPage(this.currentPage - this.showTotalPages1);\r\n        });\r\n        break;\r\n      default:\r\n        this.ren.listen(linkBtn, 'click', () => {\r\n          this.switchPage(i);\r\n        });\r\n        break;\r\n    }\r\n\r\n    this.ren.appendChild(linkBtn, text);\r\n    // Add button to private array for state\r\n    this.buttons.push(linkBtn);\r\n    return linkBtn;\r\n  }\r\n\r\n  /**\r\n   * @description calculates the button range based on class input parameters and based on current page index value.\r\n   */\r\n  private initPageRange(): void {\r\n    this.rangeStart = this.currentPage - this.showTotalPages1 / 2;\r\n    this.rangeEnd = this.currentPage + this.showTotalPages1 / 2;\r\n    this.buildPageNumbers();\r\n  }\r\n\r\n  private switchPage(i: number): void {\r\n    this.matPag.pageIndex = i;\r\n    this.matPag.page.emit({\r\n      previousPageIndex: this.currentPage,\r\n      pageIndex: i,\r\n      pageSize: this.matPag.pageSize,\r\n      length: this.matPag.length,\r\n    });\r\n    this.currentPage = i;\r\n    this.initPageRange();\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.rangeStart = 0;\r\n    this.rangeEnd = this.showTotalPages1 - 1;\r\n    this.initPageRange();\r\n  }\r\n}\r\n",
            "selector": "[appPagination]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "length",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "pageIndex",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "line": 20,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "change",
                    "args": [],
                    "argsDecorator": [],
                    "line": 43
                }
            ],
            "propertiesClass": [
                {
                    "name": "buildPageNumbers",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "buttons",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pageGapTxt",
                    "defaultValue": "'•••'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "pageGapTxt2",
                    "defaultValue": "'..'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rangeEnd",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "rangeStart",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "showTotalPages1",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createButton",
                    "args": [
                        {
                            "name": "i",
                            "type": "any"
                        },
                        {
                            "name": "pageIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 150,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPageRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "description": "",
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "switchPage",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matPag",
                        "type": "MatPaginator"
                    },
                    {
                        "name": "vr",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "ren",
                        "type": "Renderer2"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "matPag",
                        "type": "MatPaginator",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vr",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ren",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddListExcelComponent",
            "id": "component-AddListExcelComponent-aa671bff7b4f5ab68d186a409526d185",
            "file": "src/app/shared/components/add-list-excel/add-list-excel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-add-excel",
            "styleUrls": [
                "./add-list-excel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-list-excel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "labelExcel",
                    "defaultValue": "{\r\n    content: 'Add New',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "line": 18,
                    "type": "LabelInterface"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rows",
                    "defaultValue": "[\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'na ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SocketClientService } from 'src/app/socket-client/socket-client.service';\r\nimport { IsRead } from 'src/app/store/models/is_read.i';\r\nimport { LabelInterface } from 'src/app/store/models/label.i';\r\nimport { ReminderNotification } from 'src/app/store/models/reminder-notification.i';\r\nimport { NotificationService } from 'src/app/store/services/notification.service';\r\nimport { NotificationStoreFacade } from 'src/app/store/store-facades/notification.store-facade';\r\nimport { Column } from 'src/app/store/models/column.i';\r\n@Component({\r\n  selector: 'brc-add-excel',\r\n  templateUrl: './add-list-excel.component.html',\r\n  styleUrls: ['./add-list-excel.component.scss'],\r\n})\r\n\r\n// na-khanh\r\nexport class AddListExcelComponent implements OnInit {\r\n  @Input() labelExcel: LabelInterface = {\r\n    content: 'Add New',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n\r\n  columns: Column[] = [\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ];\r\n    rows: Column[] = [\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'na ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'na',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ];\r\n  // // @Input() configButtonAdd: configButton = {\r\n  // //   colorButton: 'primary',\r\n  // //   colorMouseOver: 'Basic',\r\n  // //   colorMouseOut: 'primary',\r\n  // //   type: 'submit',\r\n  // //   text: 'Add ideal',\r\n  // // }\r\n\r\n  // @Input() configButtonAdd: ScheduleList = {\r\n  //   filterBox: 'Filter Box',\r\n  //   title: 'Schedule List',\r\n  //   btnAdd: 'Add list',\r\n  // };\r\n\r\n  // @Input() notification_columns: Column[] = [];\r\n  // @Input() notification_dataSource: Object[] = [];\r\n  // @Input() notification_showRowSelection: boolean = false;\r\n  // //Input pagination\r\n  // @Input() notification_totalRecords: number = 0;\r\n  // @Input() notification_recordsPerPage: number = 0;\r\n  // //Input notificationList\r\n  // @Input() configNotificationList: string = \"Notifications List\";\r\n\r\n  // @Input() showRowAction : true;\r\n\r\n  // @Output() rowClicked = new EventEmitter<Object>();\r\n  // @Output() rowsSelected = new EventEmitter<Object>();\r\n  // @Output() sort = new EventEmitter<SortItem[]>();\r\n  // handleClickRow(data: Object) {\r\n  //   this.rowClicked.emit(data);\r\n  // }\r\n\r\n  // handleSelectRow(data: Object) {\r\n  //   this.rowsSelected.emit(data);\r\n  // }\r\n\r\n  // handlesort(data: SortItem[]) {\r\n  //   this.sort.emit(data);\r\n  // }\r\n  constructor( ) {\r\n  }\r\n  ngOnInit(): void {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    text-align: center;\r\n}\r\n\r\n.row-button{\r\n    text-align: center;\r\n\r\n  }\r\n.row-button-detail{\r\n    margin:20px;\r\n}\r\n.row-input{\r\n    margin-top: 20px;\r\n} \r\n\r\n.flex-container {\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    -ms-box-orient: horizontal;\r\n    display: -webkit-box;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: -moz-flex;\r\n    display: -webkit-flex;\r\n    display: flex;\r\n  }\r\n\r\n  .nowrap  { \r\n    -webkit-flex-wrap: nowrap;\r\n    flex-wrap: nowrap;\r\n  } ",
                    "styleUrl": "./add-list-excel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 78
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"pop-up-add-excel\"> -->\r\n  <brc-label [label]=\"labelExcel\" class=\"header\"></brc-label>\r\n  <!-- <form class=\"content\" name=\"form\" #f=\"ngForm\"> -->\r\n    <div class=\"flex-container nowrap\">\r\n      <mat-list >\r\n          <mat-list-item *ngFor=\"let column of columns\" class=\"row-input\">\r\n            {{column.title}}\r\n          </mat-list-item>   \r\n      </mat-list>\r\n      <mat-list style=\"width: 100%;\">\r\n        <mat-list-item *ngFor=\"let column of columns\" class=\"row-input\">\r\n        <mat-form-field style=\"width: 100%;\">\r\n          <input matInput>\r\n          </mat-form-field>\r\n        </mat-list-item>\r\n      </mat-list>\r\n    </div>\r\n    <div class=\"row-button\">\r\n      <div class=\"row-button\" style=\"width: 100%; margin: auto;\">\r\n        <button mat-raised-button color=\"primary\" class=\"row-button-detail\" >Edit</button>\r\n        <button mat-raised-button>Cancel</button>\r\n      </div>\r\n    </div>\r\n\r\n  <!-- </form> -->\r\n<!-- </div> -->"
        },
        {
            "name": "AddPollComponent",
            "id": "component-AddPollComponent-7e8607d1c3254c70f74a95a335804dc1",
            "file": "src/app/shared/components/add-poll/add-poll.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-add-poll",
            "styleUrls": [
                "./add-poll.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-poll.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonReset",
                    "line": 42,
                    "type": "configButton"
                },
                {
                    "name": "buttonSubmit",
                    "line": 41,
                    "type": "configButton"
                },
                {
                    "name": "dataCategory",
                    "defaultValue": "[]",
                    "line": 54,
                    "type": "Category[]"
                },
                {
                    "name": "dataImportance",
                    "line": 55,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelCategory",
                    "line": 46,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelExpiration",
                    "line": 48,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelFromDate",
                    "line": 44,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelImportance",
                    "line": 43,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelOption",
                    "line": 49,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelQuestion",
                    "line": 47,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelToDate",
                    "line": 45,
                    "type": "LabelInterface"
                },
                {
                    "name": "placeholderSearch",
                    "defaultValue": "'search todo ...'",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "titleCategory",
                    "defaultValue": "'Category'",
                    "line": 53,
                    "type": "string"
                },
                {
                    "name": "titleGroupCheckbox",
                    "defaultValue": "''",
                    "line": 51,
                    "type": "string"
                },
                {
                    "name": "titleImportance",
                    "defaultValue": "'Importance'",
                    "line": 52,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddPoll",
                    "defaultValue": "new EventEmitter<String>()",
                    "line": 58,
                    "type": "EventEmitter<String>"
                },
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 57,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "abc",
                    "defaultValue": "\"\"",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "checkMultipleAnswers",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "complete",
                    "defaultValue": "'false'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "formOption",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "incomplete",
                    "defaultValue": "'false'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "type": "Array<FormGroup>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMultiple",
                    "type": "SelectMultipleComponent",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SelectMultipleComponent"
                        }
                    ]
                },
                {
                    "name": "valueCategory",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromHour",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromMinute",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromTimeNow",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToHour",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToMinute",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToTimeNow",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueImportance",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueSearch",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addOption",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "getDataCheckBox",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromTimeNow",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueImportance",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "outputSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textSearch",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { FilterTodo } from '../../../store/models/todo-filter.i';\r\nimport { SelectMultipleComponent } from '../select-multiple/select-multiple.component';\r\n\r\n@Component({\r\n  selector: 'brc-add-poll',\r\n  templateUrl: './add-poll.component.html',\r\n  styleUrls: ['./add-poll.component.scss'],\r\n})\r\nexport class AddPollComponent implements OnInit {\r\n  public valueSearch: string = '';\r\n  public incomplete: string = 'false';\r\n  public complete: string = 'false';\r\n  public valueImportance: string = '';\r\n  public valueCategory: string[] = [];\r\n  public valueGetToDate: string = '';\r\n  public valueGetToTimeNow: string = '';\r\n  public valueGetToHour: string = '';\r\n  public valueGetToMinute: string = '';\r\n  public valueGetFromDate: string = '';\r\n  public valueGetFromTimeNow: string = '';\r\n  public valueGetFromHour: string = '';\r\n  public valueGetFromMinute: string = '';\r\n  public checkMultipleAnswers: false;\r\n  public options: Array<FormGroup> = [];\r\n  public formOption: FormGroup;\r\n  abc: any = \"\";\r\n  constructor( private fb: FormBuilder) {}\r\n  @Input() buttonSubmit: configButton;\r\n  @Input() buttonReset: configButton;\r\n  @Input() labelImportance: LabelInterface;\r\n  @Input() labelFromDate: LabelInterface;\r\n  @Input() labelToDate: LabelInterface;\r\n  @Input() labelCategory: LabelInterface;\r\n  @Input() labelQuestion: LabelInterface;\r\n  @Input() labelExpiration: LabelInterface;\r\n  @Input() labelOption: LabelInterface;\r\n  @Input() placeholderSearch: string = 'search todo ...';\r\n  @Input() titleGroupCheckbox: string = '';\r\n  @Input() titleImportance: string = 'Importance';\r\n  @Input() titleCategory: string = 'Category';\r\n  @Input() dataCategory: Category[] = [];\r\n  @Input() dataImportance: LabelledValue<string>[];\r\n  // out put\r\n  @Output() valueFilter = new EventEmitter();\r\n  @Output() btnAddPoll: EventEmitter<String> = new EventEmitter<String>() ;\r\n  @ViewChild(SelectMultipleComponent) selectMultiple: SelectMultipleComponent;\r\n\r\n  ngOnInit() {\r\n    this.formOption = this.fb.group({\r\n      idOption: [''],\r\n      dataOption: ['']\r\n    });\r\n  }\r\n\r\n  textSearch(data: string) {\r\n    this.valueSearch = data;\r\n  }\r\n  getDataCheckBox(data: Object) {\r\n    this.incomplete = String(data[1].checked);\r\n    this.complete = String(data[0].checked);\r\n  }\r\n  getValueImportance(data: string) {\r\n    this.valueImportance = data;\r\n  }\r\n  outputSelected(data: string[]) {\r\n    this.valueCategory = data;\r\n  }\r\n  getToDate(data: string) {\r\n    this.valueGetToDate = data;\r\n  }\r\n  getToHour(data: string) {\r\n    this.valueGetToHour = data;\r\n  }\r\n  getToMinute(data: string) {\r\n    this.valueGetToMinute = data;\r\n  }\r\n\r\n  getFromDate(data: string) {\r\n    this.valueGetFromDate = data;\r\n  }\r\n  getFromTimeNow(data: string) {\r\n    this.valueGetFromTimeNow = data;\r\n  }\r\n  getFromHour(data: string) {\r\n    this.valueGetFromHour = data;\r\n  }\r\n  getFromMinute(data: string) {\r\n    this.valueGetFromMinute = data;\r\n  }\r\n  onSubmit() {\r\n    let sta = '';\r\n    if (this.complete === 'true' && this.incomplete === 'true') {\r\n      sta = '';\r\n    } else if (this.incomplete === 'true') {\r\n      sta = 'incomplete';\r\n    } else if (this.complete === 'true') {\r\n      sta = 'complete';\r\n    } else {\r\n      sta = '';\r\n    }\r\n\r\n    let fromHour = this.valueGetFromHour === '' ? '00' : this.valueGetFromHour;\r\n    let fromMinute =this.valueGetFromMinute === '' ? '00' : this.valueGetFromMinute;\r\n    let toHour = this.valueGetToHour === '' ? '00' : this.valueGetToHour;\r\n    let toMinute = this.valueGetToMinute === '' ? '00' : this.valueGetToMinute;\r\n    let model: FilterTodo = {\r\n      textSearch: this.valueSearch,\r\n      importance: this.valueImportance,\r\n      category: this.valueCategory,\r\n      status: sta,\r\n      fromDate:\r\n        this.valueGetFromDate === ''\r\n          ? ''\r\n          : this.valueGetFromDate +\r\n            'T' +\r\n            fromHour +\r\n            ':' +\r\n            fromMinute +\r\n            ':00.000Z',\r\n      toDate:\r\n        this.valueGetToDate === ''\r\n          ? ''\r\n          : this.valueGetToDate + 'T' + toHour + ':' + toMinute + ':00.000Z',\r\n    };\r\n    this.valueFilter.emit(model);\r\n  }\r\n\r\n  addOption(){\r\n    this.formOption = this.fb.group({\r\n      idOption: [this.options.length + 1],\r\n      dataOption: [this.options.length + 1]\r\n    });\r\n    this.options.push(this.formOption);\r\n  }\r\n  \r\n  clear() {\r\n    this.valueSearch = '';\r\n    this.valueImportance = '';\r\n    this.valueCategory = [];\r\n    this.valueGetFromDate = '';\r\n    this.valueGetToDate = '';\r\n    this.valueGetToHour='';\r\n    this.valueGetFromHour='';\r\n    this.complete = '';\r\n    this.incomplete ='';\r\n    this.selectMultiple.clear();\r\n  }\r\n\r\n  onClickBtnAdd() {\r\n    this.btnAddPoll.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-label{\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n}\r\n.row-button{\r\n  display: flex;\r\n  // flex-direction: row;\r\n  justify-content: center;\r\n}\r\n.row-button > brc-button{\r\n  text-align: center;\r\n  margin:0px 15px;\r\n}\r\n.date{\r\n  padding: 10x 0px;\r\n  margin : 10px 0px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n}\r\n.date >brc-label{\r\n  width : 100% !important;\r\n}\r\n.date > brc-datetime-picker{\r\n  width: 99% !important;\r\n}\r\n.filter-container {\r\n  padding: 20px;\r\n  max-width: 60%;\r\n  margin: auto;\r\n}\r\nhr{\r\n  width: 100%;\r\n  color: darkgray;\r\n}\r\n.btn-option {\r\n  width: 20px;\r\n  height: 20px;\r\n  font-size: 5px;\r\n}\r\n\r\n",
                    "styleUrl": "./add-poll.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"filter-container\">\r\n  <h1 style=\"font-weight: bold; text-align: center;\">Create Poll</h1>\r\n  <hr />\r\n  <div>\r\n    <brc-label [label]=\"labelQuestion\" class=\"filter-label\" style=\"width: 100%; margin-bottom: 10px;\"></brc-label>\r\n    <input type=\"text\" placeholder=\"_What's your poll question?\" style=\"width: 100%; padding: 6px 0px;\">\r\n  </div>\r\n  <br />\r\n\r\n  <div style=\"width: 100%;\">\r\n    <brc-label [label]=\"labelExpiration\" class=\"filter-label\" style=\"width: 100%; margin-bottom: 10px;\"></brc-label>\r\n    <brc-datetime-picker (getDay)=\"getFromDate($event)\" (getHour)=\"getFromHour($event)\"\r\n      (getMinute)=\"getFromMinute($event)\"></brc-datetime-picker>\r\n  </div>\r\n  <br />\r\n\r\n  <div>\r\n    <input type=\"checkbox\" name=\"checkMultipleAnswers\" [(ngModel)]=\"checkMultipleAnswers\">\r\n    <label for=\"checkMultipleAnswers\" style=\"margin-left: 5px; font-size: initial; color: black;\">Allow multiple poll\r\n      answers</label>\r\n  </div>\r\n\r\n  <br />\r\n  <div>\r\n    <div style=\"display: flex; flex-direction: column; width: 100%;\">\r\n      <brc-label [label]=\"labelOption\" class=\"filter-label\" style=\"width: 100%; margin-bottom: 10px;\"></brc-label>\r\n      <form [formGroup]=\"formOption\">\r\n        <div *ngFor=\"let option of options; index as i\" style=\"display: flex; flex-direction: row; margin-bottom: 10px;\">\r\n          <input  style=\"width: 100%;\">\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <div style=\"display: flex; flex-direction: row;\">\r\n      <button (click)=\"addOption()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n      <label style=\"color: black; margin-top: 4px;\">Add option</label>\r\n    </div>\r\n  </div>\r\n  <br />\r\n  <div>\r\n    <div style=\"width: 100%; margin: auto; text-align: center;\">\r\n      <brc-button [configButton]=\"buttonSubmit\" (click)=\"onClickBtnAdd()\"></brc-button>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "AddPollPageComponent",
            "id": "component-AddPollPageComponent-60b2af9395675a5eff2ce3a5724f8e17",
            "file": "src/app/modules/add-poll-page/add-poll-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-poll-page",
            "styleUrls": [
                "./add-poll-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-poll-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CategoryArray",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Poll',\r\n  }",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "configButtonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'reset',\r\n    text: 'Cancel!',\r\n  }",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "addTodoValue",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dataCategory",
                    "defaultValue": "[]",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ImportanceArray",
                    "defaultValue": "[\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ]",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "LabelDatePicker",
                    "defaultValue": "{\r\n    content: 'Deadline',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelExpiration",
                    "defaultValue": "{\r\n    content: 'Expiration:',\r\n    size: 17,\r\n    color: 'black',\r\n    backgroundColor: '',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "labelOption",
                    "defaultValue": "{\r\n    content: 'Option:',\r\n    size: 17,\r\n    color: 'black',\r\n    backgroundColor: '',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "labelQuestion",
                    "defaultValue": "{\r\n    content: 'Question:',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addPoll",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "onAddTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "addTodoValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "addTodoValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n  ETodo,\r\n  TodoAddFail,\r\n  TodoAddSuccess,\r\n} from '../../store/actions/todo.action';\r\nimport { addTodoValue } from '../../store/models/addtodo.i';\r\nimport { configButton } from '../../store/models/button.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { LabelInterface } from '../../store/models/label.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport { StoreFacade } from '../../store/store-facades/todo.store-facade';\r\n@Component({\r\n  selector: 'app-add-poll-page',\r\n  templateUrl: './add-poll-page.component.html',\r\n  styleUrls: ['./add-poll-page.component.scss'],\r\n})\r\nexport class AddPollPageComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$ = new Subject<void>();\r\n  constructor(\r\n    private storeFacade: StoreFacade,\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private _snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  labelQuestion: LabelInterface = {\r\n    content: 'Question:',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n\r\n  labelExpiration: LabelInterface = {\r\n    content: 'Expiration:',\r\n    size: 17,\r\n    color: 'black',\r\n    backgroundColor: '',\r\n  }\r\n\r\n  labelOption: LabelInterface = {\r\n    content: 'Option:',\r\n    size: 17,\r\n    color: 'black',\r\n    backgroundColor: '',\r\n  }\r\n  ngOnInit() {\r\n    this.storeFacade.getValueTodoTablePage().subscribe((todo) => {\r\n      this.CategoryArray = todo.listCategory;\r\n      this.dataCategory = [];\r\n      if (typeof this.CategoryArray != 'undefined' && this.CategoryArray.length > 0) {\r\n        this.CategoryArray.forEach((e) => {\r\n          let category: LabelledValue<string> = {\r\n            value: String(e.categoryId),\r\n            label: e.categoryName,\r\n          };\r\n          this.dataCategory.push(category);\r\n        });\r\n      }\r\n    });\r\n\r\n    // navigate when success\r\n    this.actions$\r\n      .pipe(\r\n        ofType<TodoAddSuccess>(ETodo.ADD_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.router.navigate(['/todo']);\r\n        this.openSnackBar('Add Success !!!', 'Success !!!');\r\n      });\r\n    // alert when add fail\r\n    this.actions$\r\n      .pipe(ofType<TodoAddFail>(ETodo.ADD_FAIL), takeUntil(this.unsubscribe$))\r\n      .subscribe(() => {\r\n        this.openSnackBar('Add Fail !!!', 'Fail !!!');\r\n      });\r\n  }\r\n  openSnackBar(message: string, action: string) {\r\n    this._snackBar.open(message, action, {\r\n      duration: 1500,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n  public dataCategory: LabelledValue<string>[] = [];\r\n  public data: addTodoValue;\r\n  public LabelDatePicker: LabelInterface = {\r\n    content: 'Deadline',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n\r\n  public configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Poll',\r\n  };\r\n  public configButtonCancel: configButton = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'reset',\r\n    text: 'Cancel!',\r\n  };\r\n\r\n  public CategoryArray: Category[] = [];\r\n  public ImportanceArray: LabelledValue<string>[] = [\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ];\r\n\r\n  onAddTodo(data: addTodoValue) {\r\n    this.data = data;\r\n    this.storeFacade.addTodo(this.data);\r\n  }\r\n  cancelTodo(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n\r\n  addPoll(data){\r\n    this.router.navigateByUrl('/poll');\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .form-add {\r\n//     margin: 20px;\r\n// }\r\n\r\n// .label {\r\n//     padding-bottom: 20px;\r\n// }\r\n// .content {\r\n//     margin-left: 14%;\r\n//     margin-right: 14%;\r\n//   }\r\n",
                    "styleUrl": "./add-poll-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"content\">\r\n  <brc-add-poll \r\n  [labelQuestion]=\"labelQuestion\" \r\n  [labelExpiration]=\"labelExpiration\" \r\n  [labelOption]=\"labelOption\"\r\n  [buttonSubmit]=\"configButtonAdd\"\r\n  (btnAddPoll)=\"addPoll($event)\">\r\n  </brc-add-poll>\r\n</div>"
        },
        {
            "name": "AddScheduleComponent",
            "id": "component-AddScheduleComponent-1f6e3d11f38e44405fca424aa70b46fb",
            "file": "src/app/shared/components/add-schedule/add-schedule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-add-schedule",
            "styleUrls": [
                "./add-schedule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-schedule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectEquipment",
                    "line": 29,
                    "type": "Category[]"
                },
                {
                    "name": "selectImportant",
                    "line": 25,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "selectMonthly",
                    "line": 27,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "selectTypeSchedule",
                    "line": 24,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "selectUserIds",
                    "line": 28,
                    "type": "Category[]"
                },
                {
                    "name": "selectWeekly",
                    "line": 26,
                    "type": "LabelledValue<string>[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "addCancel",
                    "defaultValue": "new EventEmitter()",
                    "line": 38,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "addSubmit",
                    "defaultValue": "new EventEmitter()",
                    "line": 37,
                    "type": "EventEmitter<AddSchedule>"
                },
                {
                    "name": "checkFreeTimeEquipment",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter<CheckFreeTime>"
                },
                {
                    "name": "checkFreeTimePraticipant",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<CheckFreeTime>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Add',\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "buttonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Cancel',\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "buttonCheckTimeEquipment",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Check free time equipment',\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "buttonCheckTimePraticipant",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Check free time participant',\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "dateEnd",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dateStart",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "description",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "endDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "equipments",
                    "defaultValue": "[]",
                    "type": "Equipment[]",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "equipmentsString",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hourEnd",
                    "defaultValue": "'20'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hourEndRepeat",
                    "defaultValue": "'20'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hourStart",
                    "defaultValue": "'20'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "hourStartRepeat",
                    "defaultValue": "'20'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "important",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelDescription",
                    "defaultValue": "{\r\n    content: 'Description',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "labelEndTime",
                    "defaultValue": "{\r\n    content: 'End time',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "labelExprices",
                    "defaultValue": "{\r\n    content: 'Exprices',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "labelHeader",
                    "defaultValue": "{\r\n    content: 'Add new schedule',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "labelLocation",
                    "defaultValue": "{\r\n    content: 'Location',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "labelStartDate",
                    "defaultValue": "{\r\n    content: 'Start date',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "labelStartTime",
                    "defaultValue": "{\r\n    content: 'Start time',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "labelTitle",
                    "defaultValue": "{\r\n    content: 'Title',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "location",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "minuteEnd",
                    "defaultValue": "'11'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "minuteEndRepeat",
                    "defaultValue": "'11'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "minuteStart",
                    "defaultValue": "'11'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "minuteStartRepeat",
                    "defaultValue": "'11'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "monthly",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "praticipants",
                    "defaultValue": "[]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "praticipantsString",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "repeat",
                    "defaultValue": "'normal'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMultiple1",
                    "type": "SelectMultipleSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectedEquipment'"
                        }
                    ]
                },
                {
                    "name": "selectMultiple2",
                    "type": "SelectMultipleSearchComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'selectedParticipant'"
                        }
                    ]
                },
                {
                    "name": "showRepeat",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "titleSchedule",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeRepeat",
                    "defaultValue": "'normal'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeSchedule",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueRepeat",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "weekly",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "calRealStartTime",
                    "args": [],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 198
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154
                },
                {
                    "name": "changeRadio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344
                },
                {
                    "name": "changeRadioRepeat",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 377
                },
                {
                    "name": "checkEquipment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232
                },
                {
                    "name": "checkParticipant",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222
                },
                {
                    "name": "chooseEquipment",
                    "args": [
                        {
                            "name": "equipments",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "jsdoctags": [
                        {
                            "name": "equipments",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseImportant",
                    "args": [
                        {
                            "name": "important",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "jsdoctags": [
                        {
                            "name": "important",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseMonthly",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 367,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "choosePraticipant",
                    "args": [
                        {
                            "name": "praticipants",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 325,
                    "jsdoctags": [
                        {
                            "name": "praticipants",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseTypeSchedule",
                    "args": [
                        {
                            "name": "typeSchedule",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 332,
                    "jsdoctags": [
                        {
                            "name": "typeSchedule",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseWeekly",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndDate",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndHour",
                    "args": [
                        {
                            "name": "hour",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "jsdoctags": [
                        {
                            "name": "hour",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndHourRepeat",
                    "args": [
                        {
                            "name": "hour",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "jsdoctags": [
                        {
                            "name": "hour",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndMinute",
                    "args": [
                        {
                            "name": "minute",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "jsdoctags": [
                        {
                            "name": "minute",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEndMinuteRepeat",
                    "args": [
                        {
                            "name": "minute",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "jsdoctags": [
                        {
                            "name": "minute",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRepeatDate",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartDate",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartHour",
                    "args": [
                        {
                            "name": "hour",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252,
                    "jsdoctags": [
                        {
                            "name": "hour",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartHourRepeat",
                    "args": [
                        {
                            "name": "hour",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "jsdoctags": [
                        {
                            "name": "hour",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartMinute",
                    "args": [
                        {
                            "name": "minute",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 256,
                    "jsdoctags": [
                        {
                            "name": "minute",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStartMinuteRepeat",
                    "args": [
                        {
                            "name": "minute",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "jsdoctags": [
                        {
                            "name": "minute",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { ICheckBoxItem } from '../../../store/models/checkbox-item.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { CheckFreeTime } from '../../../store/models/checkFreeTime.i';\r\nimport { AddSchedule, Equipment } from '../../../store/models/add-schedule.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { SelectMultipleSearchComponent } from '../select-multiple-search/select-multiple-search.component';\r\nimport { getDay, addWeeks, addMonths, addDays, subDays } from 'date-fns';\r\n\r\n@Component({\r\n  selector: 'brc-add-schedule',\r\n  templateUrl: './add-schedule.component.html',\r\n  styleUrls: ['./add-schedule.component.scss'],\r\n})\r\nexport class AddScheduleComponent implements OnInit {\r\n  @Input() selectTypeSchedule: LabelledValue<string>[];\r\n  @Input() selectImportant: LabelledValue<string>[];\r\n  @Input() selectWeekly: LabelledValue<string>[];\r\n  @Input() selectMonthly: LabelledValue<string>[];\r\n  @Input() selectUserIds: Category[];\r\n  @Input() selectEquipment: Category[];\r\n\r\n  @Output() checkFreeTimePraticipant: EventEmitter<\r\n    CheckFreeTime\r\n  > = new EventEmitter();\r\n  @Output() checkFreeTimeEquipment: EventEmitter<\r\n    CheckFreeTime\r\n  > = new EventEmitter();\r\n  @Output() addSubmit: EventEmitter<AddSchedule> = new EventEmitter();\r\n  @Output() addCancel: EventEmitter<string> = new EventEmitter();\r\n  @ViewChild('selectedEquipment')\r\n  selectMultiple1: SelectMultipleSearchComponent;\r\n  @ViewChild('selectedParticipant')\r\n  selectMultiple2: SelectMultipleSearchComponent;\r\n  public repeat = 'normal';\r\n  public typeRepeat = 'normal';\r\n  public weekly = '';\r\n  public monthly = '';\r\n  public endDate = '';\r\n  public valueRepeat = '';\r\n  public showRepeat = false;\r\n  public hourStart = '20';\r\n  public dateStart = '';\r\n  public minuteStart = '11';\r\n  public hourEnd = '20';\r\n  public minuteEnd = '11';\r\n  public dateEnd = '';\r\n  public hourStartRepeat = '20';\r\n  public minuteStartRepeat = '11';\r\n  public hourEndRepeat = '20';\r\n  public minuteEndRepeat = '11';\r\n  public titleSchedule = '';\r\n  public location = '';\r\n  public typeSchedule;\r\n  public important = '';\r\n  public praticipants: number[] = [];\r\n  public praticipantsString = '';\r\n  public equipments: Equipment[] = [];\r\n  public equipmentsString = '';\r\n  public description = '';\r\n\r\n  labelHeader: LabelInterface = {\r\n    content: 'Add new schedule',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelStartDate: LabelInterface = {\r\n    content: 'Start date',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelStartTime: LabelInterface = {\r\n    content: 'Start time',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelExprices: LabelInterface = {\r\n    content: 'Exprices',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelEndTime: LabelInterface = {\r\n    content: 'End time',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelTitle: LabelInterface = {\r\n    content: 'Title',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelLocation: LabelInterface = {\r\n    content: 'Location',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  labelDescription: LabelInterface = {\r\n    content: 'Description',\r\n    size: 16,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n\r\n  buttonCheckTimePraticipant = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Check free time participant',\r\n  };\r\n  buttonCheckTimeEquipment = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Check free time equipment',\r\n  };\r\n\r\n  buttonAdd = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Add',\r\n  };\r\n\r\n  buttonCancel = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'button',\r\n    text: 'Cancel',\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  cancel(): void {\r\n    this.addCancel.emit('/schedule');\r\n  }\r\n\r\n  submit() {\r\n    let schedule: AddSchedule;\r\n    if (this.typeRepeat == 'normal') {\r\n      schedule = {\r\n        title: this.titleSchedule,\r\n        description: this.description,\r\n        timeStart: new Date(\r\n          this.dateStart + ' ' + this.hourStart + ':' + this.minuteStart\r\n        ),\r\n        dueDate: new Date(\r\n          this.dateEnd + ' ' + this.hourEnd + ':' + this.minuteEnd\r\n        ),\r\n        important: this.important,\r\n        place: this.location,\r\n        userIds: this.praticipants,\r\n        equipmentName: this.equipments,\r\n        scheduleCategoryId: Number.parseInt(this.typeSchedule),\r\n        typeRepeat: this.typeRepeat,\r\n      };\r\n    } else {\r\n      schedule = {\r\n        title: this.titleSchedule,\r\n        description: this.description,\r\n        timeStartRepeat:\r\n          this.hourStartRepeat + ':' + this.minuteStartRepeat + ':00',\r\n        timeDueRepeat: this.hourEndRepeat + ':' + this.minuteEndRepeat + ':00',\r\n        important: this.important,\r\n        place: this.location,\r\n        userIds: this.praticipants,\r\n        equipmentName: this.equipments,\r\n        scheduleCategoryId: Number.parseInt(this.typeSchedule),\r\n        //TODO : add function to cal real start time with (typeRepeat adn valueRepeat)\r\n        timeStart: this.calRealStartTime(),\r\n        dueDate: new Date(this.endDate),\r\n        typeRepeat: this.typeRepeat,\r\n        valueRepeat: this.valueRepeat,\r\n      };\r\n    }\r\n    this.addSubmit.emit(schedule);\r\n  }\r\n  calRealStartTime(): Date {\r\n    let timeStart: Date;\r\n    // check type repeat\r\n    if (this.typeRepeat === 'weekly') {\r\n      // timeStart = this.checkAfterWeekDay();\r\n      const rangeDay = Math.abs(new Date().getDay() - Number(this.valueRepeat));\r\n      if (new Date().getDay() >= Number(this.valueRepeat)) {\r\n        timeStart = addWeeks(subDays(new Date(), rangeDay), 1);\r\n      } else {\r\n        timeStart = addDays(new Date(), rangeDay);\r\n      }\r\n    }\r\n    if (this.typeRepeat === 'monthly') {\r\n      const rangeDay = Math.abs(\r\n        new Date().getDate() - Number(this.valueRepeat)\r\n      );\r\n      if (new Date().getDate() >= Number(this.valueRepeat)) {\r\n        timeStart = addMonths(subDays(new Date(), rangeDay), 1);\r\n      } else {\r\n        timeStart = addDays(new Date(), rangeDay);\r\n      }\r\n    }\r\n    return timeStart || new Date();\r\n  }\r\n  checkParticipant() {\r\n    this.checkFreeTimePraticipant.emit({\r\n      startTime: new Date(\r\n        this.dateStart + ' ' + this.hourStart + ':' + this.minuteStart\r\n      ),\r\n      dueTime: new Date(this.dateEnd),\r\n      equipmentId: this.praticipants,\r\n    });\r\n  }\r\n\r\n  checkEquipment() {\r\n    if (this.typeRepeat == 'normal') {\r\n      this.checkFreeTimeEquipment.emit({\r\n        startTime: new Date(\r\n          this.dateStart + ' ' + this.hourStart + ':' + this.minuteStart\r\n        ),\r\n        dueTime: new Date(\r\n          this.dateEnd + ' ' + this.hourEnd + ':' + this.minuteEnd\r\n        ),\r\n        equipmentId: this.equipments.map((item) => item.equipmentId),\r\n      });\r\n    } else {\r\n      this.checkFreeTimeEquipment.emit({\r\n        startTime: new Date(),\r\n        dueTime: new Date(this.endDate),\r\n        equipmentId: this.equipments.map((item) => item.equipmentId),\r\n      });\r\n    }\r\n  }\r\n\r\n  getStartHour(hour) {\r\n    this.hourStart = hour;\r\n  }\r\n\r\n  getStartMinute(minute) {\r\n    this.minuteStart = minute;\r\n  }\r\n\r\n  getStartDate(date) {\r\n    this.dateStart = date;\r\n  }\r\n\r\n  getEndHour(hour) {\r\n    this.hourEnd = hour;\r\n  }\r\n\r\n  getEndMinute(minute) {\r\n    this.minuteEnd = minute;\r\n  }\r\n\r\n  getEndDate(date) {\r\n    this.dateEnd = date;\r\n  }\r\n\r\n  getStartHourRepeat(hour) {\r\n    this.hourStartRepeat = hour;\r\n  }\r\n\r\n  getStartMinuteRepeat(minute) {\r\n    this.minuteStartRepeat = minute;\r\n  }\r\n\r\n  getEndHourRepeat(hour) {\r\n    this.hourEndRepeat = hour;\r\n  }\r\n\r\n  getEndMinuteRepeat(minute) {\r\n    this.minuteEndRepeat = minute;\r\n  }\r\n\r\n  chooseEquipment(equipments) {\r\n    if (this.typeRepeat == 'normal') {\r\n      this.equipments = [];\r\n      equipments.forEach((element) => {\r\n        let equipment: Equipment = {\r\n          equipmentId: element,\r\n          timeStart: new Date(\r\n            this.dateStart + ' ' + this.hourStart + ':' + this.minuteStart\r\n          ),\r\n          timeDue: new Date(\r\n            this.dateEnd + ' ' + this.hourEnd + ':' + this.minuteEnd\r\n          ),\r\n        };\r\n        this.equipments.push(equipment);\r\n      });\r\n    } else {\r\n      this.equipments = [];\r\n      equipments.forEach((element) => {\r\n        let equipment: Equipment = {\r\n          equipmentId: element,\r\n          timeStart: new Date(),\r\n          timeDue: new Date(this.endDate),\r\n        };\r\n        this.equipments.push(equipment);\r\n      });\r\n    }\r\n    this.equipmentsString = this.equipments\r\n      .map(\r\n        (item) => `${this.selectEquipment[item.equipmentId - 1].categoryName}`\r\n      )\r\n      .join(',');\r\n  }\r\n\r\n  choosePraticipant(praticipants) {\r\n    this.praticipants = praticipants;\r\n    this.praticipantsString = this.praticipants\r\n      .map((item) => `${this.selectUserIds[item - 1].categoryName}`)\r\n      .join(',');\r\n  }\r\n\r\n  chooseTypeSchedule(typeSchedule) {\r\n    this.typeSchedule = typeSchedule;\r\n  }\r\n\r\n  chooseImportant(important) {\r\n    this.important = important;\r\n  }\r\n\r\n  getDescription(description) {\r\n    this.description = description;\r\n  }\r\n\r\n  changeRadio() {\r\n    this.selectMultiple1.clear();\r\n    this.selectMultiple2.clear();\r\n    this.equipmentsString = '';\r\n    this.praticipantsString = '';\r\n    this.equipments = [];\r\n    if (this.repeat == 'normal') {\r\n      this.showRepeat = false;\r\n      this.typeRepeat = 'normal';\r\n      this.valueRepeat = '';\r\n    } else {\r\n      this.showRepeat = true;\r\n      this.typeRepeat = 'everyday';\r\n      this.valueRepeat = 'everyday';\r\n    }\r\n  }\r\n\r\n  chooseWeekly(value) {\r\n    this.weekly = value;\r\n    this.valueRepeat = this.weekly;\r\n    this.typeRepeat = 'weekly';\r\n  }\r\n\r\n  chooseMonthly(value) {\r\n    this.monthly = value;\r\n    this.valueRepeat = this.monthly;\r\n    this.typeRepeat = 'monthly';\r\n  }\r\n\r\n  getRepeatDate(value) {\r\n    this.endDate = value;\r\n  }\r\n\r\n  changeRadioRepeat() {\r\n    switch (this.typeRepeat) {\r\n      case 'weekly':\r\n        this.valueRepeat = this.weekly;\r\n        break;\r\n      case 'monthly':\r\n        this.valueRepeat = this.monthly;\r\n        break;\r\n      default:\r\n        this.valueRepeat = 'everyday';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n  box-sizing: border-box;\r\n}\r\n\r\n.container {\r\n  padding: 1%;\r\n}\r\n\r\n.header {\r\n  padding: 10px;\r\n  margin: 10px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.col-3 {\r\n  width: 21%;\r\n  display: inline-block;\r\n  margin: 10px;\r\n}\r\n\r\n.col-6 {\r\n  width: 47%;\r\n  display: inline-block;\r\n  margin: 10px;\r\n}\r\n\r\n.col-6-6 {\r\n  width: 45%;\r\n  display: inline-block;\r\n  margin: 10px;\r\n}\r\n\r\n.checkbox {\r\n  border-radius: 2px;\r\n  width: 18px;\r\n  height: 18px;\r\n}\r\n\r\ninput[type=\"text\"] {\r\n  width: 100%;\r\n}\r\n\r\n.buttonCheck {\r\n  float: right;\r\n}\r\n\r\n.buttonCancel,\r\n.buttonAdd {\r\n  float: right;\r\n}\r\n\r\n.buttonAdd {\r\n  margin-right: 30px;\r\n}\r\n\r\n.timeRepeat {\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.right {\r\n  float: right;\r\n}\r\n\r\n@media (max-width: 900px) {\r\n  .col-6 {\r\n    width: 100%;\r\n    margin-left: 0px;\r\n  }\r\n\r\n  .startTimeNormal {\r\n    margin-bottom: 30px;\r\n    margin-left: 0px;\r\n  }\r\n\r\n  .startTimeRepeat {\r\n    margin-bottom: 50px;\r\n    margin-left: 0px;\r\n  }\r\n\r\n  .endTime {\r\n    margin-bottom: 30px;\r\n    margin-left: 0px;\r\n  }\r\n\r\n  .col-6-6 {\r\n    width: 100%;\r\n    margin-left: 0px;\r\n  }\r\n\r\n  .right {\r\n    float: initial;\r\n  }\r\n}\r\n",
                    "styleUrl": "./add-schedule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 148
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header\">\r\n    <brc-label [label]=\"labelHeader\"></brc-label>\r\n  </div>\r\n  <div class=\"typeRemind\">\r\n    <mat-radio-group\r\n      aria-label=\"Select an option\"\r\n      (change)=\"changeRadio()\"\r\n      [color]=\"'primary'\"\r\n      [(ngModel)]=\"repeat\"\r\n    >\r\n      <div class=\"col-6\">\r\n        <div class=\"col-6-6\">\r\n          <mat-radio-button [value]=\"'normal'\">Normal</mat-radio-button>\r\n        </div>\r\n        <div class=\"col-6-6 right\">\r\n          <mat-radio-button [value]=\"'repeat'\">Repeat</mat-radio-button>\r\n        </div>\r\n      </div>\r\n    </mat-radio-group>\r\n    <div style=\"width: 100%;\">\r\n      <hr />\r\n    </div>\r\n  </div>\r\n  <div class=\"typeRepeat\" *ngIf=\"showRepeat\">\r\n    <mat-radio-group\r\n      aria-label=\"Select an option\"\r\n      (change)=\"changeRadioRepeat()\"\r\n      [color]=\"'primary'\"\r\n      [(ngModel)]=\"typeRepeat\"\r\n    >\r\n      <div class=\"col-6\">\r\n        <div class=\"col-6-6\">\r\n          <mat-radio-button [value]=\"'everyday'\">Everyday</mat-radio-button>\r\n        </div>\r\n        <div class=\"col-6-6\" style=\"margin: 0;\">\r\n          <mat-radio-button [value]=\"'weekly'\"></mat-radio-button>\r\n          <div style=\"width: 100%; display: inline-block;\">\r\n            <brc-app-select\r\n              [label]=\"'Weekly'\"\r\n              [data]=\"selectWeekly\"\r\n              (getValue)=\"chooseWeekly($event)\"\r\n            ></brc-app-select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-6\">\r\n        <div class=\"col-6-6\">\r\n          <mat-radio-button [value]=\"'monthly'\"></mat-radio-button>\r\n          <div style=\"width: 100%; display: inline-block;\">\r\n            <brc-app-select\r\n              [label]=\"'Monthly'\"\r\n              [data]=\"selectMonthly\"\r\n              (getValue)=\"chooseMonthly($event)\"\r\n            ></brc-app-select>\r\n          </div>\r\n        </div>\r\n        <div class=\"col-6-6 right\">\r\n          <brc-label [label]=\"labelExprices\"></brc-label>\r\n          <div style=\"width: 100%; display: inline-block;\">\r\n            <brc-date-picker\r\n              (getDate)=\"getRepeatDate($event)\"\r\n            ></brc-date-picker>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-radio-group>\r\n    <div style=\"width: 100%;\">\r\n      <hr />\r\n    </div>\r\n  </div>\r\n  <div class=\"timeNormal\" *ngIf=\"!showRepeat\">\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6 dateStart\">\r\n        <brc-label [label]=\"labelStartDate\"></brc-label>\r\n        <brc-date-picker (getDate)=\"getStartDate($event)\"></brc-date-picker>\r\n      </div>\r\n      <div class=\"col-6-6 startTimeNormal right\">\r\n        <brc-label [label]=\"labelStartTime\"></brc-label>\r\n        <brc-time-picker\r\n          (getHour)=\"getStartHour($event)\"\r\n          (getMinute)=\"getStartMinute($event)\"\r\n        ></brc-time-picker>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6 dateEnd\">\r\n        <brc-label [label]=\"labelExprices\"></brc-label>\r\n        <brc-date-picker (getDate)=\"getEndDate($event)\"></brc-date-picker>\r\n      </div>\r\n      <div class=\"col-6-6 endTime right\">\r\n        <brc-label [label]=\"labelEndTime\"></brc-label>\r\n        <brc-time-picker\r\n          (getHour)=\"getEndHour($event)\"\r\n          (getMinute)=\"getEndMinute($event)\"\r\n        ></brc-time-picker>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"timeRepeat\" *ngIf=\"showRepeat\">\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6 startTimeRepeat\">\r\n        <brc-label [label]=\"labelStartTime\"></brc-label>\r\n        <brc-time-picker\r\n          (getHour)=\"getStartHourRepeat($event)\"\r\n          (getMinute)=\"getStartMinuteRepeat($event)\"\r\n        ></brc-time-picker>\r\n      </div>\r\n      <div class=\"col-6-6 right\">\r\n        <brc-label [label]=\"labelEndTime\"></brc-label>\r\n        <brc-time-picker\r\n          (getHour)=\"getEndHourRepeat($event)\"\r\n          (getMinute)=\"getEndMinuteRepeat($event)\"\r\n        ></brc-time-picker>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6\">\r\n        <brc-label [label]=\"labelTitle\"></brc-label>\r\n        <input type=\"text\" [(ngModel)]=\"titleSchedule\" />\r\n      </div>\r\n      <div class=\"col-6-6 right\">\r\n        <brc-label [label]=\"labelLocation\"></brc-label>\r\n        <input type=\"text\" [(ngModel)]=\"location\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6\">\r\n        <brc-app-select\r\n          [label]=\"'Type schedule'\"\r\n          [data]=\"selectTypeSchedule\"\r\n          (getValue)=\"chooseTypeSchedule($event)\"\r\n        ></brc-app-select>\r\n      </div>\r\n      <div class=\"col-6-6 right\">\r\n        <brc-app-select\r\n          [data]=\"selectImportant\"\r\n          [label]=\"'Important'\"\r\n          (getValue)=\"chooseImportant($event)\"\r\n        ></brc-app-select>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div class=\"col-6\">\r\n      <div>\r\n        <div class=\"col-6-6\">\r\n          <brc-select-multiple-search\r\n            #selectedParticipant\r\n            [values]=\"selectUserIds\"\r\n            [label]=\"'Username'\"\r\n            (outputSelected)=\"choosePraticipant($event)\"\r\n          >\r\n          </brc-select-multiple-search>\r\n        </div>\r\n        <div class=\"col-6-6 right\">\r\n          <brc-button\r\n            class=\"buttonCheck\"\r\n            [configButton]=\"buttonCheckTimePraticipant\"\r\n            (click)=\"checkParticipant()\"\r\n          ></brc-button>\r\n        </div>\r\n      </div>\r\n      <div style=\"margin-top: 10px;\">\r\n        <input type=\"text\" disabled [(ngModel)]=\"praticipantsString\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-6\">\r\n      <brc-label [label]=\"labelDescription\"></brc-label>\r\n      <brc-textarea\r\n        [row]=\"4\"\r\n        [placeholder]=\"'What is important for people to know?'\"\r\n        (value)=\"getDescription($event)\"\r\n      ></brc-textarea>\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <div class=\"col-6\">\r\n      <div class=\"col-6-6\">\r\n        <brc-select-multiple-search\r\n          #selectedEquipment\r\n          [values]=\"selectEquipment\"\r\n          [label]=\"'Equipment'\"\r\n          (outputSelected)=\"chooseEquipment($event)\"\r\n        >\r\n        </brc-select-multiple-search>\r\n      </div>\r\n      <div class=\"col-6-6 right\">\r\n        <brc-button\r\n          class=\"buttonCheck\"\r\n          [configButton]=\"buttonCheckTimeEquipment\"\r\n          (click)=\"checkEquipment()\"\r\n        ></brc-button>\r\n      </div>\r\n      <div style=\"margin-top: 10px;\">\r\n        <input type=\"text\" disabled [(ngModel)]=\"equipmentsString\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-6\">\r\n      <brc-button\r\n        class=\"buttonCancel\"\r\n        [configButton]=\"buttonCancel\"\r\n        (click)=\"cancel()\"\r\n      ></brc-button>\r\n      <brc-button\r\n        class=\"buttonAdd\"\r\n        [configButton]=\"buttonAdd\"\r\n        (click)=\"submit()\"\r\n      ></brc-button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AddSchedulePageComponent",
            "id": "component-AddSchedulePageComponent-b99ad4bce3b11463f2031aa85a179797",
            "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-add-schedule-page",
            "styleUrls": [
                "./add-schedule-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-schedule-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "AddSchedule",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectEquipment",
                    "defaultValue": "selectEquipmentFake",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectImportant",
                    "defaultValue": "selectImportantFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMonthly",
                    "defaultValue": "selectMonthlyFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectTypeSchedule",
                    "defaultValue": "selectTypeScheduleFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectUserIds",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectWeekly",
                    "defaultValue": "selectWeeklyFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "AddSchedule",
                    "args": [
                        {
                            "name": "data",
                            "type": "AddSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "AddSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CancelSchedule",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CheckFreeTimeEquipment",
                    "args": [
                        {
                            "name": "data",
                            "type": "CheckFreeTimeParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CheckFreeTimeParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n  CheckEquipmentSuccess,\r\n  ESchedule,\r\n  ScheduleAddFail,\r\n  ScheduleAddSuccess,\r\n} from '../../store/actions/schedule.action';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n} from '../../store/models/add-schedule.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport { UserService } from '../../store/services/user.service';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\n@Component({\r\n  selector: 'brc-add-schedule-page',\r\n  templateUrl: './add-schedule-page.component.html',\r\n  styleUrls: ['./add-schedule-page.component.scss'],\r\n})\r\nexport class AddSchedulePageComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$ = new Subject<void>();\r\n  public selectTypeSchedule: LabelledValue<string>[] = selectTypeScheduleFake;\r\n  public selectImportant: LabelledValue<string>[] = selectImportantFake;\r\n  public selectWeekly: LabelledValue<string>[] = selectWeeklyFake;\r\n  public selectMonthly: LabelledValue<string>[] = selectMonthlyFake;\r\n  public selectUserIds: Category[] = [];\r\n  public selectEquipment: Category[] = selectEquipmentFake;\r\n  public data: AddSchedule;\r\n  constructor(\r\n    private storeFacade: StoreFacade,\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private _snackBar: MatSnackBar,\r\n    private userService: UserService\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.userService.getAllUser().subscribe((data) => {\r\n      if (data !== undefined && data != []) {\r\n        this.selectUserIds = data.map((item) => {\r\n          let category: Category = {\r\n            categoryId: item.id,\r\n            categoryName: item.fullName,\r\n          };\r\n          return category;\r\n        });\r\n      }\r\n    });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<ScheduleAddSuccess>(ESchedule.ADD_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.router.navigate(['/schedule']);\r\n        this.openSnackBar('Add Schedule Success !!!', 'Success!!');\r\n      });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<ScheduleAddFail>(ESchedule.ADD_FAIL),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.openSnackBar('Add Schedule Fail !!!', 'Failed!!');\r\n      });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<CheckEquipmentSuccess>(ESchedule.CHECK_EQUIPMENT_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((res) => {\r\n        let notification: string = '';\r\n        if (res.payload.list.count == 0) {\r\n          notification = 'OK';\r\n          this.openSnackBar('Check Equipment', notification);\r\n        } else {\r\n          for (let i = 0; i < res.payload.list.records.length; i++) {\r\n            for (let j = 0; j < selectEquipmentFake.length; j++) {\r\n              if (\r\n                res.payload.list.records[i].equipment_id ===\r\n                selectEquipmentFake[j].categoryId\r\n              ) {\r\n                notification += selectEquipmentFake[j].categoryName + ' ';\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          this.openSnackBar('Check Equipment', notification);\r\n        }\r\n      });\r\n  }\r\n  openSnackBar(message: string, action: string) {\r\n    this._snackBar.open(message, action, {\r\n      duration: 1500,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n  AddSchedule(data: AddSchedule) {\r\n    this.data = data;\r\n    this.storeFacade.addSchedule(this.data);\r\n  }\r\n  CheckFreeTimeEquipment(data: CheckFreeTimeParams) {\r\n    console.log(data);\r\n    this.storeFacade.checkEquipment(data);\r\n  }\r\n  CancelSchedule(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n}\r\nconst selectTypeScheduleFake: LabelledValue<string>[] = [\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n];\r\nconst selectImportantFake: LabelledValue<string>[] = [\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n];\r\n\r\nconst selectWeeklyFake: LabelledValue<string>[] = [\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n];\r\n\r\nlet selectMonthlyFake: LabelledValue<string>[] = [];\r\n\r\nconst nth = (d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n};\r\nconst dates = [...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n});\r\n\r\nselectMonthlyFake.push({\r\n  label: `last of month`,\r\n  value: `lastOfMonth`,\r\n});\r\n\r\nconst selectEquipmentFake: Category[] = [\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content {\r\n  margin-left: 14%;\r\n  margin-right: 14%;\r\n}\r\n",
                    "styleUrl": "./add-schedule-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"content\">\r\n  <brc-add-schedule\r\n    [selectTypeSchedule]=\"selectTypeSchedule\"\r\n    [selectImportant]=\"selectImportant\"\r\n    [selectWeekly]=\"selectWeekly\"\r\n    [selectMonthly]=\"selectMonthly\"\r\n    [selectUserIds]=\"selectUserIds\"\r\n    [selectEquipment]=\"selectEquipment\"\r\n    (checkFreeTimeEquipment)=\"CheckFreeTimeEquipment($event)\"\r\n    (addSubmit)=\"AddSchedule($event)\"\r\n    (addCancel)=\"CancelSchedule($event)\"\r\n  ></brc-add-schedule>\r\n</div>\r\n"
        },
        {
            "name": "AddTodoComponent",
            "id": "component-AddTodoComponent-947a4f8da9b68fbb1292fc823f8312cf",
            "file": "src/app/shared/components/add-todo/add-todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-add-todo",
            "styleUrls": [
                "./add-todo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "CategoryArray",
                    "defaultValue": "[]",
                    "line": 96,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }",
                    "line": 45,
                    "type": "configButton"
                },
                {
                    "name": "configButtonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }",
                    "line": 52,
                    "type": "configButton"
                },
                {
                    "name": "ImportanceArray",
                    "defaultValue": "[]",
                    "line": 97,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelCategory",
                    "defaultValue": "\"Category\"",
                    "line": 43,
                    "type": "string"
                },
                {
                    "name": "LabelCategory",
                    "defaultValue": "{\r\n    content: \"Category\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 18,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDatePicker",
                    "defaultValue": "{\r\n    content: \"DatePicker\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 24,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDescription",
                    "defaultValue": "{\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 36,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelImportance",
                    "defaultValue": "\"Importance\"",
                    "line": 44,
                    "type": "string"
                },
                {
                    "name": "LabelImportance",
                    "defaultValue": "{\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 30,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelTodoName",
                    "defaultValue": "{\r\n    content: \"Todo Name\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 12,
                    "type": "LabelInterface"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Todo Description\"",
                    "line": 42,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "addTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 98,
                    "type": "EventEmitter"
                },
                {
                    "name": "cancelTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 99,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colSpan",
                    "defaultValue": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelHeader",
                    "defaultValue": "{\r\n    content: 'Add new todo',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "todoCategory",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDatePicker",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoImportant",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116
                },
                {
                    "name": "changeValueTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "onsubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100
                },
                {
                    "name": "setCategory",
                    "args": [
                        {
                            "name": "Category",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "Category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDatePicker",
                    "args": [
                        {
                            "name": "datePicker",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "datePicker",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImportant",
                    "args": [
                        {
                            "name": "Important",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "Important",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 132
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { addTodoValue } from '../../../store/models/addtodo.i';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\n@Component({\r\n  selector: 'brc-add-todo',\r\n  templateUrl: './add-todo.component.html',\r\n  styleUrls: ['./add-todo.component.scss']\r\n})\r\nexport class AddTodoComponent implements OnInit {\r\n  @Input() LabelTodoName: LabelInterface = {\r\n    content: \"Todo Name\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelCategory: LabelInterface = {\r\n    content: \"Category\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDatePicker: LabelInterface = {\r\n    content: \"DatePicker\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelImportance: LabelInterface = {\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDescription: LabelInterface = {\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() placeholder: string = \"Todo Description\"\r\n  @Input() labelCategory: string = \"Category\";\r\n  @Input() labelImportance: string = \"Importance\";\r\n  @Input() configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }\r\n  @Input() configButtonCancel: configButton = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }\r\n  labelHeader: LabelInterface = {\r\n    content: 'Add new todo',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  getToDate(data) {\r\n    this.valueGetToDate = data;\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (window.innerWidth > 834) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n  public todoName: string;\r\n  public todoCategory: number;\r\n  public todoDatePicker: string;\r\n  public todoImportant: string;\r\n  public todoDescription: string;\r\n  public userId : number =1;\r\n  public colSpan: number = 2;\r\n  public valueGetToDate: string = '';\r\n  @Input() CategoryArray: LabelledValue<string>[] = [];\r\n  @Input() ImportanceArray: LabelledValue<string>[] = [];\r\n  @Output() addTodo = new EventEmitter();\r\n  @Output() cancelTodo = new EventEmitter();\r\n  onsubmit() {\r\n    let addTodoModel: addTodoValue = {\r\n      todoName: this.todoName,\r\n      todoCategoryId: this.todoCategory,\r\n      deadline: this.valueGetToDate === ''\r\n      ? undefined\r\n      : this.valueGetToDate+\"T00:00:00.000Z\",\r\n      importance: this.todoImportant,\r\n      description: this.todoDescription,\r\n      userId : this.userId,\r\n    };\r\n    this.addTodo.emit(addTodoModel);\r\n  }\r\n  changeValueTodo(data : string){\r\n    this.todoName = data;\r\n  }\r\n  cancel(){\r\n    this.cancelTodo.emit('/todo');\r\n  }\r\n  setCategory(Category: string) {\r\n    this.todoCategory = Number(Category);\r\n  }\r\n  setImportant(Important: string) {\r\n    this.todoImportant = Important;\r\n  }\r\n  setDatePicker(datePicker: string) {\r\n    this.todoDatePicker = datePicker;\r\n  }\r\n  setDescription(description: string) {\r\n    this.todoDescription = description;\r\n  }\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event?) {\r\n    if (window.innerWidth > 834) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-grid-list{\r\n    border: solid 1px lightgray;\r\n}\r\nmat-grid-tile{\r\n    overflow: unset !important;\r\n}\r\n.container {\r\n    padding: 1%;\r\n  }\r\n.header {\r\n    padding: 10px;\r\n    margin: 10px;\r\n    margin-bottom: 40px;\r\n}\r\n.input{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.inputTodoName{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.labelTodoName{\r\n    margin : 15px 0 0px -8px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\n.label\r\n{\r\n    margin : 15px 0 0px 20px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\ninput:focus , .text-area:focus {\r\n    border: none;\r\n    box-shadow: none;\r\n    outline: none;\r\n}\r\n.text-area {\r\n    width: 75%;\r\n    height: 100%;\r\n    margin : 50px 0px 0px 20px\r\n}\r\n.button\r\n{\r\n    margin: 20px 50px 0px 50px;\r\n}\r\n.icon\r\n{\r\n    cursor: pointer;\r\n}\r\n@media (max-width:834px)\r\n{\r\n    .input{\r\n        width:50%\r\n    }\r\n    .label{\r\n        width: 25%;\r\n        margin : 0px 0 0 10px;\r\n    }\r\n    .labelTodoName{\r\n        width: 25%;\r\n        margin : 0px 0 0 -10.5px;\r\n    }\r\n    .text-area\r\n    {\r\n        width: 50%;\r\n        margin : 50px 0px 0 20px\r\n    }\r\n}\r\n@media (max-width:325)\r\n{\r\n    .button{\r\n        margin: 20px 0px 0px 0px!important;\r\n    }\r\n}\r\n.inputDate{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n",
                    "styleUrl": "./add-todo.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 67
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n<div class=\"header\">\r\n  <brc-label [label]=\"labelHeader\"></brc-label>\r\n</div>\r\n<form class=\"content\" name=\"form\" #f=\"ngForm\">\r\n  <mat-grid-list cols=\"4\" rowHeight=\"100px\">\r\n    <mat-grid-tile [colspan]=\"colSpan\" [rowspan]=\"1\" class=\"form-group\">\r\n      <brc-label [label]=\"LabelTodoName\" class=\"labelTodoName\"></brc-label>\r\n      <!-- <div *ngIf=\"f.submitted && todoName.invalid\" class=\"invalid-feedback\">\r\n        <div *ngIf=\"todoName.errors.required\">Todo Name is required</div>\r\n      </div> -->\r\n      <mat-form-field class=\"inputTodoName\">\r\n        <mat-label *ngIf=\"f.submitted && todoName.invalid\">Todo Name is required</mat-label>\r\n        <mat-label *ngIf=\"!f.submitted || todoName.valid\">Todo Name</mat-label>\r\n        <input\r\n          matInput\r\n          placeholder=\"Todo Name\"\r\n          (ngModel)=\"todoName\"\r\n          name=\"todoName\"\r\n          [value]=\"todoName\"\r\n          #todoName=\"ngModel\"\r\n          [ngClass]=\"{ 'is-invalid': f.submitted && todoName.invalid }\"\r\n          (ngModelChange)=\"changeValueTodo($event)\"\r\n          required\r\n        />\r\n      </mat-form-field>\r\n\r\n    </mat-grid-tile>\r\n    <mat-grid-tile [colspan]=\"colSpan\">\r\n      <brc-label [label]=\"LabelCategory\" class=\"label\"></brc-label>\r\n      <brc-app-select\r\n        [data]=\"CategoryArray\"\r\n        [label]=\"labelCategory\"\r\n        class=\"input\"\r\n        (getValue)=\"setCategory($event)\"\r\n      >\r\n      </brc-app-select>\r\n      <mat-icon aria-hidden=\"false\" class=\"icon\">add</mat-icon>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile [colspan]=\"colSpan\">\r\n      <brc-label [label]=\"LabelDatePicker\" class=\"label\"></brc-label>\r\n      <brc-date-picker class=\"inputDate\" \r\n          (getDate) = \"getToDate($event)\"\r\n      ></brc-date-picker>\r\n      <mat-icon aria-hidden=\"false\" class=\"icon\"></mat-icon>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile [colspan]=\"colSpan\">\r\n      <brc-label [label]=\"LabelImportance\" class=\"label\"></brc-label>\r\n      <brc-app-select\r\n        [data]=\"ImportanceArray\"\r\n        [label]=\"labelImportance\"\r\n        class=\"input\"\r\n        (getValue)=\"setImportant($event)\"\r\n      >\r\n      </brc-app-select>\r\n      <mat-icon aria-hidden=\"false\" class=\"icon\"></mat-icon>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile [colspan]=\"4\" [rowspan]=\"2\" layout-align=\"center center\">\r\n      <brc-label [label]=\"LabelDescription\" class=\"label\"></brc-label>\r\n      <brc-textarea\r\n        [placeholder]=\"placeholder\"\r\n        class=\"text-area\"\r\n        (value)=\"setDescription($event)\"\r\n      ></brc-textarea>\r\n      <mat-icon aria-hidden=\"false\" class=\"icon\"></mat-icon>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile [colspan]=\"4\">\r\n      <brc-button\r\n        [configButton]=\"configButtonAdd\"\r\n        class=\"button\"\r\n        (click)=\"onsubmit()\"\r\n      ></brc-button>\r\n      <brc-button\r\n        [configButton]=\"configButtonCancel\"\r\n        class=\"button\"\r\n        (click)=\"cancel()\"\r\n      ></brc-button>\r\n    </mat-grid-tile>\r\n  </mat-grid-list>\r\n</form>\r\n</div>\r\n"
        },
        {
            "name": "AddTodoPageComponent",
            "id": "component-AddTodoPageComponent-3d5db140aeb79ef2ba336262813d59e9",
            "file": "src/app/modules/add-todo-page/add-todo-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-todo-page",
            "styleUrls": [
                "./add-todo-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-todo-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CategoryArray",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "configButtonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'reset',\r\n    text: 'Cancel!',\r\n  }",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "data",
                    "type": "addTodoValue",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dataCategory",
                    "defaultValue": "[]",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ImportanceArray",
                    "defaultValue": "[\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ]",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "LabelDatePicker",
                    "defaultValue": "{\r\n    content: 'Deadline',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "onAddTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "addTodoValue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "addTodoValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n  ETodo,\r\n  TodoAddFail,\r\n  TodoAddSuccess,\r\n} from '../../store/actions/todo.action';\r\nimport { addTodoValue } from '../../store/models/addtodo.i';\r\nimport { configButton } from '../../store/models/button.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { LabelInterface } from '../../store/models/label.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport { StoreFacade } from '../../store/store-facades/todo.store-facade';\r\n@Component({\r\n  selector: 'app-add-todo-page',\r\n  templateUrl: './add-todo-page.component.html',\r\n  styleUrls: ['./add-todo-page.component.scss'],\r\n})\r\nexport class AddTodoPageComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$ = new Subject<void>();\r\n  constructor(\r\n    private storeFacade: StoreFacade,\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private _snackBar: MatSnackBar\r\n  ) {}\r\n  ngOnInit() {\r\n    this.storeFacade.getValueTodoTablePage().subscribe((todo) => {\r\n      this.CategoryArray = todo.listCategory;\r\n      this.dataCategory = [];\r\n      if (typeof this.CategoryArray != 'undefined' && this.CategoryArray.length >0) {\r\n          this.CategoryArray.forEach((e) => {\r\n            let category: LabelledValue<string> = {\r\n              value: String(e.categoryId),\r\n              label: e.categoryName,\r\n            };\r\n            this.dataCategory.push(category);\r\n          });\r\n      }\r\n    });\r\n\r\n    // navigate when success\r\n    this.actions$\r\n      .pipe(\r\n        ofType<TodoAddSuccess>(ETodo.ADD_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.router.navigate(['/todo']);\r\n        this.openSnackBar('Add Success !!!','Success !!!');\r\n      });\r\n    // alert when add fail\r\n    this.actions$\r\n      .pipe(ofType<TodoAddFail>(ETodo.ADD_FAIL), takeUntil(this.unsubscribe$))\r\n      .subscribe(() => {\r\n        this.openSnackBar('Add Fail !!!','Fail !!!');\r\n      });\r\n  }\r\n  openSnackBar(message: string,action : string) {\r\n    this._snackBar.open(message, action, {\r\n      duration: 1500,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n  ngOnDestroy() {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n  public dataCategory: LabelledValue<string>[] = [];\r\n  public data: addTodoValue;\r\n  public LabelDatePicker: LabelInterface = {\r\n    content: 'Deadline',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n\r\n  public configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  };\r\n  public configButtonCancel: configButton = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'reset',\r\n    text: 'Cancel!',\r\n  };\r\n\r\n  public CategoryArray: Category[] = [];\r\n  public ImportanceArray: LabelledValue<string>[] = [\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ];\r\n\r\n  onAddTodo(data: addTodoValue) {\r\n    this.data = data;\r\n    this.storeFacade.addTodo(this.data);\r\n  }\r\n  cancelTodo(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-add {\r\n    margin: 20px;\r\n}\r\n\r\n.label {\r\n    padding-bottom: 20px;\r\n}\r\n.content {\r\n    margin-left: 14%;\r\n    margin-right: 14%;\r\n  }\r\n",
                    "styleUrl": "./add-todo-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"content\">\r\n<brc-add-todo\r\n  [CategoryArray]=\"dataCategory\"\r\n  [ImportanceArray]=\"ImportanceArray\"\r\n  [LabelDatePicker]=\"LabelDatePicker\"\r\n  [configButtonAdd]=\"configButtonAdd\"\r\n  [configButtonCancel]=\"configButtonCancel\"\r\n  (addTodo)=\"onAddTodo($event)\"\r\n  (cancelTodo)=\"cancelTodo($event)\"\r\n>\r\n</brc-add-todo>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-69ba488069dfe240be4bb7f9dc946954",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport * as XLSX from 'xlsx';\r\nconst { read, write, utils } = XLSX;\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\r\n"
        },
        {
            "name": "BottomActionComponent",
            "id": "component-BottomActionComponent-3b2fd33869b177b95bc39127b6624128",
            "file": "src/app/shared/components/calendar/bottom-action/bottom-action.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-bottom-action",
            "styleUrls": [
                "./bottom-action.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bottom-action.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_BOTTOM_SHEET_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dataEvent",
                    "type": "CalendarEvent",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CalendarEvent } from 'angular-calendar';\r\nimport { Component, OnInit, Inject } from '@angular/core';\r\nimport {\r\n  MatBottomSheetRef,\r\n  MAT_BOTTOM_SHEET_DATA,\r\n} from '@angular/material/bottom-sheet';\r\n\r\n@Component({\r\n  selector: 'brc-bottom-action',\r\n  templateUrl: './bottom-action.component.html',\r\n  styleUrls: ['./bottom-action.component.scss'],\r\n})\r\nexport class BottomActionComponent implements OnInit {\r\n  constructor(\r\n    private bottomSheetRef: MatBottomSheetRef<BottomActionComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) public data: any\r\n  ) {}\r\n\r\n  name: string;\r\n  dataEvent: CalendarEvent;\r\n  ngOnInit() {\r\n    this.dataEvent = this.data;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".bottom-sheet {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 50px;\r\n  background-color: #3f51b5;\r\n  padding: 15px 30px;\r\n}\r\n.bottom-sheet div {\r\n  flex: 1;\r\n  color: white;\r\n}\r\nbutton {\r\n  color: #ffffff !important;\r\n  margin-top: 10px;\r\n}\r\nbutton.change {\r\n  color: white !important;\r\n}\r\n.center {\r\n  vertical-align: middle;\r\n}\r\n.outer-div {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.title {\r\n  font-weight: 500;\r\n}\r\n.subtitle {\r\n  font-weight: 300;\r\n}\r\n",
                    "styleUrl": "./bottom-action.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<BottomActionComponent>"
                    },
                    {
                        "name": "data",
                        "type": "any"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "bottomSheetRef",
                        "type": "MatBottomSheetRef<BottomActionComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"bottom-sheet\">\r\n  <span\r\n    class=\"cal-event\"\r\n    [style.backgroundColor]=\"dataEvent.color?.primary\"\r\n    style=\"\r\n      display: inline-block;\r\n      padding: 5px;\r\n      border-radius: 50%;\r\n      margin-right: 10px;\r\n    \"\r\n  ></span>\r\n  <div class=\"outer-div\">\r\n    <span class=\"title\"\r\n      >{{ dataEvent.title }} - {{ dataEvent.meta.scheduleCategoryName }}</span\r\n    >\r\n    <span class=\"subtile\"\r\n      >{{ dataEvent.start | date: \"dd/MM/yyyy hh:mm a\" }} -\r\n      {{ dataEvent.end | date: \"dd/MM/yyyy hh:mm a\" }}</span\r\n    >\r\n    <span class=\"subtile\">{{ dataEvent.meta.description }}</span>\r\n  </div>\r\n  <button\r\n    class=\"button-action center\"\r\n    *ngFor=\"let action of dataEvent.actions\"\r\n    mat-button\r\n    type=\"button\"\r\n    (mwlClick)=\"action.onClick({ event: dataEvent })\"\r\n    [ngClass]=\"action.cssClass\"\r\n    [innerHtml]=\"action.label\"\r\n  ></button>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-ab51d10713604aac9d8135fe0c97a9e2",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configButton",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Click me!',\r\n  }",
                    "line": 16,
                    "type": "configButton"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClickEmt",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "'true'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "defaultColor",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "defaultColorOver",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "onBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\n\r\n@Component({\r\n  selector: 'brc-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent {\r\n  constructor() {\r\n    this.defaultColor = this.configButton.colorButton;\r\n    this.defaultColorOver = this.configButton.colorMouseOver;\r\n  }\r\n\r\n  @Output() btnClickEmt: EventEmitter<string> = new EventEmitter<string>();\r\n  @Input() configButton: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'warn',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Click me!',\r\n  };\r\n  defaultColor;\r\n  defaultColorOver;\r\n  active = 'true';\r\n  \r\n  onBtnClick() {\r\n    if (this.active == 'true') {\r\n      this.configButton.colorMouseOut = this.configButton.colorMouseOver;\r\n      this.active = 'false';\r\n      this.configButton.colorMouseOver = this.defaultColor;\r\n      this.btnClickEmt.emit(this.configButton.type);\r\n      return 0;\r\n    } else {\r\n      this.configButton.colorMouseOut = this.defaultColor;\r\n      this.active = 'true';\r\n      this.configButton.colorMouseOver = this.defaultColorOver;\r\n      this.btnClickEmt.emit(this.configButton.type);\r\n      return 0;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-raised-button {\r\n    position: relative;\r\n    min-width: 64px;\r\n    font-family: sans-serif;\r\n    font-size: 15px;\r\n    border-radius: 10px;\r\n    margin-top: 0;\r\n    line-height: 40px;\r\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<button mat-raised-button [color]=\"configButton.colorButton\" (mouseover)=\"configButton.colorButton = configButton.colorMouseOver\" (mouseout)=\"configButton.colorButton = configButton.colorMouseOut\" (click)=\"onBtnClick()\" type=\"{{configButton.type}}\">\r\n  {{ configButton.text }}\r\n</button>"
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-6b9fe2325d58f05bbb071ec95a38212a",
            "file": "src/app/shared/components/button-group/button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-button-group",
            "styleUrls": [
                "./button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonGroup",
                    "line": 14,
                    "type": "IButtonGroup<string>[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueButtonGroup",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "change",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatButtonToggleChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatButtonToggleChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { IButtonGroup } from './../../../store/models/button-group.i';\r\nimport { MenuItem } from '../../../store/models/menu-item.i';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatButtonToggleChange } from '@angular/material/button-toggle';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'brc-button-group',\r\n  templateUrl: './button-group.component.html',\r\n  styleUrls: ['./button-group.component.scss'],\r\n})\r\nexport class ButtonGroupComponent implements OnInit {\r\n  value: string;\r\n  @Input() buttonGroup: IButtonGroup<string>[];\r\n  @Output() valueButtonGroup: EventEmitter<string> = new EventEmitter();\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  change(event: MatButtonToggleChange) {\r\n    this.value = event.value;\r\n    this.valueButtonGroup.emit(event.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~@angular/material/theming\";\r\n@include mat-core();\r\n$app-primary: mat-palette($mat-grey, A100);\r\n$app-accent: mat-palette($mat-blue, A200, A100, A400);\r\n$app-theme: mat-light-theme($app-primary, $app-accent);\r\n@mixin mix-app-theme($app-theme) {\r\n    $primary: map-get($app-theme, primary);\r\n    $accent: map-get($app-theme, accent);\r\n    .mat-button-toggle {\r\n        background-color: mat-color($primary);\r\n        color: mat-color($primary, default-contrast);\r\n    }\r\n    .mat-button-toggle-checked {\r\n        background-color: mat-color($accent);\r\n        color: mat-color($accent, default-contrast);\r\n    }\r\n}\r\n\r\n@include mix-app-theme($app-theme);",
                    "styleUrl": "./button-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-button-toggle-group data-test=\"submit-action\" [value]=\"value\" (change)=\"change($event)\">\r\n  <mat-button-toggle *ngFor=\"let option of buttonGroup\" [value]=\"option.value\">\r\n    {{ option.displayValue }}\r\n  </mat-button-toggle>\r\n</mat-button-toggle-group>\r\n"
        },
        {
            "name": "CalendarComponent",
            "id": "component-CalendarComponent-7f463f48cce3d39839d6fd002c5ee551",
            "file": "src/app/shared/components/calendar/calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "events$",
                    "line": 87,
                    "type": "Observable<CalendarEvent[]>"
                },
                {
                    "name": "scrollbar",
                    "line": 88,
                    "type": "NgScrollbar"
                },
                {
                    "name": "selectedDay",
                    "line": 90,
                    "type": "any"
                },
                {
                    "name": "view",
                    "defaultValue": "'month'",
                    "line": 91,
                    "type": "\"month\" | \"week\" | \"day\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onDayClick",
                    "defaultValue": "new EventEmitter()",
                    "line": 79,
                    "type": "EventEmitter<Date>"
                },
                {
                    "name": "onEventClick",
                    "defaultValue": "new EventEmitter()",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onMonthChange",
                    "defaultValue": "new EventEmitter<Date>()",
                    "line": 81,
                    "type": "EventEmitter<Date>"
                },
                {
                    "name": "viewDateChange",
                    "defaultValue": "new EventEmitter<Date>()",
                    "line": 83,
                    "type": "EventEmitter<Date>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activeDayIsOpen",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "bottomSheet",
                    "type": "MatBottomSheet",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "COLORS",
                    "defaultValue": "[\r\n    { primary: '#1e90ff', secondary: '#D1E8FF' },\r\n    { primary: '#39c052', secondary: '#c1f4be' },\r\n    { primary: '#ad2121', secondary: '#f2b5b5' },\r\n    { primary: '#4f4f4f', secondary: '#c2c2c2' },\r\n  ]",
                    "type": "EventColor[]",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "curr",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'currentTimeMarkerTemplate', {static: false}"
                        }
                    ]
                },
                {
                    "name": "daysInWeek",
                    "defaultValue": "7",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "panelOpenState",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "refresh",
                    "defaultValue": "new Subject()",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "scrollContainer",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'scrollContainer'"
                        }
                    ]
                },
                {
                    "name": "viewDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "visibilityScroll",
                    "defaultValue": "'hover'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "weekendDays",
                    "defaultValue": "[DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "weekStartsOn",
                    "defaultValue": "DAYS_OF_WEEK.MONDAY",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 84
                }
            ],
            "methodsClass": [
                {
                    "name": "beforeMonthViewRender",
                    "args": [
                        {
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "castToHoursAndminutes",
                    "args": [
                        {
                            "name": "start",
                            "type": "Date"
                        },
                        {
                            "name": "end",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 198,
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeScroll",
                    "args": [
                        {
                            "name": "x",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "jsdoctags": [
                        {
                            "name": "x",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dayClicked",
                    "args": [
                        {
                            "name": "day",
                            "type": "CalendarMonthViewDay"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "description": "<p>Day clicked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4611,
                                "end": 4614,
                                "flags": 0,
                                "escapedText": "day"
                            },
                            "type": "CalendarMonthViewDay",
                            "tagName": {
                                "pos": 4590,
                                "end": 4595,
                                "flags": 0,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 4596,
                                "end": 4610,
                                "flags": 0,
                                "kind": 277,
                                "type": {
                                    "pos": 4597,
                                    "end": 4609,
                                    "flags": 2097152,
                                    "kind": 161,
                                    "typeName": {
                                        "pos": 4597,
                                        "end": 4609,
                                        "flags": 2097152,
                                        "escapedText": "MonthViewDay"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "name": "eventTimesChanged",
                    "args": [
                        {
                            "type": "CalendarEventTimesChangedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "description": "<p>Event times changed\nEvent dropped or resized</p>\n",
                    "jsdoctags": [
                        {
                            "type": "CalendarEventTimesChangedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97
                },
                {
                    "name": "openBottomSheet",
                    "args": [
                        {
                            "name": "folder",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "jsdoctags": [
                        {
                            "name": "folder",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scrollTo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203
                },
                {
                    "name": "viewDateChangeNextTodayPrevious",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { BottomActionComponent } from './bottom-action/bottom-action.component';\r\nimport { Subject, of, Observable } from 'rxjs';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ElementRef,\r\n  Inject,\r\n  ContentChild,\r\n  TemplateRef,\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  ChangeDetectionStrategy,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { collapseAnimation } from 'angular-calendar';\r\nimport {\r\n  CalendarEvent,\r\n  CalendarEventAction,\r\n  CalendarEventTimesChangedEvent,\r\n  CalendarMonthViewDay,\r\n  DAYS_OF_WEEK,\r\n} from 'angular-calendar';\r\nimport {\r\n  addDays,\r\n  endOfMonth,\r\n  getHours,\r\n  isSameDay,\r\n  isSameMonth,\r\n  startOfDay,\r\n  subDays,\r\n  getMinutes,\r\n  differenceInMinutes,\r\n  startOfHour,\r\n} from 'date-fns';\r\nimport { addHours } from 'date-fns/esm';\r\nimport { EventColor } from 'calendar-utils';\r\nimport { NgScrollbar } from 'ngx-scrollbar';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\r\nimport { takeUntil, tap } from 'rxjs/operators';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'brc-calendar',\r\n  templateUrl: './calendar.component.html',\r\n  styleUrls: ['./calendar.component.scss'],\r\n  animations: [collapseAnimation],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CalendarComponent implements OnInit, OnDestroy {\r\n  static COLORS: EventColor[] = [\r\n    { primary: '#1e90ff', secondary: '#D1E8FF' },\r\n    { primary: '#39c052', secondary: '#c1f4be' },\r\n    { primary: '#ad2121', secondary: '#f2b5b5' },\r\n    { primary: '#4f4f4f', secondary: '#c2c2c2' },\r\n  ];\r\n  constructor(\r\n    @Inject(DOCUMENT) document,\r\n    private breakpointObserver: BreakpointObserver,\r\n    private cd: ChangeDetectorRef,\r\n    public bottomSheet: MatBottomSheet\r\n  ) {\r\n    // Set the defaults\r\n    this.viewDate = new Date();\r\n    this.activeDayIsOpen = false;\r\n    this.selectedDay = { date: startOfDay(new Date()) };\r\n  }\r\n  @ViewChild('currentTimeMarkerTemplate', { static: false }) curr: TemplateRef<\r\n    any\r\n  >;\r\n  @ViewChild('scrollContainer') scrollContainer: ElementRef<HTMLElement>;\r\n  @Output() onDayClick: EventEmitter<Date> = new EventEmitter();\r\n  @Output() onEventClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onMonthChange: EventEmitter<Date> = new EventEmitter<Date>();\r\n\r\n  @Output() viewDateChange: EventEmitter<Date> = new EventEmitter<Date>();\r\n  weekStartsOn: number = DAYS_OF_WEEK.MONDAY;\r\n  weekendDays: number[] = [DAYS_OF_WEEK.FRIDAY, DAYS_OF_WEEK.SATURDAY];\r\n  activeDayIsOpen: boolean;\r\n  @Input() events$: Observable<CalendarEvent[]>;\r\n  @Input() scrollbar: NgScrollbar;\r\n  refresh: Subject<any> = new Subject();\r\n  @Input() selectedDay: any;\r\n  @Input() view: 'month' | 'week' | 'day' = 'month';\r\n  viewDate: Date;\r\n  panelOpenState = false;\r\n  visibilityScroll = 'hover';\r\n  daysInWeek = 7;\r\n  destroy$ = new Subject();\r\n  ngOnInit(): void {\r\n    //Responsive week view\r\n    const CALENDAR_RESPONSIVE = {\r\n      small: {\r\n        breakpoint: '(max-width: 576px)',\r\n        daysInWeek: 2,\r\n      },\r\n      medium: {\r\n        breakpoint: '(max-width: 768px)',\r\n        daysInWeek: 3,\r\n      },\r\n      large: {\r\n        breakpoint: '(max-width: 960px)',\r\n        daysInWeek: 5,\r\n      },\r\n    };\r\n    this.breakpointObserver\r\n      .observe(\r\n        Object.values(CALENDAR_RESPONSIVE).map(({ breakpoint }) => breakpoint)\r\n      )\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((state: BreakpointState) => {\r\n        const foundBreakpoint = Object.values(CALENDAR_RESPONSIVE).find(\r\n          ({ breakpoint }) => !!state.breakpoints[breakpoint]\r\n        );\r\n        if (foundBreakpoint) {\r\n          this.daysInWeek = foundBreakpoint.daysInWeek;\r\n        } else {\r\n          this.daysInWeek = 7;\r\n        }\r\n        this.cd.markForCheck();\r\n      });\r\n    /**\r\n     * Watch re-render-refresh for updating db\r\n     */\r\n    this.selectedDay = { date: new Date() };\r\n  }\r\n  beforeMonthViewRender({ header, body }): void {\r\n    /**\r\n     * Get the selected day\r\n     */\r\n\r\n    const _selectedDay = body.find((_day) => {\r\n      return _day.date.getTime() === this.selectedDay.date.getTime();\r\n    });\r\n\r\n    if (_selectedDay) {\r\n      /**\r\n       * Set selected day style\r\n       * @type {string}\r\n       */\r\n      _selectedDay.cssClass = 'cal-selected';\r\n    }\r\n  }\r\n  /**\r\n   * Day clicked\r\n   *\r\n   * @param {MonthViewDay} day\r\n   */\r\n  dayClicked(day: CalendarMonthViewDay): void {\r\n    const date: Date = day.date;\r\n    const events: CalendarEvent[] = day.events;\r\n    if (isSameMonth(date, this.viewDate)) {\r\n      if (\r\n        (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\r\n        events.length === 0\r\n      ) {\r\n        this.activeDayIsOpen = false;\r\n      } else {\r\n        this.activeDayIsOpen = true;\r\n        this.viewDate = date;\r\n      }\r\n    }\r\n    this.selectedDay = day;\r\n    this.refresh.next();\r\n    this.onDayClick.emit(date);\r\n  }\r\n  /**\r\n   * Event times changed\r\n   * Event dropped or resized\r\n   *\r\n   * @param {CalendarEvent} event\r\n   * @param {Date} newStart\r\n   * @param {Date} newEnd\r\n   */\r\n  eventTimesChanged({\r\n    event,\r\n    newStart,\r\n    newEnd,\r\n  }: CalendarEventTimesChangedEvent): void {\r\n    event.start = newStart;\r\n    event.end = newEnd;\r\n    // console.warn('Dropped or resized', event);\r\n    this.refresh.next(true);\r\n  }\r\n\r\n  viewDateChangeNextTodayPrevious(date) {\r\n    this.selectedDay = { date };\r\n    this.viewDateChange.emit(date);\r\n  }\r\n\r\n  castToHoursAndminutes(start: Date, end: Date): string {\r\n    return `${getHours(start)}:${getMinutes(start)} - ${getHours(\r\n      end\r\n    )}:${getMinutes(end)}`;\r\n  }\r\n  scrollTo() {\r\n    this.cd.detectChanges();\r\n    if (this.view === 'week' || this.view === 'day') {\r\n      const minutesSinceStartOfDay = differenceInMinutes(\r\n        startOfHour(new Date()),\r\n        startOfDay(new Date())\r\n      );\r\n      const headerHeight = this.view === 'week' ? 30 : 0;\r\n      if (this.scrollbar) {\r\n        setTimeout(() => {\r\n          this.scrollbar.scrollTo({\r\n            top: minutesSinceStartOfDay + headerHeight,\r\n            duration: 0,\r\n          });\r\n        }, 300);\r\n      }\r\n    }\r\n  }\r\n  changeScroll(x) {}\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n  }\r\n  openBottomSheet(folder) {\r\n    let sheetRef = this.bottomSheet.open(BottomActionComponent, {\r\n      data: folder,\r\n    });\r\n    sheetRef.afterDismissed();\r\n    //   .subscribe((data) => {\r\n    //   console.log('after close data :', data);\r\n    //   if (data && data.message == 'Cancel') {\r\n    //     alert('Cancel was clicked in bottomsheet');\r\n    //   }\r\n    //   if (data && data.message == 'Status') {\r\n    //     alert('Change Status was clicked in bottomsheet');\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"~@angular/material/theming\";\r\n.cal-month-view {\r\n  .cal-header {\r\n    .cal-cell {\r\n      font-weight: 600;\r\n    }\r\n  }\r\n  .cal-day-cell {\r\n    &.cal-selected {\r\n      border: none;\r\n      @include mat-elevation(9);\r\n    }\r\n  }\r\n\r\n  .cal-open-day-events {\r\n    box-shadow: inset 0 0 2px 0 rgba(0, 0, 0, 0.54);\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    > div {\r\n      padding: 0 16px;\r\n      margin: 8px 16px;\r\n      display: flex;\r\n      flex-direction: row;\r\n      align-items: center;\r\n      justify-content: flex-start;\r\n      @include mat-elevation(1);\r\n      transition: box-shadow 300ms ease;\r\n\r\n      &:first-of-type {\r\n        margin-top: 16px;\r\n      }\r\n\r\n      &:last-of-type {\r\n        margin-bottom: 16px;\r\n      }\r\n\r\n      &:hover {\r\n        @include mat-elevation(3);\r\n      }\r\n      .mat-chip-list-wrapper {\r\n        margin: -11px !important;\r\n      }\r\n      .cal-event {\r\n        display: grid !important;\r\n        top: 0;\r\n        margin: 0;\r\n      }\r\n\r\n      mwl-calendar-event-title {\r\n        flex: 1;\r\n\r\n        .cal-event-title {\r\n          display: block;\r\n          padding: 21px 24px;\r\n          line-height: 1;\r\n          text-decoration: none;\r\n        }\r\n      }\r\n\r\n      mwl-calendar-event-actions {\r\n        .cal-event-actions {\r\n          display: flex;\r\n          flex-direction: row;\r\n          align-items: center;\r\n\r\n          .cal-event-action {\r\n            display: block;\r\n            line-height: 1;\r\n            padding: 8px;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.cal-week-view {\r\n  .mat-bottom-sheet-container {\r\n    padding: 0% !important;\r\n  }\r\n  .cal-header > b {\r\n    font-weight: 600;\r\n  }\r\n  .cal-event {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n    mwl-calendar-event-title {\r\n      display: block;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      flex: 1;\r\n      order: 0;\r\n\r\n      .cal-event-title {\r\n        display: block;\r\n        line-height: 1;\r\n        text-decoration: none;\r\n      }\r\n    }\r\n\r\n    mwl-calendar-event-actions {\r\n      order: 1;\r\n\r\n      .cal-event-actions {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n\r\n        .cal-event-action {\r\n          display: block;\r\n          line-height: 1;\r\n          padding: 8px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.cal-day-view {\r\n  .cal-time {\r\n    font-weight: 600;\r\n  }\r\n\r\n  .cal-event {\r\n    display: flex;\r\n    flex-direction: row;\r\n\r\n    mwl-calendar-event-title {\r\n      display: block;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n      flex: 1;\r\n      order: 0;\r\n\r\n      .cal-event-title {\r\n        display: block;\r\n        height: 26px;\r\n        line-height: 26px;\r\n        text-decoration: none;\r\n      }\r\n    }\r\n\r\n    mwl-calendar-event-actions {\r\n      order: 1;\r\n\r\n      .cal-event-actions {\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n\r\n        .cal-event-action {\r\n          display: block;\r\n          line-height: 1;\r\n          padding: 4px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  .cal-hour-segment {\r\n    &:after,\r\n    &::after {\r\n      content: \"\" !important;\r\n    }\r\n  }\r\n}\r\n.container {\r\n  align-items: unset !important;\r\n}\r\n#calendar {\r\n  width: 100%;\r\n  .header {\r\n    height: 150px;\r\n    position: relative;\r\n    background-size: 100% auto;\r\n    background-position: 0 50%;\r\n    background-repeat: no-repeat;\r\n    background-color: #fafafa;\r\n    color: #ffffff;\r\n    &:before {\r\n      content: \"\";\r\n      position: absolute;\r\n      top: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n      left: 0;\r\n      z-index: 1;\r\n      background: rgba(0, 0, 0, 0.45);\r\n    }\r\n\r\n    &.Jan {\r\n      background-image: url(\"/assets/img/calendar/winter.jpg\");\r\n      background-position: 0 85%;\r\n    }\r\n    &.Feb {\r\n      background-image: url(\"/assets/img/calendar/winter.jpg\");\r\n      background-position: 0 85%;\r\n    }\r\n    &.Mar {\r\n      background-image: url(\"/assets/img/calendar/spring.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.Apr {\r\n      background-image: url(\"/assets/img/calendar/spring.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.May {\r\n      background-image: url(\"/assets/img/calendar/spring.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.Jun {\r\n      background-image: url(\"/assets/img/calendar/summer.jpg\");\r\n      background-position: 0 80%;\r\n    }\r\n    &.Jul {\r\n      background-image: url(\"/assets/img/calendar/summer.jpg\");\r\n      background-position: 0 80%;\r\n    }\r\n    &.Aug {\r\n      background-image: url(\"/assets/img/calendar/summer.jpg\");\r\n      background-position: 0 80%;\r\n    }\r\n    &.Sep {\r\n      background-image: url(\"/assets/img/calendar/autumn.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.Oct {\r\n      background-image: url(\"/assets/img/calendar/autumn.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.Nov {\r\n      background-image: url(\"/assets/img/calendar/autumn.jpg\");\r\n      background-position: 0 40%;\r\n    }\r\n    &.Dec {\r\n      background-image: url(\"/assets/img/calendar/winter.jpg\");\r\n      background-position: 0 85%;\r\n    }\r\n\r\n    .header-content {\r\n      height: 100%;\r\n\r\n      .header-top {\r\n        position: relative;\r\n        z-index: 2;\r\n\r\n        .logo {\r\n          .logo-icon {\r\n            margin-right: 16px;\r\n          }\r\n\r\n          .logo-text {\r\n            font-size: 24px;\r\n          }\r\n        }\r\n      }\r\n\r\n      .header-bottom {\r\n        position: relative;\r\n        z-index: 2;\r\n\r\n        .title {\r\n          font-size: 20px;\r\n          min-width: 180px;\r\n          text-align: center;\r\n          font-weight: 600;\r\n        }\r\n      }\r\n    }\r\n\r\n    .add-event-button {\r\n      position: absolute;\r\n      right: 18px;\r\n      bottom: -26px;\r\n      z-index: 10;\r\n      background-color: #3f51b5;\r\n    }\r\n  }\r\n}\r\n.cal-current-time-marker {\r\n  height: 3px;\r\n  background: linear-gradient(270deg, #ec2626, #1f55dd);\r\n  background-size: 400% 400%;\r\n  animation: BackgroundFade 5s ease infinite;\r\n\r\n  @keyframes BackgroundFade {\r\n    0% {\r\n      background-position: 0 50%;\r\n    }\r\n    50% {\r\n      background-position: 100% 50%;\r\n    }\r\n    100% {\r\n      background-position: 0 50%;\r\n    }\r\n  }\r\n}\r\n\r\n//\r\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "document",
                        "type": ""
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "document",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div id=\"calendar\" class=\"page-layout simple fullwidth\">\r\n  <!-- HEADER -->\r\n  <div class=\"header p-16 p-sm-24\" [ngClass]=\"viewDate | date: 'MMM'\">\r\n    <div class=\"header-content\" fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n      <div\r\n        class=\"header-top\"\r\n        fxLayout=\"row\"\r\n        fxLayoutAlign=\"space-between center\"\r\n        fxLayout.xs=\"column\"\r\n      >\r\n        <div\r\n          class=\"logo mb-16 mb-sm-0\"\r\n          fxLayout=\"row\"\r\n          fxLayoutAlign=\"start center\"\r\n        >\r\n          <mat-icon class=\"logo-icon\">\r\n            today\r\n          </mat-icon>\r\n          <span class=\"logo-text\">\r\n            Calendar Schedule\r\n          </span>\r\n        </div>\r\n\r\n        <!-- TOOLBAR -->\r\n        <div class=\"toolbar\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n          <button\r\n            mat-icon-button\r\n            mwlCalendarToday\r\n            [(viewDate)]=\"viewDate\"\r\n            (viewDateChange)=\"viewDateChangeNextTodayPrevious($event)\"\r\n            aria-label=\"Today\"\r\n            matTooltip=\"Today\"\r\n          >\r\n            <mat-icon>today</mat-icon>\r\n          </button>\r\n\r\n          <button\r\n            mat-icon-button\r\n            (click)=\"view = 'day'; scrollTo()\"\r\n            aria-label=\"Day\"\r\n            matTooltip=\"Day\"\r\n          >\r\n            <mat-icon>view_day</mat-icon>\r\n          </button>\r\n\r\n          <button\r\n            mat-icon-button\r\n            (click)=\"view = 'week'; scrollTo()\"\r\n            aria-label=\"Week\"\r\n            matTooltip=\"Week\"\r\n          >\r\n            <mat-icon>view_week</mat-icon>\r\n          </button>\r\n\r\n          <button\r\n            mat-icon-button\r\n            (click)=\"view = 'month'\"\r\n            aria-label=\"Month\"\r\n            matTooltip=\"Month\"\r\n          >\r\n            <mat-icon>view_module</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <!-- / TOOLBAR -->\r\n\r\n      <!-- HEADER BOTTOM -->\r\n      <div class=\"header-bottom\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n        <button\r\n          mat-icon-button\r\n          class=\"arrow\"\r\n          mwlCalendarPreviousView\r\n          [view]=\"view\"\r\n          [(viewDate)]=\"viewDate\"\r\n          (viewDateChange)=\"viewDateChangeNextTodayPrevious($event)\"\r\n          aria-label=\"Previous\"\r\n        >\r\n          <mat-icon>chevron_left</mat-icon>\r\n        </button>\r\n\r\n        <div class=\"title\">\r\n          {{ viewDate | calendarDate: view + \"ViewTitle\":\"en\" }}\r\n        </div>\r\n\r\n        <button\r\n          mat-icon-button\r\n          class=\"arrow\"\r\n          mwlCalendarNextView\r\n          [view]=\"view\"\r\n          [(viewDate)]=\"viewDate\"\r\n          (viewDateChange)=\"viewDateChangeNextTodayPrevious($event)\"\r\n          aria-label=\"Next\"\r\n        >\r\n          <mat-icon>chevron_right</mat-icon>\r\n        </button>\r\n      </div>\r\n      <!-- / HEADER BOTTOM -->\r\n    </div>\r\n\r\n    <!-- ADD EVENT BUTTON -->\r\n    <a\r\n      mat-fab\r\n      class=\"add-event-button\"\r\n      aria-label=\"Add event\"\r\n      matTooltip=\"Add New\"\r\n      type=\"button\"\r\n      routerLink=\"/schedule/add\"\r\n    >\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n    <!-- / ADD EVENT BUTTON -->\r\n  </div>\r\n  <!-- / HEADER -->\r\n\r\n  <!-- CONTENT -->\r\n  <div class=\"content\">\r\n    <div [ngSwitch]=\"view\" class=\"scroll-container\" #scrollContainer>\r\n      <mwl-calendar-month-view\r\n        *ngSwitchCase=\"'month'\"\r\n        [viewDate]=\"viewDate\"\r\n        [events]=\"events$ | async\"\r\n        [refresh]=\"refresh\"\r\n        (dayClicked)=\"dayClicked($event.day)\"\r\n        (eventTimesChanged)=\"eventTimesChanged($event)\"\r\n        (beforeViewRender)=\"beforeMonthViewRender($event)\"\r\n        [activeDayIsOpen]=\"activeDayIsOpen\"\r\n        [openDayEventsTemplate]=\"customActionTemplate\"\r\n      >\r\n      </mwl-calendar-month-view>\r\n      <mwl-calendar-week-view\r\n        *ngSwitchCase=\"'week'\"\r\n        [viewDate]=\"viewDate\"\r\n        (viewDateChange)=\"selectedDay = { date: $event }\"\r\n        [events]=\"events$ | async\"\r\n        [refresh]=\"refresh\"\r\n        (dayClicked)=\"dayClicked($event.day)\"\r\n        (eventTimesChanged)=\"eventTimesChanged($event)\"\r\n        [weekStartsOn]=\"weekStartsOn\"\r\n        [weekendDays]=\"weekendDays\"\r\n        [eventTemplate]=\"customEventTemplate\"\r\n        [daysInWeek]=\"daysInWeek\"\r\n        [dayStartHour]=\"5\"\r\n        [dayEndHour]=\"22\"\r\n      >\r\n      </mwl-calendar-week-view>\r\n      <mwl-calendar-day-view\r\n        *ngSwitchCase=\"'day'\"\r\n        [viewDate]=\"viewDate\"\r\n        (viewDateChange)=\"selectedDay = { date: $event }\"\r\n        [events]=\"events$ | async\"\r\n        [refresh]=\"refresh\"\r\n        (dayClicked)=\"dayClicked($event.day)\"\r\n        (eventTimesChanged)=\"eventTimesChanged($event)\"\r\n      >\r\n      </mwl-calendar-day-view>\r\n\r\n      <ng-template\r\n        #customActionTemplate\r\n        let-events=\"events\"\r\n        let-eventClicked=\"trainingClicked\"\r\n        let-isOpen=\"isOpen\"\r\n      >\r\n        <div class=\"cal-open-day-events\" [@collapse] *ngIf=\"isOpen\">\r\n          <mat-card\r\n            *ngFor=\"let event of events\"\r\n            style=\"\r\n              background-color: rgb(255, 255, 255);\r\n              margin: 0.2em;\r\n              height: 70% !important;\r\n              position: relative;\r\n              overflow: hidden;\r\n            \"\r\n          >\r\n            <mat-card-subtitle class=\"text-xl push-none\">\r\n              <div fxLayout=\"row wrap\" fxLayoutGap=\"32px\">\r\n                <span\r\n                  class=\"cal-event\"\r\n                  [style.backgroundColor]=\"event.color?.primary\"\r\n                ></span>\r\n                <!-- <span *ngIf=\"event.meta?.status\">\r\n                  <mat-chip-list aria-label=\"Fish selection\">\r\n                    <mat-chip color=\"primary\" selected>{{\r\n                      event.meta?.status\r\n                    }}</mat-chip>\r\n                  </mat-chip-list></span\r\n                > -->\r\n                <span style=\"font-weight: 600;\"\r\n                  >{{ event.start | date: \"shortTime\" }} -\r\n                  {{ event.end | date: \"shortTime\" }}\r\n                </span>\r\n              </div>\r\n            </mat-card-subtitle>\r\n            <mat-card-title-group>\r\n              <mat-card-subtitle>\r\n                <span\r\n                  >{{ event.title }}\r\n                  <span *ngIf=\"event.meta?.typeSchedule\">\r\n                    - {{ event.meta?.typeSchedule }}</span\r\n                  ></span\r\n                >\r\n              </mat-card-subtitle>\r\n              <mat-action-row>\r\n                <mwl-calendar-event-actions [event]=\"event\">\r\n                </mwl-calendar-event-actions>\r\n              </mat-action-row>\r\n            </mat-card-title-group>\r\n          </mat-card>\r\n        </div>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n        #customWeekEventTemplate\r\n        let-weekEvent=\"weekEvent\"\r\n        let-eventClicked=\"eventClicked\"\r\n      >\r\n        <div\r\n          class=\"cal-event\"\r\n          [style.backgroundColor]=\"weekEvent.event.color.secondary\"\r\n          [style.borderColor]=\"weekEvent.event.color.primary\"\r\n          fxLayout=\"row\"\r\n          fxLayoutAlign=\"space-between center\"\r\n          matTooltip=\"{{ weekEvent.event?.title }}\"\r\n          (mwlClick)=\"eventClicked.emit()\"\r\n        >\r\n          <mwl-calendar-event-title\r\n            [event]=\"weekEvent.event\"\r\n            view=\"week\"\r\n            (mwlClick)=\"eventClicked.emit()\"\r\n          >\r\n          </mwl-calendar-event-title>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template\r\n        #weekViewHourSegmentTemplate\r\n        let-segment=\"segment\"\r\n        let-locale=\"locale\"\r\n        let-segmentHeight=\"segmentHeight\"\r\n        let-isTimeLabel=\"isTimeLabel\"\r\n      >\r\n        <div\r\n          #segmentElement\r\n          class=\"cal-hour-segment\"\r\n          [style.height.px]=\"segmentHeight\"\r\n          [class.cal-hour-start]=\"segment.isStart\"\r\n          [class.cal-after-hour-start]=\"!segment.isStart\"\r\n          [ngClass]=\"segment.cssClass\"\r\n        >\r\n          <div class=\"cal-time\" *ngIf=\"isTimeLabel\">\r\n            {{ segment.date | calendarDate: \"weekViewHour\":locale }}\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template\r\n        #currentTimeMarkerTemplate\r\n        let-columnDate=\"columnDate\"\r\n        let-dayStartHour=\"dayStartHour\"\r\n        let-dayStartMinute=\"dayStartMinute\"\r\n        let-dayEndHour=\"dayEndHour\"\r\n        let-dayEndMinute=\"dayEndMinute\"\r\n        let-isVisible=\"isVisible\"\r\n        let-topPx=\"topPx\"\r\n      >\r\n        <div\r\n          class=\"cal-current-time-marker\"\r\n          [style.top.px]=\"topPx\"\r\n          #calCurrent\r\n          id=\"calCurrent\"\r\n          (click)=\"changeScroll(topPx)\"\r\n        ></div>\r\n      </ng-template>\r\n      <ng-template #actionsTemplate let-event=\"event\">\r\n        <div\r\n          fxLayout=\"row wrap\"\r\n          fxLayout.xs=\"column\"\r\n          fxLayoutAlign=\"center center\"\r\n        >\r\n          <span *ngIf=\"event.actions\" class=\"cal-event-actions\">\r\n            <div\r\n              class=\"item item-1\"\r\n              fxFlex.sm=\"0 1 calc(100%-10px)\"\r\n              fxFlex.md=\"0 1 calc(100%-10px)\"\r\n              fxFlex.gt-md=\"0 1 calc(100%-10px)\"\r\n              *ngFor=\"let action of event.actions\"\r\n            >\r\n              <a\r\n                class=\"calendar_event-action cal-event-action\"\r\n                (mwlClick)=\"action.onClick({ event: event })\"\r\n                [ngClass]=\"action.cssClass\"\r\n                [innerHtml]=\"action.label\"\r\n              >\r\n              </a>\r\n            </div>\r\n          </span>\r\n        </div>\r\n      </ng-template>\r\n      <ng-template\r\n        #eventTitleTemplate\r\n        let-event=\"event\"\r\n        let-view=\"view\"\r\n        let-locale=\"locale\"\r\n      >\r\n        <span\r\n          class=\"calendar_event cal-event-title\"\r\n          [innerHTML]=\"event.title | calendarEventTitle: view:event\"\r\n        >\r\n        </span>\r\n      </ng-template>\r\n      <ng-template\r\n        #customEventTemplate\r\n        let-weekEvent=\"weekEvent\"\r\n        let-tooltipPlacement=\"tooltipPlacement\"\r\n        let-tooltipTemplate=\"tooltipTemplate\"\r\n        let-tooltipAppendToBody=\"tooltipAppendToBody\"\r\n      >\r\n        <div\r\n          class=\"cal-event\"\r\n          fxLayoutAlign=\"center center\"\r\n          [style.backgroundColor]=\"weekEvent.event.color?.secondary\"\r\n          [style.borderColor]=\"weekEvent.event.color?.primary\"\r\n          (click)=\"openBottomSheet(weekEvent.event)\"\r\n        >\r\n          <mwl-calendar-event-title [event]=\"weekEvent.event\" view=\"week\">\r\n          </mwl-calendar-event-title>\r\n        </div>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n  <!-- / CONTENT -->\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-258619621056244a92e20be00a95eb98",
            "file": "src/app/shared/components/checkbox/item/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "className",
                    "line": 20,
                    "type": "string"
                },
                {
                    "name": "disabled",
                    "defaultValue": "true",
                    "line": 19
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "label",
                    "line": 17,
                    "type": "string"
                },
                {
                    "name": "valueField",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "getChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<ICheckBoxItem>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "isChecked",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "isChecked",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ICheckBoxItem } from '../../../../store/models/checkbox-item.i';\r\nimport {\r\n  Component,\r\n  Input,\r\n  forwardRef,\r\n  Output,\r\n  EventEmitter,\r\n  OnInit,\r\n} from '@angular/core';\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'brc-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n  @Input() label: string;\r\n  @Input() isChecked = false;\r\n  @Input() disabled = true;\r\n  @Input() className: string;\r\n  @Input() valueField: string;\r\n  @Output() getChange: EventEmitter<ICheckBoxItem> = new EventEmitter();\r\n  get value(): boolean {\r\n    return this.isChecked;\r\n  }\r\n\r\n  set value(value: boolean) {\r\n    this.isChecked = value;\r\n  }\r\n\r\n  writeValue(value: boolean): void {\r\n    if (value !== this.isChecked) {\r\n      this.isChecked = value;\r\n    }\r\n    else return;\r\n  }\r\n\r\n  onChange(isChecked) {\r\n    this.value = isChecked;\r\n    this.getChange.emit({\r\n      label: this.label,\r\n      checked: this.isChecked,\r\n      value: this.valueField,\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":root {\r\n  --initial-color-mode: light;\r\n  --tinted_surface: #182339;\r\n  --change_addition: #91efd8;\r\n  --change_mixed: #ffdc99;\r\n  --change_refactored: #cf8fef;\r\n  --change_removal: #ffa8be;\r\n  --divider: rgba(153, 187, 255, 0.3);\r\n  --divider_no_alpha: rgb(153, 187, 255);\r\n  --error: #d9a68c;\r\n  --error_bubble: rgba(217, 166, 140, 0.2);\r\n  --floating_surface: #182339;\r\n  --on_change: #000000;\r\n  --on_error: #000000;\r\n  --on_primary: #00081a;\r\n  --on_surface: #e5eeff;\r\n  --on_surface_secondary: rgba(229, 238, 255, 0.6);\r\n  --on_surface_secondary_no_opacity: #8f97a8;\r\n  --primary: #99bbff;\r\n  --ripple_primary: rgba(153, 187, 255, 0.2);\r\n  --ripple_surface: rgba(230, 238, 255, 0.15);\r\n  --surface: #0d1526;\r\n}\r\n.pure-material-checkbox {\r\n  z-index: 0;\r\n  position: relative;\r\n  display: flex;\r\n  color: rgba(var(--on_surface), 0.87);\r\n  align-items: center;\r\n}\r\n\r\n/* Input */\r\n.pure-material-checkbox > input {\r\n  appearance: none;\r\n  z-index: -1;\r\n  position: absolute;\r\n  left: -10px;\r\n  top: -8px;\r\n  display: block;\r\n  margin: 0;\r\n  border-radius: 50%;\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.6);\r\n  box-shadow: none;\r\n  outline: none;\r\n  opacity: 0;\r\n  transform: scale(1);\r\n  pointer-events: none;\r\n  transition: opacity 0.3s, transform 0.2s;\r\n}\r\n\r\n/* Span */\r\n.pure-material-checkbox > span {\r\n  display: inline-flex;\r\n  width: 100%;\r\n  cursor: pointer;\r\n  align-items: center;\r\n}\r\n\r\n/* Box */\r\n.pure-material-checkbox > span::before {\r\n  content: \"\";\r\n  display: inline-block;\r\n  box-sizing: border-box;\r\n  margin: 3px 11px 3px 1px;\r\n  border: solid 2px; /* Safari */\r\n  border-color: rgba(var(--pure-material-onsurface-rgb, 0, 0, 0), 0.6);\r\n  border-radius: 2px;\r\n  width: 18px;\r\n  height: 18px;\r\n  vertical-align: top;\r\n  transition: border-color 0.2s, background-color 0.2s;\r\n}\r\n\r\n/* Checkmark */\r\n.pure-material-checkbox > span::after {\r\n  content: \"\";\r\n  display: block;\r\n  position: absolute;\r\n  top: 3px;\r\n  left: 1px;\r\n  width: 10px;\r\n  height: 5px;\r\n  border: solid 2px transparent;\r\n  border-right: none;\r\n  border-top: none;\r\n  transform: translate(3px, 4px) rotate(-45deg);\r\n}\r\n\r\n/* Checked, Indeterminate */\r\n.pure-material-checkbox > input:checked {\r\n  background-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));\r\n}\r\n\r\n.pure-material-checkbox > input:checked + span::before {\r\n  // border-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));\r\n  // background-color: rgb(var(--pure-material-primary-rgb, 33, 150, 243));\r\n  border-color: #3f51b5;\r\n  background-color:#3f51b5;\r\n}\r\n\r\n.pure-material-checkbox > input:checked + span::after {\r\n  border-color: rgb(var(--pure-material-onprimary-rgb, 255, 255, 255));\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23
                    }
                }
            },
            "templateData": "<label class=\"pure-material-checkbox\">\r\n  <input\r\n    #inputEl\r\n    type=\"checkbox\"\r\n    [name]=\"label\"\r\n    [value]=\"valueField\"\r\n    [(ngModel)]=\"isChecked\"\r\n    (change)=\"onChange(inputEl.checked)\"\r\n    *ngIf=\"isChecked\"\r\n    checked\r\n  />\r\n  <input\r\n    #inputEl\r\n    type=\"checkbox\"\r\n    [name]=\"label\"\r\n    [value]=\"valueField\"\r\n    [(ngModel)]=\"isChecked\"\r\n    (change)=\"onChange(inputEl.checked)\"\r\n    *ngIf=\"!isChecked\"\r\n  />\r\n  <span class=\"lbl-txt\" *ngIf=\"label\">{{ label }}</span>\r\n</label>\r\n"
        },
        {
            "name": "CheckboxGroupComponent",
            "id": "component-CheckboxGroupComponent-a047374e87cda91b3f02a2da25dd9897",
            "file": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-checkbox-group",
            "styleUrls": [
                "./checkbox-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxField",
                    "line": 17,
                    "type": "ICheckBoxItem[]"
                },
                {
                    "name": "titleGroup",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataCheckBox",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "tempArr",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "value",
                            "type": "ICheckBoxItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ICheckBoxItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ICheckBoxItem } from './../../../../store/models/checkbox-item.i';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nconst transform = (data = []) => {\r\n  const mappedData = {};\r\n  data.forEach((item) => (mappedData[item.value] = item));\r\n  return mappedData;\r\n};\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'brc-checkbox-group',\r\n  templateUrl: './checkbox-group.component.html',\r\n  styleUrls: ['./checkbox-group.component.scss'],\r\n})\r\nexport class CheckboxGroupComponent implements OnInit {\r\n  @Output() dataCheckBox = new EventEmitter();\r\n  @Input() checkboxField: ICheckBoxItem[];\r\n  @Input() titleGroup: string;\r\n  constructor() {}\r\n  tempArr = [];\r\n  ngOnInit(): void {\r\n    // this.checkboxDefault = this.checkboxField;\r\n    this.tempArr = this.checkboxField.map((rs) => {\r\n      return rs;\r\n    });\r\n  }\r\n  get(value: ICheckBoxItem) {\r\n    let dataTransform = transform(this.tempArr);\r\n    /**\r\n     * Update check\r\n     */\r\n    let newData = Object.values({\r\n      ...dataTransform,\r\n      [value.value]: {\r\n        ...value,\r\n        checked: value.checked,\r\n      },\r\n    });\r\n    this.tempArr = newData;\r\n    this.dataCheckBox.emit(newData);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul:before {\r\n  content: attr(aria-label);\r\n  font-size: 120%;\r\n  margin-left: -5px;\r\n}\r\nul {\r\n  margin-left: -30px;\r\n}\r\n",
                    "styleUrl": "./checkbox-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"example-list-section\">\r\n  <ul [attr.aria-label]=\"titleGroup + ' : '\">\r\n    <li *ngFor=\"let data of checkboxField\">\r\n      <brc-checkbox\r\n        [label]=\"data.label\"\r\n        [isChecked]=\"data.checked\"\r\n        [valueField]=\"data.value\"\r\n        (getChange)=\"get($event)\"\r\n      ></brc-checkbox>\r\n    </li>\r\n  </ul>\r\n</span>\r\n"
        },
        {
            "name": "CheckboxNewComponent",
            "id": "component-CheckboxNewComponent-746923beb9ebf901a792ce5f15d86a02",
            "file": "src/app/shared/components/checkbox/checkbox-new/checkbox-new.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-checkbox-new",
            "styleUrls": [
                "./checkbox-new.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox-new.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkboxContent",
                    "defaultValue": "[\r\n    {name : \"Complete\", checked : false},\r\n    {name : \"Incomplete\", checked : false},\r\n  ]",
                    "line": 13,
                    "type": "CheckboxInterface[]"
                },
                {
                    "name": "nameGroup",
                    "defaultValue": "'Status'",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "dataCheckBox",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkboxValue",
                    "type": "CheckboxInterface[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "boolean"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { CheckboxInterface } from '../../../../store/models/checkbox-item.i';\r\n\r\n@Component({\r\n  selector: 'brc-checkbox-new',\r\n  templateUrl: './checkbox-new.component.html',\r\n  styleUrls: ['./checkbox-new.component.scss']\r\n})\r\nexport class CheckboxNewComponent implements OnInit {\r\n\r\n  checkboxValue : CheckboxInterface [];\r\n  @Input() nameGroup: string = 'Status'\r\n  @Input() checkboxContent : CheckboxInterface[] = [\r\n    {name : \"Complete\", checked : false},\r\n    {name : \"Incomplete\", checked : false},\r\n  ]\r\n  @Output() dataCheckBox = new EventEmitter();\r\n  constructor() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.checkboxValue = this.checkboxContent;\r\n\r\n  }\r\n\r\n  onChange(data : boolean,index : number) {\r\n    this.checkboxValue[index].checked = data;\r\n    this.dataCheckBox.emit(this.checkboxValue);\r\n  }\r\n  clear(){\r\n    this.checkboxContent?.forEach(item =>\r\n      item.checked = false\r\n    )\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-h2 {\r\n    margin: 5px;\r\n}\r\n\r\n.example-section {\r\n    display: flex;\r\n    align-content: center;\r\n    align-items: center;\r\n    height: 40px;\r\n}\r\n\r\n.example-margin {\r\n    margin: 0 10px;\r\n}",
                    "styleUrl": "./checkbox-new.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"result\">\r\n  <h3 style=\"font-size: 17px;\">Status</h3>\r\n  <section *ngFor=\"let ing of checkboxContent; let i = index\">\r\n    <mat-checkbox\r\n      #checkbox\r\n      [(ngModel)]=\"ing.checked\"\r\n      (change)=\"onChange(ing.checked,i)\"\r\n      [color]=\"'primary'\"\r\n    >\r\n      {{ ing.name }}\r\n    </mat-checkbox>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-4ed8f12f9f527bc3ad9fe0208b8dd59e",
            "file": "src/app/shared/components/date-time-picker/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-date-picker",
            "styleUrls": [
                "./date-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "value",
                    "line": 22,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "getDate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "after",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'after'"
                        }
                    ]
                },
                {
                    "name": "control",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'control'"
                        }
                    ]
                },
                {
                    "name": "date",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "dayOfMonth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "disableNext",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "disablePrevous",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "listMonth",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "listMonthText",
                    "defaultValue": "[\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "listWeek",
                    "defaultValue": "[[]]",
                    "type": "[[]]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "listYear",
                    "defaultValue": "[]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "maxYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "minYear",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "month",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "previous",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'previous'"
                        }
                    ]
                },
                {
                    "name": "showed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "toggleButton",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'hidepicker'"
                        }
                    ]
                },
                {
                    "name": "txtMonthYear",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "year",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "checkActive",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseDate",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseMonth",
                    "args": [
                        {
                            "name": "mon",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "jsdoctags": [
                        {
                            "name": "mon",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseYear",
                    "args": [
                        {
                            "name": "year",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateFormat",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 236,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayOfMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140
                },
                {
                    "name": "getNow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82
                },
                {
                    "name": "getYear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "onchange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89
                },
                {
                    "name": "prevous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192
                },
                {
                    "name": "resetList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265
                },
                {
                    "name": "valiDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 249,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  Renderer2,\r\n} from '@angular/core';\r\n@Component({\r\n  selector: 'brc-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrls: ['./date-picker.component.scss'],\r\n})\r\nexport class DatePickerComponent implements OnInit {\r\n  @ViewChild('control') control: ElementRef;\r\n  @ViewChild('hidepicker') toggleButton: ElementRef;\r\n  @ViewChild('previous') previous: ElementRef;\r\n  @ViewChild('after') after: ElementRef;\r\n  @Output() getDate = new EventEmitter<string>();\r\n  @Input() value: string;\r\n\r\n  public showed = false;\r\n  listMonthText = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ];\r\n  date: Date;\r\n  minYear: number;\r\n  maxYear: number;\r\n  year: number;\r\n  month: number;\r\n  dayOfMonth: number;\r\n  txtMonthYear: string;\r\n  disableNext = false;\r\n  disablePrevous = false;\r\n  listYear: number[] = [];\r\n  listWeek: [number[]] = [[]];\r\n  listMonth: string[] = [];\r\n\r\n  constructor(private renderer: Renderer2) {\r\n    this.renderer.listen('window', 'click', (e: Event) => {\r\n      if (\r\n        !this.toggleButton.nativeElement.contains(e.target) &&\r\n        !this.previous.nativeElement.contains(e.target) &&\r\n        !this.after.nativeElement.contains(e.target) &&\r\n        !this.control.nativeElement.contains(e.target)\r\n      ) {\r\n        this.showed = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.valiDate(this.value)) {\r\n      this.date = new Date(this.value);\r\n    } else {\r\n      this.date = new Date();\r\n      this.value = '';\r\n    }\r\n    this.year = this.date.getFullYear();\r\n    this.month = this.date.getMonth();\r\n    this.dayOfMonth = this.date.getDate();\r\n    this.minYear = this.year - 10;\r\n    this.maxYear = this.year + 10;\r\n    this.getDayOfMonth(this.date.getMonth());\r\n    this.txtMonthYear = this.listMonthText[this.month] + '   ' + this.year;\r\n  }\r\n\r\n  //get date now\r\n  getNow() {\r\n    this.date = new Date();\r\n    this.value = this.dateFormat(this.date);\r\n    this.getDate.emit(this.value);\r\n    this.showed = false;\r\n  }\r\n\r\n  onchange() {\r\n    if (this.valiDate(this.value)) {\r\n      this.date = new Date();\r\n    } else {\r\n      this.date = new Date(this.value);\r\n    }\r\n    this.getDate.emit(this.value);\r\n  }\r\n\r\n  getDayOfMonth(month) {\r\n    this.txtMonthYear = this.listMonthText[this.month] + '   ' + this.year;\r\n    month++;\r\n    let days;\r\n    this.resetList();\r\n    if (month == 2) {\r\n      this.year % 4 == 0 ? (days = 29) : (days = 28);\r\n    } else {\r\n      if (month == 4 || month == 6 || month == 9 || month == 11) {\r\n        days = 30;\r\n      } else {\r\n        days = 31;\r\n      }\r\n    }\r\n    let strDate = month + '/' + '1' + '/' + this.year;\r\n    let date = new Date(strDate);\r\n    let week: number[] = [];\r\n    let day = date.getDay();\r\n\r\n    for (let i = 0; i < day; i++) {\r\n      week.push(0);\r\n    }\r\n    let j = date.getDay();\r\n    for (let d = 1; d <= days; d++) {\r\n      if (j == 7) {\r\n        this.listWeek.push(week);\r\n        week = [d];\r\n        j = 1;\r\n      } else {\r\n        week.push(d);\r\n        j++;\r\n      }\r\n    }\r\n  }\r\n\r\n  getYear() {\r\n    this.resetList();\r\n    for (let y = this.minYear; y < this.maxYear; y++) {\r\n      this.listYear.push(y);\r\n    }\r\n  }\r\n\r\n  getMonth() {\r\n    if (this.listMonth.length < 1) {\r\n      this.txtMonthYear = this.year + '';\r\n      this.resetList();\r\n      this.listMonth = this.listMonthText;\r\n    } else {\r\n      this.getYear();\r\n    }\r\n  }\r\n\r\n  chooseYear(year) {\r\n    this.disableNext = false;\r\n    this.disablePrevous = false;\r\n    this.year = year;\r\n    this.resetList();\r\n    this.getMonth();\r\n  }\r\n\r\n  chooseMonth(mon) {\r\n    this.month = mon;\r\n    this.resetList();\r\n    this.getDayOfMonth(this.month);\r\n  }\r\n\r\n  chooseDate(date) {\r\n    let strDate = this.month + 1 + '/' + date + '/' + this.year;\r\n    this.date = new Date(strDate);\r\n    this.value = this.dateFormat(this.date);\r\n    this.getDate.emit(this.value);\r\n    this.showed = false;\r\n  }\r\n\r\n  next() {\r\n    this.disablePrevous = false;\r\n    if (this.listYear.length > 0) {\r\n      this.minYear += 15;\r\n      this.maxYear += 15;\r\n      this.getYear();\r\n      if (this.maxYear >= 2040) {\r\n        this.disableNext = true;\r\n      }\r\n    } else {\r\n      if (this.month < 11) this.month++;\r\n      else {\r\n        this.month = 0;\r\n        this.year++;\r\n        if (this.year >= 2040) this.disableNext = true;\r\n      }\r\n      this.getDayOfMonth(this.month);\r\n    }\r\n  }\r\n\r\n  prevous() {\r\n    this.disableNext = false;\r\n    if (this.listYear.length > 0) {\r\n      this.minYear -= 15;\r\n      this.maxYear -= 15;\r\n      this.getYear();\r\n      if (this.minYear <= 1960) {\r\n        this.disablePrevous = true;\r\n      }\r\n    } else {\r\n      if (this.month > 0) this.month--;\r\n      else {\r\n        this.month = 11;\r\n        this.year--;\r\n        if (this.year <= 1960) this.disablePrevous = true;\r\n      }\r\n      this.getDayOfMonth(this.month);\r\n    }\r\n  }\r\n\r\n  resetList() {\r\n    this.listYear = [];\r\n    this.listMonth = [];\r\n    this.listWeek = [[]];\r\n  }\r\n\r\n  //check date is choosed\r\n  checkActive(date) {\r\n    if (this.listMonth.length > 1) {\r\n      if (\r\n        date == this.date.getMonth() &&\r\n        this.year == this.date.getFullYear()\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      if (date == this.date.getDate() && this.month == this.date.getMonth()) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  dateFormat(date: Date) {\r\n    let month: string = String(date.getMonth() + 1);\r\n    let day: string = String(date.getDate());\r\n    if (date.getMonth() + 1 < 10) {\r\n      month = '0' + (date.getMonth() + 1);\r\n    }\r\n    if (date.getDate() < 10) {\r\n      day = '0' + date.getDate();\r\n    }\r\n    // return date.getDate() + '-' + (date.getMonth() + 1) + '-' + date.getFullYear();\r\n    return date.getFullYear() + '-' + month + '-' + day;\r\n  }\r\n\r\n  valiDate(date: string): boolean {\r\n    if (date == null) {\r\n      return false;\r\n    }\r\n    let items = date.split('-');\r\n    if (items.length > 3) {\r\n      return false;\r\n    }\r\n\r\n    let temDate = new Date(items[1] + '-' + items[0] + '-' + items[2]);\r\n    if (isNaN(temDate.getDate())) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toggleMenu() {\r\n    console.log('demo');\r\n    this.showed = !this.showed;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    box-sizing: border-box;\r\n}\r\n.shouldShow {\r\n    display: none;\r\n}\r\n\r\n.date-picker button:hover {\r\n    cursor: pointer;\r\n    background: lightgrey;\r\n}\r\n\r\n.tt {\r\n    color: red;\r\n}\r\n\r\n.date-picker {\r\n    width: 100%;\r\n    font-size: 12px;\r\n    padding: 0px;\r\n}\r\n\r\n.picker {\r\n    width: 100%;\r\n    // float: right;\r\n    // max-width: 300px;\r\n    padding: 2px;\r\n    border: 1px solid #eaeaea;\r\n    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.4);\r\n    min-width: 240px;\r\n}\r\n\r\n.picker-content {\r\n    width: 30%;\r\n    padding-top: 10px;\r\n}\r\n\r\n.picker-content {\r\n    width: 100%;\r\n}\r\n\r\n.dateInput {\r\n    margin-top: 1px;\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n}\r\n\r\ntable {\r\n    width: 100%;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    border-radius: 5%;\r\n}\r\n\r\n// .btnShow {\r\n//     width: 5%;\r\n//     // float: right;\r\n// }\r\n.txtDate {\r\n    width: 100%;\r\n}\r\n\r\n.btnMY {\r\n    color: black;\r\n    border: 1px solid #3f51b5;\r\n    width: 50%;\r\n    padding: 3%;\r\n    background: none;\r\n}\r\n\r\n.btnM {\r\n    width: 23%;\r\n    padding: 20px 5%;\r\n    margin: 2px;\r\n}\r\n\r\n.btnY {\r\n    width: 25%;\r\n    padding: 20px 5%;\r\n    background: none;\r\n}\r\n\r\n.btnN,\r\n.btnP {\r\n    float: right;\r\n    padding: 1% 3%;\r\n    background: none;\r\n}\r\n\r\n.btnD {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background: none;\r\n}\r\n\r\n.btnNow {\r\n    float: right;\r\n    padding: 10px;\r\n    border-radius: 17%;\r\n    background: #3f51b5;\r\n    color: white;\r\n}\r\n\r\n.active {\r\n    background-color: #ffffff;\r\n    border: 2px solid #3f51b5;\r\n    color: black;\r\n}\r\n\r\n.picker button:hover {\r\n    background: #3f51b5;\r\n    cursor: pointer;\r\n}\r\n\r\n@media only screen and (min-width: 300px) {\r\n    .btnD {\r\n        padding: 10px 5px;\r\n    }\r\n}",
                    "styleUrl": "./date-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"date-picker\" style=\"position: relative;\">\r\n    <div class=\"dateInput\">\r\n\r\n        <input class=\"txtDate\" (change)='onchange()' placeholder=\"YYYY / MM / DD\" [(ngModel)]=\"value\">\r\n        <button class=\"btnShow\" #hidepicker  >\r\n            <mat-icon (click)=\"toggleMenu()\">date_range</mat-icon>\r\n        </button>\r\n\r\n    </div>\r\n    <div class=\"picker\"  [hidden]=\"!showed\" #control  style=\"position: absolute; z-index: 10; background-color:#f1f2f6\" >\r\n        <div class=\"picker-control\" >\r\n            <!-- <button class=\"btnM\" (click)='getMon();'>{{listMon[mon]}}</button> -->\r\n            <button class=\"btnMY\" (click)='getMonth();'  >{{txtMonthYear}}</button>\r\n            <button class=\"btnN\" #previous [disabled]='disableNext' (click)='next();'>\r\n                <mat-icon>keyboard_arrow_right</mat-icon>\r\n            </button>\r\n            <button class=\"btnP\" #after [disabled]='disablePrevous' (click)='prevous();'>\r\n                <mat-icon>keyboard_arrow_left</mat-icon>\r\n            </button>\r\n        </div>\r\n        <div class=\"picker-content\"  >\r\n            <button *ngFor='let item of listMonth; index as i;'  [class]=\"checkActive(i) ? 'btnM active' :'btnM'\" (click)='chooseMonth(i);' #controlMonth>{{item}}</button>\r\n            <button *ngFor='let item of listYear' [class]=\"item == date.getFullYear() ? 'btnM active' : 'btnM'\" (click)='chooseYear(item);' #controlYear>{{item}}</button>\r\n\r\n            <div *ngIf='listWeek.length > 1'>\r\n                <table>\r\n                    <tr>\r\n                        <th>Su</th>\r\n                        <th>Mo</th>\r\n                        <th>Tu</th>\r\n                        <th>We</th>\r\n                        <th>Th</th>\r\n                        <th>Fi</th>\r\n                        <th>Sa</th>\r\n                    </tr>\r\n                    <tr *ngFor='let item of listWeek'>\r\n                        <td *ngFor='let d of item'>\r\n                            <button *ngIf='d != 0' [class]=\"checkActive(d) ? 'btnD active' : 'btnD'\" (click)='chooseDate(d);'>\r\n                                {{d}}\r\n                            </button>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td colspan=\"7\">\r\n                            <button class=\"btnNow\" (click)='getNow()'>Today</button>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "DateTimePickerComponent",
            "id": "component-DateTimePickerComponent-b0631e47c2c8a4820aae724541d3b4dc",
            "file": "src/app/shared/components/date-time-picker/date-time-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-datetime-picker",
            "styleUrls": [
                "./date-time-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-time-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Day",
                    "defaultValue": "\"\"",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "times",
                    "defaultValue": "\"\"",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "getDay",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 12,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "getHour",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 14,
                    "type": "EventEmitter"
                },
                {
                    "name": "getMinute",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "getTimeNow",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHours",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinutes",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'brc-datetime-picker',\r\n  templateUrl: './date-time-picker.component.html',\r\n  styleUrls: ['./date-time-picker.component.scss']\r\n})\r\nexport class DateTimePickerComponent implements OnInit {\r\n  @Input() Day: string =\"\";\r\n  @Input() times: string =\"\";\r\n\r\n  @Output() getDay : EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() getTimeNow = new EventEmitter<string>();\r\n  @Output() getHour = new EventEmitter<string>();\r\n  @Output() getMinute = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  getDate(data:string){\r\n    this.getDay.emit(data);\r\n  }\r\n\r\n  getHours(data:string){\r\n    this.getHour.emit(data);\r\n  }\r\n  getMinutes(data:string){\r\n    this.getMinute.emit(data);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".datetime {\r\n    width: 100%;\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n}\r\n\r\n.date {\r\n    width: 100%;\r\n    float: left;\r\n    margin: 0;\r\n}\r\n\r\n.time {\r\n    width: 47%;\r\n    float: left;\r\n    margin: 0;\r\n}\r\n",
                    "styleUrl": "./date-time-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"datetime\" >\r\n    <brc-date-picker class=\"date\" [value]=\"Day\" (getDate)=\"getDate($event)\"></brc-date-picker>\r\n    <brc-time-picker class=\"time\"  [times]=\"times\"  (getHour)=\"getHours($event)\" (getMinute)=\"getMinutes($event)\"></brc-time-picker>\r\n</div>\r\n"
        },
        {
            "name": "DetailTodoPageComponent",
            "id": "component-DetailTodoPageComponent-a325e2452fdfd5d0ecba13687a8ea238",
            "file": "src/app/modules/detail-todo-page/detail-todo-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-detail-todo-page",
            "styleUrls": [
                "./detail-todo-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./detail-todo-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "todoDetail",
                    "type": "TodoDetail",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "btnClickEmt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TodoDetail } from '../../store/models/detail-todo';\r\nimport { TodoService } from '../../store/services/todo.service';\r\n\r\n@Component({\r\n  selector: 'brc-detail-todo-page',\r\n  templateUrl: './detail-todo-page.component.html',\r\n  styleUrls: ['./detail-todo-page.component.scss'],\r\n})\r\nexport class DetailTodoPageComponent implements OnInit {\r\n  public todoDetail: TodoDetail;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private _route: ActivatedRoute,\r\n    private todoService: TodoService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    let id = Number(this._route.snapshot.paramMap.get('id'));\r\n    // Only for test - delete....\r\n    // id = 1;\r\n    this.todoService.getDetailTodo(id).subscribe((todo) => {\r\n      this.todoDetail = {\r\n        ...todo,\r\n      };\r\n    });\r\n  }\r\n\r\n  btnClickEmt() {\r\n    this.router.navigate(['/todo']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./detail-todo-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoService",
                        "type": "TodoService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-todo-detail [todo] = \"todoDetail\" (btnClickEmt)=\"btnClickEmt()\"> </brc-todo-detail>\r\n"
        },
        {
            "name": "EditListExcelComponent",
            "id": "component-EditListExcelComponent-66d83998c576077aac9c4524749f0d8f",
            "file": "src/app/shared/components/edit-list-excel/edit-list-excel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-edit-list-excel",
            "styleUrls": [
                "./edit-list-excel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-list-excel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "labelExcel",
                    "defaultValue": "{\r\n    content: 'Edit ',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "line": 18,
                    "type": "LabelInterface"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rows",
                    "defaultValue": "[\r\n      {\r\n        title: 'nv_abc',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'xyz ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'abcxyz',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: '3',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'X',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: '',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SocketClientService } from 'src/app/socket-client/socket-client.service';\r\nimport { IsRead } from 'src/app/store/models/is_read.i';\r\nimport { LabelInterface } from 'src/app/store/models/label.i';\r\nimport { ReminderNotification } from 'src/app/store/models/reminder-notification.i';\r\nimport { NotificationService } from 'src/app/store/services/notification.service';\r\nimport { NotificationStoreFacade } from 'src/app/store/store-facades/notification.store-facade';\r\nimport { Column } from 'src/app/store/models/column.i';\r\n@Component({\r\n  selector: 'brc-edit-list-excel',\r\n  templateUrl: './edit-list-excel.component.html',\r\n  styleUrls: ['./edit-list-excel.component.scss'],\r\n})\r\n\r\n// na-khanh\r\nexport class EditListExcelComponent implements OnInit {\r\n  @Input() labelExcel: LabelInterface = {\r\n    content: 'Edit ',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n\r\n  columns: Column[] = [\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ];\r\n\r\n    rows: Column[] = [\r\n      {\r\n        title: 'nv_abc',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'xyz ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'abcxyz',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: '3',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'X',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: '',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ];\r\n  // // @Input() configButtonAdd: configButton = {\r\n  // //   colorButton: 'primary',\r\n  // //   colorMouseOver: 'Basic',\r\n  // //   colorMouseOut: 'primary',\r\n  // //   type: 'submit',\r\n  // //   text: 'Add ideal',\r\n  // // }\r\n\r\n  // @Input() configButtonAdd: ScheduleList = {\r\n  //   filterBox: 'Filter Box',\r\n  //   title: 'Schedule List',\r\n  //   btnAdd: 'Add list',\r\n  // };\r\n\r\n  // @Input() notification_columns: Column[] = [];\r\n  // @Input() notification_dataSource: Object[] = [];\r\n  // @Input() notification_showRowSelection: boolean = false;\r\n  // //Input pagination\r\n  // @Input() notification_totalRecords: number = 0;\r\n  // @Input() notification_recordsPerPage: number = 0;\r\n  // //Input notificationList\r\n  // @Input() configNotificationList: string = \"Notifications List\";\r\n\r\n  // @Input() showRowAction : true;\r\n\r\n  // @Output() rowClicked = new EventEmitter<Object>();\r\n  // @Output() rowsSelected = new EventEmitter<Object>();\r\n  // @Output() sort = new EventEmitter<SortItem[]>();\r\n  // handleClickRow(data: Object) {\r\n  //   this.rowClicked.emit(data);\r\n  // }\r\n\r\n  // handleSelectRow(data: Object) {\r\n  //   this.rowsSelected.emit(data);\r\n  // }\r\n\r\n  // handlesort(data: SortItem[]) {\r\n  //   this.sort.emit(data);\r\n  // }\r\n  constructor( ) {\r\n  }\r\n  ngOnInit(): void {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    text-align: center;\r\n}\r\n\r\n.row-button{\r\n    text-align: center;\r\n\r\n  }\r\n.row-button-detail{\r\n    margin:20px;\r\n}\r\n.row-input{\r\n    margin-top: 20px;\r\n} \r\n\r\n.flex-container {\r\n    padding: 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    -ms-box-orient: horizontal;\r\n    display: -webkit-box;\r\n    display: -moz-box;\r\n    display: -ms-flexbox;\r\n    display: -moz-flex;\r\n    display: -webkit-flex;\r\n    display: flex;\r\n  }\r\n\r\n  .nowrap  { \r\n    -webkit-flex-wrap: nowrap;\r\n    flex-wrap: nowrap;\r\n  } ",
                    "styleUrl": "./edit-list-excel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 79
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"pop-up-add-excel\"> -->\r\n  <brc-label [label]=\"labelExcel\" class=\"header\"></brc-label>\r\n  <!-- <form class=\"content\" name=\"form\" #f=\"ngForm\"> -->\r\n    <div class=\"flex-container nowrap\">\r\n      <mat-list >\r\n          <mat-list-item *ngFor=\"let column of columns\" class=\"row-input\">\r\n            {{column.title}}\r\n          </mat-list-item>   \r\n      </mat-list>\r\n      <mat-list style=\"width: 100%;\">\r\n        <mat-list-item *ngFor=\"let row of rows\" class=\"row-input\">\r\n        <mat-form-field style=\"width: 100%;\">\r\n          <input matInput value={{row.title}}>\r\n          </mat-form-field>\r\n        </mat-list-item>\r\n      </mat-list>\r\n  </div>\r\n    <div class=\"row-button\">\r\n      <div class=\"row-button\" style=\"width: 100%; margin: auto;\">\r\n        <button mat-raised-button color=\"primary\" class=\"row-button-detail\" >Edit</button>\r\n        <button mat-raised-button>Cancel</button>\r\n      </div>\r\n    </div>\r\n\r\n  <!-- </form> -->\r\n<!-- </div> -->"
        },
        {
            "name": "ExcelDetailPageComponent",
            "id": "component-ExcelDetailPageComponent-7494bd7129607f67cda481ad79f70fef",
            "file": "src/app/modules/excel-detail-page/excel-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-excel-detail-page",
            "styleUrls": [
                "./excel-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./excel-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\r\n    {\r\n      title: 'Stt',\r\n      dataIndex: 'Stt',\r\n      sort: true,\r\n    },\r\n    {\r\n      title: 'Họ và tên nhân viên',\r\n      dataIndex: 'Employees',\r\n      sort: true,\r\n    },\r\n    {\r\n      title: 'Tên vợ / chồng ',\r\n      dataIndex: 'Employees1'\r\n    },\r\n    {\r\n      title: 'Tên con',\r\n      dataIndex: 'Employees2',\r\n    },\r\n    {\r\n      title: 'Tuổi',\r\n      dataIndex: 'Employees3',\r\n    },\r\n    {\r\n      title: 'Đăng ký suất ăn',\r\n      dataIndex: 'Employees4',\r\n    },\r\n    {\r\n      title: 'Không đăng ký suất ăn',\r\n      dataIndex: 'Employees5',\r\n    },\r\n  ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[\r\n    {\r\n      Stt: '1',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'Spider men',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '2',\r\n      Employees: 'n_anh',\r\n      Employees1: 'Iron men',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '3',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '4',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '5',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "http",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_columns",
                    "defaultValue": "[]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "notification_dataSource",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "notification_showRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "pageOnClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Column } from 'src/app/store/models/column.i';\r\n\r\nimport { NotificationStoreFacade } from '../../store/store-facades/notification.store-facade';\r\n@Component({\r\n  selector: 'brc-excel-detail-page',\r\n  templateUrl: './excel-detail-page.component.html',\r\n  styleUrls: ['./excel-detail-page.component.scss'],\r\n})\r\nexport class ExcelDetailPageComponent implements OnInit {\r\n  \r\n  notification_columns: Column[] = [];\r\n  notification_dataSource: Object[] = [];\r\n  notification_showRowSelection: boolean = false;\r\n  //Input pagination\r\n  notification_totalRecords: number = 0;\r\n  notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  configNotificationList: string = \"Notifications List\";\r\n\r\n  showRowAction : boolean = true;\r\n  \r\n  constructor(\r\n    public http: HttpClient,\r\n    private router: Router,\r\n    private notificationStore: NotificationStoreFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.notification_columns = this.columns;\r\n    this.notification_dataSource = this.dataSource;\r\n  }\r\n  pageOnClickBtnAdd() {\r\n    this.router.navigateByUrl('excel-detail-page/add');\r\n  }\r\n  onSubmit() {\r\n    \r\n  }\r\n  columns: Column[] = [\r\n    {\r\n      title: 'Stt',\r\n      dataIndex: 'Stt',\r\n      sort: true,\r\n    },\r\n    {\r\n      title: 'Họ và tên nhân viên',\r\n      dataIndex: 'Employees',\r\n      sort: true,\r\n    },\r\n    {\r\n      title: 'Tên vợ / chồng ',\r\n      dataIndex: 'Employees1'\r\n    },\r\n    {\r\n      title: 'Tên con',\r\n      dataIndex: 'Employees2',\r\n    },\r\n    {\r\n      title: 'Tuổi',\r\n      dataIndex: 'Employees3',\r\n    },\r\n    {\r\n      title: 'Đăng ký suất ăn',\r\n      dataIndex: 'Employees4',\r\n    },\r\n    {\r\n      title: 'Không đăng ký suất ăn',\r\n      dataIndex: 'Employees5',\r\n    },\r\n  ];\r\n  \r\n  dataSource = [\r\n    {\r\n      Stt: '1',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'Spider men',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '2',\r\n      Employees: 'n_anh',\r\n      Employees1: 'Iron men',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '3',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '4',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n    {\r\n      Stt: '5',\r\n      Employees: 'nv_quoc',\r\n      Employees1: 'abc',\r\n      Employees3: '3',\r\n      Employees4: 'X',\r\n      Employees5: '',\r\n    },\r\n  ];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background-color: #dfe6e9;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.mat-form-field {\r\n  width: 100%;\r\n  min-width: 2vw;\r\n}\r\n\r\nmat-card-title,\r\nmat-card-content {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\nmat-form-field {\r\n  margin: 10px 0px;\r\n}\r\n\r\nmat-card {\r\n  max-height: 50%;\r\n}\r\n\r\n.button {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border: none;\r\n  box-shadow: none;\r\n}\r\n",
                    "styleUrl": "./excel-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-list-detail-excel [notification_columns] = \"notification_columns\"\r\n[notification_dataSource] = \"notification_dataSource\"\r\n[notification_showRowSelection] = \"notification_showRowSelection\"\r\n[notification_totalRecords] = \"notification_totalRecords\"\r\n[notification_recordsPerPage] = \"notification_recordsPerPage\"\r\n[configNotificationList] = \"configNotificationList\"\r\n[showRowAction] = \"showRowAction\"\r\n(btnAddTodo)=\"pageOnClickBtnAdd()\"\r\n></brc-list-detail-excel>\r\n\r\n"
        },
        {
            "name": "ExcelListPageComponent",
            "id": "component-ExcelListPageComponent-d55d822553e83691b787a92133fbb447",
            "file": "src/app/modules/excel-list-page/excel-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-import-page",
            "styleUrls": [
                "./excel-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./excel-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columns",
                    "defaultValue": "[\r\n    {\r\n      title: 'Template Name',\r\n      dataIndex: 'template_name',\r\n    },\r\n    {\r\n      title: 'Description',\r\n      dataIndex: 'description',\r\n    },\r\n    {\r\n      title: 'Date',\r\n      dataIndex: 'date'\r\n    }\r\n  ]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[\r\n    {\r\n      id: '1',\r\n      template_name: 'Template 1',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '2',\r\n      template_name: 'Template 2',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '3',\r\n      template_name: 'Template 3',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '4',\r\n      template_name: 'Template 4',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "http",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_columns",
                    "defaultValue": "[]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "notification_dataSource",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "notification_showRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showBtn",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "pageOnClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Column } from 'src/app/store/models/column.i';\r\n\r\nimport { NotificationStoreFacade } from '../../store/store-facades/notification.store-facade';\r\n@Component({\r\n  selector: 'brc-import-page',\r\n  templateUrl: './excel-list-page.component.html',\r\n  styleUrls: ['./excel-list-page.component.scss'],\r\n})\r\nexport class ExcelListPageComponent implements OnInit {\r\n  \r\n  notification_columns: Column[] = [];\r\n  notification_dataSource: Object[] = [];\r\n  notification_showRowSelection: boolean = false;\r\n  showBtn: boolean = true;\r\n  //Input pagination\r\n  notification_totalRecords: number = 0;\r\n  notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  configNotificationList: string = \"Notifications List\";\r\n\r\n  showRowAction : boolean = true;\r\n  \r\n  constructor(\r\n    public http: HttpClient,\r\n    private router: Router,\r\n    private notificationStore: NotificationStoreFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.notification_columns = this.columns;\r\n    this.notification_dataSource = this.dataSource;\r\n  }\r\n  pageOnClickBtnAdd() {\r\n    this.router.navigateByUrl('import-excel/add');\r\n  }\r\n  handleDetail(){\r\n    \r\n  }\r\n  onSubmit() {\r\n    \r\n  }\r\n  columns: Column[] = [\r\n    {\r\n      title: 'Template Name',\r\n      dataIndex: 'template_name',\r\n    },\r\n    {\r\n      title: 'Description',\r\n      dataIndex: 'description',\r\n    },\r\n    {\r\n      title: 'Date',\r\n      dataIndex: 'date'\r\n    }\r\n  ];\r\n  \r\n  dataSource = [\r\n    {\r\n      id: '1',\r\n      template_name: 'Template 1',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '2',\r\n      template_name: 'Template 2',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '3',\r\n      template_name: 'Template 3',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n    {\r\n      id: '4',\r\n      template_name: 'Template 4',\r\n      description: '123',\r\n      date: '02/02/2020',\r\n    },\r\n  ];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background-color: #dfe6e9;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.mat-form-field {\r\n  width: 100%;\r\n  min-width: 2vw;\r\n}\r\n\r\nmat-card-title,\r\nmat-card-content {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\nmat-form-field {\r\n  margin: 10px 0px;\r\n}\r\n\r\nmat-card {\r\n  max-height: 50%;\r\n}\r\n\r\n.button {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border: none;\r\n  box-shadow: none;\r\n}\r\n",
                    "styleUrl": "./excel-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-list-excel \r\n[notification_columns] = \"notification_columns\"\r\n[showBtn] = \"showBtn\"\r\n[notification_dataSource] = \"notification_dataSource\"\r\n[notification_showRowSelection] = \"notification_showRowSelection\"\r\n[notification_totalRecords] = \"notification_totalRecords\"\r\n[notification_recordsPerPage] = \"notification_recordsPerPage\"\r\n[configNotificationList] = \"configNotificationList\"\r\n[showRowAction] = \"showRowAction\"\r\n(btnAddTodo)=\"pageOnClickBtnAdd()\"\r\n></brc-list-excel>"
        },
        {
            "name": "ExcelTemplateDetailPageComponent",
            "id": "component-ExcelTemplateDetailPageComponent-e82191552c56f37df43e528dff4da6e9",
            "file": "src/app/modules/excel-template-detail-page/excel-template-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-excel-template-detail-page",
            "styleUrls": [
                "./excel-template-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./excel-template-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "btnAddTodo",
                    "defaultValue": "new EventEmitter<string>()",
                    "type": "EventEmitter<string>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "list_detail_excel_columns",
                    "defaultValue": "[]",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "list_detail_excel_dataSource",
                    "defaultValue": "[]",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "list_detail_excel_showRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "type": "EventEmitter<number>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "todoPageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "todoRecordsPerPage",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "todoTotalRecords",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ScheduleFilter } from '../../store/actions/schedule.action';\r\nimport { configButton } from '../../store/models/button.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { Column, SortItem } from '../../store/models/column.i';\r\nimport { LabelInterface } from '../../store/models/label.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport {\r\n  ButtonFilterSchedule,\r\n  LabelFilterSchedule,\r\n  PlaceholderFilterSchedule,\r\n} from '../../store/models/schedule-filter.i';\r\nimport {\r\n  FilterSchedule,\r\n  Schedule,\r\n} from '../../store/models/schedule.i';\r\nimport { ScheduleList } from '../../store/models/scheduleList.i';\r\nimport { ScheduleState } from '../../store/reducers/schedule.reducer';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\nimport { UserNames } from '../../store/models/schedule.i';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'brc-excel-template-detail-page',\r\n  templateUrl: './excel-template-detail-page.component.html',\r\n  styleUrls: ['./excel-template-detail-page.component.scss'],\r\n})\r\nexport class ExcelTemplateDetailPageComponent implements OnInit {\r\n  \r\n  list_detail_excel_columns: Column[] = [];\r\n  list_detail_excel_dataSource: Object[] = [];\r\n  list_detail_excel_showRowSelection: boolean = false;\r\n  //Input pagination\r\n  notification_totalRecords: number = 0;\r\n  notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  configNotificationList: string = \"Notifications List\";\r\n\r\n  showRowAction :boolean = true;\r\n\r\n  rowClicked = new EventEmitter<Object>();\r\n  rowsSelected = new EventEmitter<Object>();\r\n  sort = new EventEmitter<SortItem[]>();\r\n  btnAddTodo: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n\r\n  // pagination \r\n  todoTotalRecords: number = 100;\r\n  todoRecordsPerPage: number = 10;\r\n  todoPageIndex: number = 0;\r\n\r\n  onPageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  constructor(){}\r\n  ngOnInit(){\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // private filter: FilterSchedule = this.storeFacade.filter;\r\n  // public scheduleTotalRecords: number = 100;\r\n  // public scheduleRecordsPerPage: number = 5;\r\n  // public schedulePageIndex: number = 0;\r\n  // public scheduleShowRowSelection: boolean = false;\r\n  // public scheduleColumns: Column[] = columns;\r\n  // public scheduleDataSource = [];\r\n  // buttonFilterSchedule: ButtonFilterSchedule<\r\n  //   configButton\r\n  // > = configButtonFilterSchedule;\r\n  // labelScheduleFilter: LabelFilterSchedule<\r\n  //   LabelInterface\r\n  // > = configLabelScheduleFilter;\r\n  // placeholderFilterSchedule: PlaceholderFilterSchedule = configPlaceholderFilterSchedule;\r\n  // scheduleDataCategory: Category[];\r\n  // scheduleDataImportance: LabelledValue<string>[] = dataImportance;\r\n  // configScheduleList: ScheduleList = {\r\n  //   filterBox: 'Filter Box',\r\n  //   title: 'Schedule List',\r\n  //   btnAdd: 'Add Schedule',\r\n  // };\r\n  // constructor(private storeFacade: StoreFacade, private _router: Router) {}\r\n  // ngOnInit(): void {\r\n  //   this.storeFacade.getValuePaginationAndFilter();\r\n  // //  this.storeFacade.getCategorySchedule();\r\n  //   this.storeFacade.dispatchCategory();\r\n  //   //thực hiện action filter schedule để gán giá trị vào store\r\n  //   this.storeFacade.filterSchedule(\r\n  //     this.storeFacade.pagination,\r\n  //     this.storeFacade.filter\r\n  //   );\r\n  //   this.storeFacade.getValueScheduleTablePage().subscribe((schedule) => {\r\n  //     this.updateData(schedule);\r\n  //   });\r\n  // }\r\n  // updateData(schedule: ScheduleState) {\r\n  //   let categories: Category[] = [];\r\n  //   schedule.categories?.forEach((schedule) => {\r\n  //     categories.push({\r\n  //       categoryName: schedule.name,\r\n  //       categoryId: schedule.scheduleCategoryId,\r\n  //     });\r\n  //   });\r\n  //   this.scheduleDataCategory = categories;\r\n  //   this.scheduleDataSource = this.convertDataSchedule(schedule.listSchedule);\r\n  //   this.scheduleTotalRecords = schedule.pagination.total;\r\n  //   this.scheduleRecordsPerPage = schedule.pagination.pageSize;\r\n  //   this.schedulePageIndex = schedule.pagination.page - 1;\r\n  // }\r\n\r\n  // convertDataSchedule(schedule: Schedule[]): Schedule[] {\r\n  //   var dataFake = [];\r\n  //   schedule.forEach((item) => {\r\n  //     let data = {\r\n  //       scheduleId: item.scheduleId,\r\n  //       title: item.title,\r\n  //       description: item.description,\r\n  //       place: item.place,\r\n  //       importance: item.importance,\r\n  //       typeRepeat: item.typeRepeat,\r\n  //       time: `${formatDate(\r\n  //         new Date(item.timeStart),\r\n  //         'yyyy-MM-dd HH:mm ',\r\n  //         'en'\r\n  //       )} - ${formatDate(new Date(item.dueTime), 'yyyy-MM-dd HH:mm ', 'en')}`,\r\n  //       dueTime: item.dueTime,\r\n  //       scheduleCategoryId: item.scheduleCategoryId,\r\n  //       scheduleCategoryName: item.scheduleCategoryName,\r\n  //       timeStart: item.timeStart,\r\n  //       userName: item.userName,\r\n  //       users: this.convertUserToString(JSON.parse(item.users)),\r\n  //     };\r\n  //     dataFake.push(data);\r\n  //   });\r\n  //   return dataFake;\r\n  // }\r\n\r\n  // convertUserToString(users: UserNames[]): string {\r\n  //   if (users == null) return '';\r\n  //   return users.map((e) => e.userName).join(', ') + '.';\r\n  // }\r\n\r\n  // scheduleFilter(data: FilterSchedule) {\r\n  //   this.filter = data;\r\n  //   let pagination = Object.assign({}, this.storeFacade.pagination);\r\n  //   pagination.page = 1;\r\n  //   this.storeFacade.filterSchedule(pagination, this.filter);\r\n  // }\r\n\r\n  // scheduleClick(data: Object) {\r\n  //   this._router.navigateByUrl(`schedule/detail/${data['scheduleId']}`);\r\n  // }\r\n\r\n  // scheduleSelect(data: ScheduleFilter) {\r\n  //   console.log(data);\r\n  // }\r\n\r\n  // scheduleSort(data: SortItem[]) {\r\n  //   this.filter = {\r\n  //     textSearch: this.filter.textSearch,\r\n  //     category: this.filter.category,\r\n  //     importance: this.filter.importance,\r\n  //     fromDateList: this.filter.fromDateList,\r\n  //     toDateList: this.filter.toDateList,\r\n  //     sort: data,\r\n  //   };\r\n  //   let pagination = Object.assign({}, this.storeFacade.pagination);\r\n  //   this.storeFacade.filterSchedule(pagination, this.filter);\r\n  // }\r\n\r\n  // scheduleAdd(data) {\r\n  //   this._router.navigateByUrl('schedule/add');\r\n  // }\r\n\r\n  // changePage(data) {\r\n  //   let pagination = Object.assign({}, this.storeFacade.pagination);\r\n  //   pagination.page = Number(data.pageIndex) + 1;\r\n  //   this.storeFacade.filterSchedule(pagination, this.filter);\r\n  // }\r\n  // btnClickEmt(){\r\n  //   this._router.navigate(['/schedule']);\r\n  // }\r\n}\r\n// // mock data\r\n// const columns: Column[] = [\r\n//   {\r\n//     title: 'Title Schedule',\r\n//     dataIndex: 'title',\r\n//     sort: true,\r\n//   },\r\n//   {\r\n//     title: 'Time',\r\n//     dataIndex: 'time',\r\n//   },\r\n//   {\r\n//     title: 'Category',\r\n//     dataIndex: 'scheduleCategoryName',\r\n//     sort: true,\r\n//   },\r\n//   {\r\n//     title: 'Description',\r\n//     dataIndex: 'description',\r\n//   },\r\n//   {\r\n//     title: 'Place',\r\n//     dataIndex: 'place',\r\n//     sort: true,\r\n//   },\r\n//   {\r\n//     title: 'Importance',\r\n//     dataIndex: 'importance',\r\n//     sort: true,\r\n//   },\r\n//   {\r\n//     title: 'Type Repeat',\r\n//     dataIndex: 'typeRepeat',\r\n//     sort: true,\r\n//   },\r\n//   {\r\n//     title: 'Users',\r\n//     dataIndex: 'users',\r\n//   },\r\n// ];\r\n\r\n// //filter\r\n// const configPlaceholderFilterSchedule: PlaceholderFilterSchedule = {\r\n//   placeholderSearch: 'search schedule...',\r\n//   titleImportance: 'importance',\r\n//   titleCategory: 'category',\r\n// };\r\n\r\n// const configLabelScheduleFilter: LabelFilterSchedule<LabelInterface> = {\r\n//   labelImportance: {\r\n//     content: 'Importance',\r\n//     size: 15,\r\n//     color: '',\r\n//     backgroundColor: '',\r\n//   },\r\n//   labelFromDate: {\r\n//     content: 'From date',\r\n//     size: 15,\r\n//     color: '',\r\n//     backgroundColor: '',\r\n//   },\r\n//   labelToDate: {\r\n//     content: 'To date',\r\n//     size: 15,\r\n//     color: '',\r\n//     backgroundColor: '',\r\n//   },\r\n//   labelCategory: {\r\n//     content: 'Category',\r\n//     size: 15,\r\n//     color: '',\r\n//     backgroundColor: '',\r\n//   },\r\n// };\r\n\r\n// const configButtonFilterSchedule: ButtonFilterSchedule<configButton> = {\r\n//   buttonSubmit: {\r\n//     colorButton: 'primary',\r\n//     colorMouseOver: 'primary',\r\n//     colorMouseOut: 'primary',\r\n//     type: 'submit',\r\n//     text: 'Filter',\r\n//   },\r\n//   buttonReset: {\r\n//     colorButton: 'basic',\r\n//     colorMouseOver: 'basic',\r\n//     colorMouseOut: 'basic',\r\n//     type: 'reset',\r\n//     text: 'Clear',\r\n//   },\r\n// };\r\n\r\n// const dataImportance: LabelledValue<string>[] = [\r\n//   {\r\n//     label: 'High',\r\n//     value: 'High',\r\n//   },\r\n//   {\r\n//     label: 'Medium',\r\n//     value: 'Medium',\r\n//   },\r\n//   {\r\n//     label: 'Normal',\r\n//     value: 'Normal',\r\n//   },\r\n// ];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./excel-template-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 53
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-list-detail-excel \r\n  [list_detail_excel_columns] = \"list_detail_excel_columns\"\r\n  [list_detail_excel_dataSource] = \"list_detail_excel_dataSource\"\r\n  [list_detail_excel_showRowSelection] = \"list_detail_excel_showRowSelection\"\r\n  [showRowAction] = \"showRowAction\"\r\n  [todoTotalRecords] = \"todoTotalRecords\"\r\n  [todoRecordsPerPage] = \"todoRecordsPerPage\"\r\n  [todoPageIndex] = \"todoPageIndex\"\r\n>\r\n</brc-list-detail-excel>\r\n\r\n"
        },
        {
            "name": "ExpansionFilterScheduleComponent",
            "id": "component-ExpansionFilterScheduleComponent-6111bb7d0be3175dfd0072b8c4eeb151",
            "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-expansion-filter-schedule",
            "styleUrls": [
                "./expansion-filter-schedule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./expansion-filter-schedule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFilterSchedule",
                    "line": 16,
                    "type": "ButtonFilterSchedule<configButton>"
                },
                {
                    "name": "labelScheduleFilter",
                    "line": 17,
                    "type": "LabelFilterSchedule<LabelInterface>"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  }",
                    "line": 18,
                    "type": "PlaceholderFilterSchedule"
                },
                {
                    "name": "scheduleDataCategory",
                    "line": 23,
                    "type": "Category[]"
                },
                {
                    "name": "scheduleDataImportance",
                    "line": 24,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "scheduleFilterExpansionLabel",
                    "defaultValue": "{\r\n    title: 'Filter Schedule',\r\n    description: 'Click to expansion',\r\n  }",
                    "line": 25,
                    "type": "LabelExpansionFilter"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "scheduleValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { configButton } from 'src/app/store/models/button.i';\r\nimport { Category } from 'src/app/store/models/category.i';\r\nimport { LabelInterface } from 'src/app/store/models/label.i';\r\nimport { LabelledValue, LabelExpansionFilter} from 'src/app/store/models/labelvalue.i';\r\nimport { ButtonFilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from 'src/app/store/models/schedule-filter.i';\r\nimport { FilterSchedule } from 'src/app/store/models/schedule.i';\r\n\r\n@Component({\r\n  selector: 'brc-expansion-filter-schedule',\r\n  templateUrl: './expansion-filter-schedule.component.html',\r\n  styleUrls: ['./expansion-filter-schedule.component.scss'],\r\n})\r\nexport class ExpansionFilterScheduleComponent {\r\n  //Input filter\r\n  @Input() buttonFilterSchedule: ButtonFilterSchedule<configButton>;\r\n  @Input() labelScheduleFilter: LabelFilterSchedule<LabelInterface>;\r\n  @Input() placeholderFilterSchedule: PlaceholderFilterSchedule = {\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  };\r\n  @Input() scheduleDataCategory: Category[];\r\n  @Input() scheduleDataImportance: LabelledValue<string>[];\r\n  @Input() scheduleFilterExpansionLabel: LabelExpansionFilter = {\r\n    title: 'Filter Schedule',\r\n    description: 'Click to expansion',\r\n  };\r\n  @Output() valueFilter = new EventEmitter();\r\n\r\n  constructor() {}\r\n  scheduleValueFilter(data: FilterSchedule) {\r\n    this.valueFilter.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-expansion-panel-header:not([aria-disabled=true]) {\r\n    height: 40px !important;\r\n}\r\n",
                    "styleUrl": "./expansion-filter-schedule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 29
            },
            "templateData": "<mat-accordion>\r\n    <mat-expansion-panel>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>\r\n          {{scheduleFilterExpansionLabel.title}}\r\n        </mat-panel-title>\r\n        <mat-panel-description>\r\n          {{scheduleFilterExpansionLabel.description}}\r\n        </mat-panel-description>\r\n      </mat-expansion-panel-header>\r\n        <div style=\"display: block;\">\r\n          <brc-schedule-filter style=\"font-size: small;\"\r\n          [buttonFilterSchedule]=\"buttonFilterSchedule\" \r\n          [labelScheduleFilter]=\"labelScheduleFilter\"\r\n          [placeholderFilterSchedule]=\"placeholderFilterSchedule\" \r\n          [dataCategory]=\"scheduleDataCategory\"\r\n          [dataImportance]=\"scheduleDataImportance\" \r\n          (valueFilter)=\"scheduleValueFilter($event)\">\r\n          </brc-schedule-filter>\r\n        </div>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>\r\n"
        },
        {
            "name": "FilterNotificationComponent",
            "id": "component-FilterNotificationComponent-3357d9fe32926266eadc3790e0a5028a",
            "file": "src/app/shared/components/filter-notification/filter-notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-filter-notification",
            "styleUrls": [
                "./filter-notification.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSelect",
                    "defaultValue": "[]",
                    "line": 14
                },
                {
                    "name": "events",
                    "defaultValue": "new Observable<void>()",
                    "line": 13,
                    "type": "Observable<void>"
                },
                {
                    "name": "labelSelect",
                    "line": 15
                }
            ],
            "outputsClass": [
                {
                    "name": "categorySelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "statusFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "categorySelect",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueCategory",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueFocus",
                    "defaultValue": "-1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handlerButton",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSelect",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n\r\n@Component({\r\n  selector: 'brc-filter-notification',\r\n  templateUrl: './filter-notification.component.html',\r\n  styleUrls: ['./filter-notification.component.scss']\r\n})\r\nexport class FilterNotificationComponent implements OnInit {\r\n  public valueFocus: number = -1;\r\n  public categorySelect: boolean = true;\r\n  @Input() events: Observable<void> = new Observable<void>();\r\n  @Input() dataSelect = [];\r\n  @Input() labelSelect;\r\n  @Output() categorySelected = new EventEmitter<string>();\r\n  @Output() statusFilter: EventEmitter<string> = new EventEmitter();\r\n  public valueCategory = 0;\r\n  constructor() { }\r\n  ngOnInit(): void {\r\n    this.events.subscribe(\r\n      () => {\r\n        this.valueFocus = -1;\r\n        this.valueCategory = 0;\r\n      }\r\n    )\r\n  }\r\n  handlerButton(value) {\r\n    this.valueFocus = value\r\n    console.log(this.valueFocus)\r\n    this.statusFilter.emit(value);\r\n  }\r\n\r\n  handlerSelect(value :string) {\r\n\r\n    this.categorySelected.emit(value);\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field-wrapper {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .btnGroup {\r\n    margin: 0px 0px;\r\n    max-height: 50px !important;\r\n  }\r\n  \r\n  .list-category {\r\n    font-size: 15px;\r\n  }\r\n  \r\n  .button-fil {\r\n    min-width: 0;\r\n    font-size: 12px;\r\n    padding: 0 !important;\r\n    max-height: 50px;\r\n  }\r\n  \r\n  .button-fil:focus {\r\n    background-color: rgb(165, 163, 163);\r\n  }\r\n  \r\n  h2 {\r\n    margin: 0 0 0 10px;\r\n  }\r\n  \r\n  .buttonGroup {\r\n    max-height: 50px;\r\n  }",
                    "styleUrl": "./filter-notification.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" [fxFlex]=\"100\">\r\n  <div class=\"btnGroup\" [fxFlex]=\"10\">\r\n    <mat-button-toggle-group\r\n      class=\"buttonGroup\"\r\n      fxLayout=\"row\"\r\n      [fxFlex]=\"100\"\r\n      #status\r\n      [(ngModel)]=\"valueFocus\"\r\n    >\r\n      <mat-button-toggle\r\n        [value]=\"-1\"\r\n        class=\"button-fil\"\r\n        fxFlex=\"33\"\r\n        fxLayoutAlign=\"center space-around\"\r\n        (change)=\"handlerButton($event.value)\"\r\n        >All\r\n      </mat-button-toggle>\r\n      <mat-button-toggle\r\n        [value]=\"1\"\r\n        class=\"button-fil\"\r\n        fxFlex=\"33\"\r\n        fxLayoutAlign=\"center space-around\"\r\n        (change)=\"handlerButton($event.value)\"\r\n        >Readed\r\n      </mat-button-toggle>\r\n      <mat-button-toggle\r\n        [value]=\"0\"\r\n        class=\"button-fil\"\r\n        fxFlex=\"34\"\r\n        fxLayoutAlign=\"center space-around\"\r\n        (change)=\"handlerButton($event.value)\"\r\n        >Unread\r\n      </mat-button-toggle>\r\n    </mat-button-toggle-group>\r\n  </div>\r\n  <div class=\"cateSelect\" [fxFlex]=\"90\">\r\n    <h2>{{ labelSelect }}</h2>\r\n    <mat-selection-list\r\n      #category\r\n      [multiple]=\"false\"\r\n      [(ngModel)]=\"valueCategory\"\r\n    >\r\n      <mat-list-option\r\n        [value]=\"0\"\r\n        class=\"list-category\"\r\n        (click)=\"handlerSelect('')\"\r\n        [selected]=\"categorySelect\"\r\n        >All\r\n      </mat-list-option>\r\n      <mat-list-option\r\n        *ngFor=\"let category of dataSelect\"\r\n        [value]=\"category.eventName\"\r\n        class=\"list-category\"\r\n        (click)=\"handlerSelect(category.eventName)\"\r\n        >{{ category.eventName }}</mat-list-option\r\n      >\r\n    </mat-selection-list>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-65d622ae3eeeb10e7a503e87495132a8",
            "file": "src/app/shared/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countNotification",
                    "defaultValue": "2",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "menu",
                    "line": 14,
                    "type": "MenuItem[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "emitValueLink",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 17,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "emitValueNotification",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showToggle",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "toggleMenu",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "clickLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "emitLink",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateNotification",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 43
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { MenuItem } from './../../../store/models/menu-item.i';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { HostListener } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SocketClientService } from '../../../socket-client/socket-client.service';\r\nimport { StoreFacade } from '../../../store/store-facades/login.store-facade';\r\n\r\n@Component({\r\n  selector: 'brc-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @Input() menu: MenuItem[];\r\n  @Input() countNotification: number = 2;\r\n  @Output() logout = new EventEmitter();\r\n  @Output() emitValueLink : EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() emitValueNotification : EventEmitter<string> = new EventEmitter<string>();\r\n  showToggle = false;\r\n  toggleMenu = true;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private socketClient: SocketClientService,\r\n    private storeFace : StoreFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (window.innerWidth - 300 < this.menu.length * 100) {\r\n      this.toggleMenu = false;\r\n    } else {\r\n      this.toggleMenu = true;\r\n      this.showToggle = false;\r\n    }\r\n  }\r\n  emitLink(data : string){\r\n    this.emitValueLink.emit(data);\r\n  }\r\n  navigateNotification(data:string){\r\n    this.emitValueNotification.emit(data);\r\n  }\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize(event?) {\r\n    if (window.innerWidth - 300 < this.menu.length * 100) {\r\n      this.toggleMenu = false;\r\n    } else {\r\n      this.toggleMenu = true;\r\n      this.showToggle = false;\r\n    }\r\n  }\r\n  clickLogout() {\r\n    localStorage.clear();\r\n    this.storeFace.logout();\r\n    this.socketClient.disconnectSocket();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-spacer {\r\n    flex: 1 1 auto;\r\n}\r\n\r\n// .toggleMenu{\r\n//     display: none;\r\n// }\r\n\r\n.toggleMenu button{\r\n    float: left;\r\n}\r\n\r\n// @media only screen and (max-width: 499px) {\r\n//     .toggleMenu{\r\n//         display: block;\r\n//     }\r\n//     .menu{\r\n//         display: none;\r\n//     }\r\n// }\r\n.icon-notification{\r\n  margin-top: 5px;\r\n  margin-right: 20px;\r\n\r\n}\r\n.icon-notification a {\r\n\r\n  color: whitesmoke;\r\n}\r\nspan.icon-notification.logout {\r\n  font-size: 16px;\r\n  cursor: pointer;;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "socketClient",
                        "type": "SocketClientService"
                    },
                    {
                        "name": "storeFace",
                        "type": "StoreFacade"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "socketClient",
                        "type": "SocketClientService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeFace",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\r\n  <mat-toolbar-row\r\n    style=\"display: flex; justify-content: space-between;\"\r\n    class=\"menu\"\r\n    *ngIf=\"toggleMenu\"\r\n  >\r\n    <!-- <span style=\"color: #fff; font-weight: 400; font-size: larger; cursor: default;\">Schedule Manager</span> -->\r\n    <ul\r\n      style=\"display: flex; justify-content: space-between; margin-left: -45px;\"\r\n    >\r\n      <li *ngFor=\"let item of this.menu\">\r\n        <brc-header-item\r\n          [tab]=\"item\"\r\n          (emitLink)=\"emitLink($event)\"\r\n        ></brc-header-item>\r\n      </li>\r\n    </ul>\r\n    <div style=\"display: flex;\">\r\n      <span class=\"icon-notification\"\r\n        ><brc-notification-icon\r\n          [countNotification]=\"countNotification\"\r\n          (emitNotificationClick)=\"navigateNotification($event)\"\r\n        ></brc-notification-icon\r\n      ></span>\r\n      <span class=\"icon-notification logout\" (click)=\"clickLogout()\"\r\n        >Logout</span\r\n      >\r\n    </div>\r\n  </mat-toolbar-row>\r\n\r\n  <mat-toolbar-row\r\n    style=\"padding: 10px; justify-content: space-between;\"\r\n    *ngIf=\"!toggleMenu\"\r\n    class=\"toggleMenu\"\r\n  >\r\n    <!-- <span style=\"color: #fff; font-weight: 400; font-size: larger; cursor: default;\">Schedule Manager</span> -->\r\n    <button\r\n      style=\"justify-content: space-between;\"\r\n      (click)=\"showToggle = !showToggle\"\r\n      mat-icon-button\r\n      class=\"example-icon\"\r\n      aria-label=\"Example icon-button with menu icon\"\r\n    >\r\n      <mat-icon>menu</mat-icon>\r\n    </button>\r\n    <div style=\"display: flex;\">\r\n      <span class=\"icon-notification\"\r\n        ><brc-notification-icon\r\n          [countNotification]=\"countNotification\"\r\n          (emitNotificationClick)=\"navigateNotification($event)\"\r\n        ></brc-notification-icon\r\n      ></span>\r\n      <span class=\"icon-notification logout\" (click)=\"clickLogout()\"\r\n        >Logout</span\r\n      >\r\n    </div>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<mat-toolbar color=\"primary\" *ngIf=\"showToggle\">\r\n  <mat-toolbar-row\r\n    *ngFor=\"let item of this.menu\"\r\n    style=\"display: flex; justify-content: space-between;\"\r\n  >\r\n    <brc-header-item\r\n      [tab]=\"item\"\r\n      (emitLink)=\"emitLink($event)\"\r\n    ></brc-header-item>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "HeaderItemComponent",
            "id": "component-HeaderItemComponent-823c695d9276e2d20b72c4519452cfce",
            "file": "src/app/shared/components/header-item/header-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-header-item",
            "styleUrls": [
                "./header-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tab",
                    "line": 17,
                    "type": "MenuItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "emitLink",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { MenuItem } from './../../../store/models/menu-item.i';\r\nimport { Component, Input, OnInit, Output,EventEmitter } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'brc-header-item',\r\n  templateUrl: './header-item.component.html',\r\n  styleUrls: ['./header-item.component.scss']\r\n})\r\nexport class HeaderItemComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  @Input() tab: MenuItem;\r\n  @Output() emitLink : EventEmitter<string> =  new EventEmitter<string>();\r\n  navigate(data :string){\r\n    this.emitLink.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-container,\r\nmat-sidenav-content,\r\nmat-sidenav {\r\n  height: 100%;\r\n}\r\n\r\nmat-sidenav {\r\n  width: 200px;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: white;\r\n}\r\n\r\na:hover,\r\na:active {\r\n  color: lightgray;\r\n}\r\n\r\n.navigation-items {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n  cursor: pointer;\r\n  font-size: medium !important;\r\n}\r\n\r\n.icon {\r\n  display: inline-block;\r\n  height: 30px;\r\n  margin: 0 auto;\r\n  padding-right: 5px;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  width: 15%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.label {\r\n  display: inline-block;\r\n  line-height: 10px;\r\n  margin: 0;\r\n  width: 85%;\r\n}\r\n.header-item {\r\n  background-color: rgb(63, 81, 181);\r\n}\r\n",
                    "styleUrl": "./header-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p class=\"text_btn header\" (click)=\"navigate(this.tab.link)\" style=\"margin-bottom: 0px;\">\r\n  <mat-icon class=\"icon\">{{ this.tab.icon }}</mat-icon>\r\n  <span class=\"label\">{{ this.tab.text }}</span>\r\n</p>\r\n"
        },
        {
            "name": "LabelComponent",
            "id": "component-LabelComponent-5409c641290b80001cde7859c6321c5b",
            "file": "src/app/shared/components/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-label",
            "styleUrls": [
                "./label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 11,
                    "type": "LabelInterface"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\n\r\n@Component({\r\n  selector: 'brc-label',\r\n  templateUrl: './label.component.html',\r\n  styleUrls: ['./label.component.scss']\r\n})\r\nexport class LabelComponent {\r\n\r\n  @Input() label: LabelInterface;\r\n  constructor() { }\r\n\r\n  // ngOnInit(): void {\r\n  // }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./label.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<div [style.font-size.px]=\"label.size\" [style.color]=\"label.color\" [style.backgroundColor]=\"label.backgroundColor\">\r\n    {{label.content}}</div>"
        },
        {
            "name": "ListDetailExcelComponent",
            "id": "component-ListDetailExcelComponent-cd1958c9a7c139ec777993e8013d31e8",
            "file": "src/app/shared/components/list-detail-excel/list-detail-excel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-list-detail-excel",
            "styleUrls": [
                "./list-detail-excel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-detail-excel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add list',\r\n  }",
                    "line": 32,
                    "type": "ScheduleList"
                },
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "labelExcel",
                    "defaultValue": "{\r\n    content: 'Name file excel',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "line": 18,
                    "type": "LabelInterface"
                },
                {
                    "name": "list_detail_excel_columns",
                    "defaultValue": "[]",
                    "line": 38,
                    "type": "Column[]"
                },
                {
                    "name": "list_detail_excel_dataSource",
                    "defaultValue": "[]",
                    "line": 39,
                    "type": "Object[]"
                },
                {
                    "name": "list_detail_excel_showRowSelection",
                    "defaultValue": "false",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "line": 43,
                    "type": "number"
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "line": 42,
                    "type": "number"
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "false",
                    "line": 47,
                    "type": "boolean"
                },
                {
                    "name": "todoPageIndex",
                    "defaultValue": "0",
                    "line": 58,
                    "type": "number"
                },
                {
                    "name": "todoRecordsPerPage",
                    "defaultValue": "10",
                    "line": 57,
                    "type": "number"
                },
                {
                    "name": "todoTotalRecords",
                    "defaultValue": "100",
                    "line": 56,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddTodo",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 52,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 60,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleronPageChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlesort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "onPageEvent",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { ButtonFilterSchedule, FilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from '../../../store/models/schedule-filter.i';\r\nimport { ScheduleList } from '../../../store/models/scheduleList.i';\r\n\r\n@Component({\r\n  selector: 'brc-list-detail-excel',\r\n  templateUrl: './list-detail-excel.component.html',\r\n  styleUrls: ['./list-detail-excel.component.scss'],\r\n})\r\n\r\n//na-khanh\r\nexport class ListDetailExcelComponent implements OnInit {\r\n  @Input() labelExcel: LabelInterface = {\r\n    content: 'Name file excel',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n  // @Input() configButtonAdd: configButton = {\r\n  //   colorButton: 'primary',\r\n  //   colorMouseOver: 'Basic',\r\n  //   colorMouseOut: 'primary',\r\n  //   type: 'submit',\r\n  //   text: 'Add ideal',\r\n  // }\r\n\r\n  @Input() configButtonAdd: ScheduleList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add list',\r\n  };\r\n\r\n  @Input() list_detail_excel_columns: Column[] = [];\r\n  @Input() list_detail_excel_dataSource: Object[] = [];\r\n  @Input() list_detail_excel_showRowSelection: boolean = false;\r\n  //Input pagination\r\n  @Input() notification_totalRecords: number = 0;\r\n  @Input() notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  @Input() configNotificationList: string = \"Notifications List\";\r\n\r\n  @Input() showRowAction :boolean = false;\r\n\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  @Output() btnAddTodo: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n\r\n  // pagination \r\n  @Input() todoTotalRecords: number = 100;\r\n  @Input() todoRecordsPerPage: number = 10;\r\n  @Input() todoPageIndex: number = 0;\r\n\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n\r\nhandleronPageChange(data: number) {\r\n  this.onPageChange.emit(data);\r\n}\r\n\r\n\r\n  handleClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n\r\n  handleSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n\r\n  handlesort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n\r\n  onClickBtnAdd() {\r\n    this.btnAddTodo.emit();\r\n  }\r\n  onPageEvent($event){}\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    text-align: center;\r\n}",
                    "styleUrl": "./list-detail-excel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 82
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-label [label]=\"labelExcel\" class=\"header\"></brc-label>\r\n\r\n<div style=\"margin: auto; display: flex; justify-content: flex-end;\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"onClickBtnAdd()\">\r\n      <mat-icon>add</mat-icon>{{ configButtonAdd.btnAdd }}\r\n    </button>\r\n  </div>\r\n\r\n<brc-table [columns]=\"list_detail_excel_columns\" [dataSource]=\"list_detail_excel_dataSource\"\r\n[showRowSelection]=\"list_detail_excel_showRowSelection\" [showRowAction]=\"showRowAction\" (rowClicked)=\"handleClickRow($event)\"\r\n(rowsSelected)=\"handleSelectRow($event)\" (sort)=\"handlesort($event)\">\r\n</brc-table> \r\n\r\n\r\n<brc-mat-paginator\r\n[total]=\"todoTotalRecords\"\r\n[pageSize]=\"todoRecordsPerPage\"\r\n[pageIndex]=\"todoPageIndex\"\r\n(onPageChange)=\"onPageEvent($event)\"\r\n></brc-mat-paginator> "
        },
        {
            "name": "ListExcelComponent",
            "id": "component-ListExcelComponent-5d2c0963088a23ea5595fc1e07ad8d96",
            "file": "src/app/shared/components/list-excel/list-excel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-list-excel",
            "styleUrls": [
                "./list-excel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-excel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add list',\r\n  }",
                    "line": 48,
                    "type": "ScheduleList"
                },
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "line": 63,
                    "type": "string"
                },
                {
                    "name": "file",
                    "defaultValue": "null",
                    "line": 58,
                    "type": "File"
                },
                {
                    "name": "labelExcel",
                    "defaultValue": "{\r\n    content: 'Name file excel',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  }",
                    "line": 34,
                    "type": "LabelInterface"
                },
                {
                    "name": "notification_columns",
                    "defaultValue": "[]",
                    "line": 54,
                    "type": "Column[]"
                },
                {
                    "name": "notification_dataSource",
                    "defaultValue": "[]",
                    "line": 55,
                    "type": "Object[]"
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "line": 61,
                    "type": "number"
                },
                {
                    "name": "notification_showRowSelection",
                    "defaultValue": "false",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "line": 60,
                    "type": "number"
                },
                {
                    "name": "showBtn",
                    "defaultValue": "true",
                    "line": 57,
                    "type": "boolean"
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "false",
                    "line": 65,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddTodo",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 71,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowID",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[[1, 2], [3, 4]]",
                    "type": "AOA",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "dateNow",
                    "defaultValue": "new Date()",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "fileName",
                    "defaultValue": "'SheetJS.xlsx'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sheet_name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "wopts",
                    "defaultValue": "{ bookType: 'xlsx', type: 'array' }",
                    "type": "XLSX.WritingOptions",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerDetail",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlesort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "onFileInput",
                    "args": [
                        {
                            "name": "evt",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { ButtonFilterSchedule, FilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from '../../../store/models/schedule-filter.i';\r\nimport { ScheduleList } from '../../../store/models/scheduleList.i';\r\nimport * as XLSX from 'xlsx';\r\nimport { HttpClient, HttpRequest } from '@angular/common/http';\r\nimport { UploaderService } from './list-excel.service';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { environment } from '../../../../environments/environment'\r\ntype AOA = any[][];\r\n\r\n@Component({\r\n  selector: 'brc-list-excel',\r\n  templateUrl: './list-excel.component.html',\r\n  styleUrls: ['./list-excel.component.scss'],\r\n})\r\n\r\n//na-khanh\r\nexport class ListExcelComponent implements OnInit {\r\n  constructor(private http: HttpClient) {}\r\n  ngOnInit(): void {}\r\n  sheet_name: string;\r\n  dateNow : Date = new Date();\r\n\r\n  data: AOA = [[1, 2], [3, 4]];\r\n  wopts: XLSX.WritingOptions = { bookType: 'xlsx', type: 'array' };\r\n  fileName: string = 'SheetJS.xlsx';\r\n\r\n  @Input() labelExcel: LabelInterface = {\r\n    content: 'Name file excel',\r\n    size: 30,\r\n    color: '',\r\n    backgroundColor: '',\r\n  };\r\n  // @Input() configButtonAdd: configButton = {\r\n  //   colorButton: 'primary',\r\n  //   colorMouseOver: 'Basic',\r\n  //   colorMouseOut: 'primary',\r\n  //   type: 'submit',\r\n  //   text: 'Add ideal',\r\n  // }\r\n\r\n  @Input() configButtonAdd: ScheduleList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add list',\r\n  };\r\n\r\n  @Input() notification_columns: Column[] = [];\r\n  @Input() notification_dataSource: Object[] = [];\r\n  @Input() notification_showRowSelection: boolean = false;\r\n  @Input() showBtn: boolean = true;\r\n  @Input() file: File = null;\r\n  //Input pagination\r\n  @Input() notification_totalRecords: number = 0;\r\n  @Input() notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  @Input() configNotificationList: string = \"Notifications List\";\r\n\r\n  @Input() showRowAction :boolean = false;\r\n\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowID = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  @Output() btnAddTodo: EventEmitter<string> = new EventEmitter<string>();\r\n  handleClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n\r\n  handleSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n\r\n  handlesort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n\r\n  onClickBtnAdd() {\r\n    this.btnAddTodo.emit();\r\n  }\r\n\r\n  onFileInput(evt: any){\r\n    const target: DataTransfer = <DataTransfer>(evt.target);\r\n    if (target.files.length !== 1) throw new Error('Cannot use multiple files');\r\n    const reader: FileReader = new FileReader();\r\n    reader.onload = (e: any) => {\r\n      /* read workbook */\r\n      const bstr: string = e.target.result;\r\n      const wb: XLSX.WorkBook = XLSX.read(bstr, { type: 'binary' });\r\n\r\n      /* grab first sheet */\r\n      const wsname: string = wb.SheetNames[0];\r\n      const ws: XLSX.WorkSheet = wb.Sheets[wsname];\r\n\r\n      /* save data */\r\n      this.data = <AOA>(XLSX.utils.sheet_to_json(ws, { header: 1 }));\r\n      this.sheet_name = String(wb.SheetNames[0]);\r\n    };\r\n    const apiUrl = 'http://192.168.4.29:8080/api/exceltemplate';\r\n    this.http.get(apiUrl).subscribe(val => console.log(val));\r\n    const req = new HttpRequest('POST', environment.urlImport, \r\n    {\t\r\n      \"excel_table_name\": target.files[0].name,\r\n      \"excel_table_sheet_name\": \"Sheet-1\",\r\n      \"title\": \"Test\",\r\n      \"note\": \"hahaha\",\r\n      \"column_header\": \"name_column_stt, name_column_name, name_column_progress\",\r\n      \"create_date\": this.dateNow.toISOString(),\r\n      \"update_date\": this.dateNow.toISOString(),\r\n      \"time\": this.dateNow.toISOString(),\r\n      \"is_delete\": 0,\r\n      \"create_by\": 2000,\r\n      \"update_by\": 2000,\r\n    });\r\n\r\n    this.http.request(req).subscribe(val => console.log(val));\r\n  }\r\n\r\n  handlerDetail(data: Object) {\r\n    this.rowID.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header {\r\n    text-align: center;\r\n}\r\n",
                    "styleUrl": "./list-excel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"padding: 25px;\">\r\n  <brc-label [label]=\"labelExcel\" class=\"header\"></brc-label>\r\n\r\n  <div style=\"margin: auto; display: flex; justify-content: flex-end;\">\r\n    <button type=\"button\" mat-raised-button color=\"primary\" (click)=\"fileInput.click()\">\r\n      <mat-icon>add</mat-icon> Import Template\r\n      <input #fileInput type=\"file\" (change)=\"onFileInput($event)\" style=\"display:none;\"  accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\" />\r\n    </button>\r\n\r\n    <button mat-raised-button color=\"basic\" (click)=\"onClickBtnAdd()\" style=\"margin-left: 10px\">\r\n      <mat-icon>add</mat-icon> Export Template\r\n    </button>\r\n  </div>\r\n\r\n  <brc-table \r\n  [columns]=\"notification_columns\" \r\n  [dataSource]=\"notification_dataSource\"\r\n  [showRowSelection]=\"notification_showRowSelection\" \r\n  [showRowAction]=\"showRowAction\" \r\n  [showBtn]=\"showBtn\" \r\n  (rowsSelected)=\"handleSelectRow($event)\"\r\n  (rowID)=\"handlerDetail($event)\"\r\n  (sort)=\"handlesort($event)\">\r\n  </brc-table>\r\n</div>"
        },
        {
            "name": "ListFilterScheduleComponent",
            "id": "component-ListFilterScheduleComponent-30c524804ea95e48f3ea487fcf23c0b5",
            "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-list-filter",
            "styleUrls": [
                "./list-filter-schedule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-filter-schedule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonReset",
                    "line": 40,
                    "type": "configButton"
                },
                {
                    "name": "buttonSubmit",
                    "line": 39,
                    "type": "configButton"
                },
                {
                    "name": "dataCategory",
                    "defaultValue": "[]",
                    "line": 50,
                    "type": "Category[]"
                },
                {
                    "name": "dataCheckbox",
                    "line": 49,
                    "type": "CheckboxNewComponent[]"
                },
                {
                    "name": "dataImportance",
                    "line": 51,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelCategory",
                    "line": 44,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelFromDate",
                    "line": 42,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelImportance",
                    "line": 41,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelToDate",
                    "line": 43,
                    "type": "LabelInterface"
                },
                {
                    "name": "placeholderSearch",
                    "defaultValue": "'search todo ...'",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "titleCategory",
                    "defaultValue": "'Category'",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "titleGroupCheckbox",
                    "defaultValue": "'Status'",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "titleImportance",
                    "defaultValue": "'Importance'",
                    "line": 47,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkBoxNew",
                    "type": "CheckboxNewComponent",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CheckboxNewComponent"
                        }
                    ]
                },
                {
                    "name": "complete",
                    "defaultValue": "'false'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "incomplete",
                    "defaultValue": "'false'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMultiple",
                    "type": "SelectMultipleComponent",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SelectMultipleComponent"
                        }
                    ]
                },
                {
                    "name": "valueCategory",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromHour",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromMinute",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetFromTimeNow",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToHour",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToMinute",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToTimeNow",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueImportance",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueSearch",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128
                },
                {
                    "name": "getDataCheckBox",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromTimeNow",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueImportance",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                },
                {
                    "name": "outputSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textSearch",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatGridTileHeaderCssMatStyler } from '@angular/material/grid-list';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { ICheckBoxItem } from '../../../store/models/checkbox-item.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { FilterTodo } from '../../../store/models/todo-filter.i';\r\nimport { CheckboxNewComponent } from '../checkbox/checkbox-new/checkbox-new.component';\r\nimport { SelectMultipleComponent } from '../select-multiple/select-multiple.component';\r\n\r\n@Component({\r\n  selector: 'brc-list-filter',\r\n  templateUrl: './list-filter-schedule.component.html',\r\n  styleUrls: ['./list-filter-schedule.component.scss'],\r\n})\r\nexport class ListFilterScheduleComponent implements OnInit {\r\n  public valueSearch: string = '';\r\n  public incomplete: string = 'false';\r\n  public complete: string = 'false';\r\n  public valueImportance: string = '';\r\n  public valueCategory: string[] = [];\r\n  public valueGetToDate: string = '';\r\n  public valueGetToTimeNow: string = '';\r\n  public valueGetToHour: string = '';\r\n  public valueGetToMinute: string = '';\r\n  public valueGetFromDate: string = '';\r\n  public valueGetFromTimeNow: string = '';\r\n  public valueGetFromHour: string = '';\r\n  public valueGetFromMinute: string = '';\r\n  constructor() {}\r\n  @Input() buttonSubmit: configButton;\r\n  @Input() buttonReset: configButton;\r\n  @Input() labelImportance: LabelInterface;\r\n  @Input() labelFromDate: LabelInterface;\r\n  @Input() labelToDate: LabelInterface;\r\n  @Input() labelCategory: LabelInterface;\r\n  @Input() placeholderSearch: string = 'search todo ...';\r\n  @Input() titleGroupCheckbox: string = 'Status';\r\n  @Input() titleImportance: string = 'Importance';\r\n  @Input() titleCategory: string = 'Category';\r\n  @Input() dataCheckbox: CheckboxNewComponent[];\r\n  @Input() dataCategory: Category[] = [];\r\n  @Input() dataImportance: LabelledValue<string>[];\r\n  @Output() valueFilter = new EventEmitter();\r\n  @ViewChild(SelectMultipleComponent) selectMultiple: SelectMultipleComponent;\r\n  @ViewChild(CheckboxNewComponent) checkBoxNew: CheckboxNewComponent;\r\n  ngOnInit(): void {}\r\n  textSearch(data: string) {\r\n    this.valueSearch = data;\r\n  }\r\n  getDataCheckBox(data: Object) {\r\n    this.incomplete = String(data[1].checked);\r\n    this.complete = String(data[0].checked);\r\n  }\r\n  getValueImportance(data: string) {\r\n    this.valueImportance = data;\r\n  }\r\n  outputSelected(data: string[]) {\r\n    this.valueCategory = data;\r\n  }\r\n  getToDate(data: string) {\r\n    this.valueGetToDate = data;\r\n  }\r\n  getToHour(data: string) {\r\n    this.valueGetToHour = data;\r\n  }\r\n  getToMinute(data: string) {\r\n    this.valueGetToMinute = data;\r\n  }\r\n\r\n  getFromDate(data: string) {\r\n    this.valueGetFromDate = data;\r\n  }\r\n  getFromTimeNow(data: string) {\r\n    this.valueGetFromTimeNow = data;\r\n  }\r\n  getFromHour(data: string) {\r\n    this.valueGetFromHour = data;\r\n  }\r\n  getFromMinute(data: string) {\r\n    this.valueGetFromMinute = data;\r\n  }\r\n  onSubmit() {\r\n    let sta = '';\r\n    if (this.complete === 'true' && this.incomplete === 'true') {\r\n      sta = '';\r\n    } else if (this.incomplete === 'true') {\r\n      sta = 'incomplete';\r\n    } else if (this.complete === 'true') {\r\n      sta = 'complete';\r\n    } else {\r\n      sta = '';\r\n    }\r\n\r\n    let fromHour = this.valueGetFromHour === '' ? '00' : this.valueGetFromHour;\r\n    let fromMinute =this.valueGetFromMinute === '' ? '00' : this.valueGetFromMinute;\r\n    let toHour = this.valueGetToHour === '' ? '00' : this.valueGetToHour;\r\n    let toMinute = this.valueGetToMinute === '' ? '00' : this.valueGetToMinute;\r\n    let model: FilterTodo = {\r\n      textSearch: this.valueSearch,\r\n      importance: this.valueImportance,\r\n      category: this.valueCategory,\r\n      status: sta,\r\n      fromDate:\r\n        this.valueGetFromDate === ''\r\n          ? ''\r\n          : this.valueGetFromDate +\r\n            'T' +\r\n            fromHour +\r\n            ':' +\r\n            fromMinute +\r\n            ':00.000Z',\r\n      toDate:\r\n        this.valueGetToDate === ''\r\n          ? ''\r\n          : this.valueGetToDate + 'T' + toHour + ':' + toMinute + ':00.000Z',\r\n    };\r\n    this.valueFilter.emit(model);\r\n  }\r\n  clear() {\r\n    this.valueSearch = '';\r\n    this.valueImportance = '';\r\n    this.valueCategory = [];\r\n    this.valueGetFromDate = '';\r\n    this.valueGetToDate = '';\r\n    this.valueGetToHour='';\r\n    this.valueGetFromHour='';\r\n    this.complete = '';\r\n    this.incomplete ='';\r\n    this.selectMultiple.clear();\r\n    this.checkBoxNew.clear();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-label{\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n}\r\n.row-button{\r\n  display: flex;\r\n  // flex-direction: row;\r\n  justify-content: center;\r\n}\r\n.row-button > brc-button{\r\n  text-align: center;\r\n  margin:0px 15px;\r\n}\r\n.date{\r\n  padding: 10x 0px;\r\n  margin : 10px 0px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n}\r\n.date >brc-label{\r\n  width : 100% !important;\r\n}\r\n.date > brc-datetime-picker{\r\n  width: 99% !important;\r\n}\r\n.filter-container {\r\n  padding: 20px;\r\n  max-width: 500px;\r\n  margin: auto;\r\n}\r\n",
                    "styleUrl": "./list-filter-schedule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 37
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"filter-container\">\r\n  <form class=\"width_100\">\r\n    <h1 class=\"\" style=\"font-weight: bold; text-align: center;\">Filter</h1>\r\n    <div class=\"search\" style=\"width: 99%; margin-bottom: 20px; padding-top: 20px;\">\r\n      <brc-search\r\n        [placeholder]=\"placeholderSearch\"\r\n        [searchText]=\"valueSearch\"\r\n        (textSearch)=\"textSearch($event)\"\r\n        style=\"width: 100%;\"\r\n      ></brc-search>\r\n    </div>\r\n    <div class=\"select\" style=\"width: 100%;\">\r\n      <div class=\"importance\">\r\n        <brc-label [label]=\"labelImportance\" class=\"filter-label\"></brc-label>\r\n        <brc-app-select\r\n          [data]=\"dataImportance\"\r\n          [label]=\"titleImportance\"\r\n          [default]=\"valueImportance\"\r\n          (getValue)=\"getValueImportance($event)\"\r\n        ></brc-app-select>\r\n      </div>\r\n      <div class=\"category\">\r\n        <brc-label [label]=\"labelCategory\" class=\"filter-label\"></brc-label>\r\n        <brc-select-multiple\r\n          [values]=\"dataCategory\"\r\n          [label]=\"titleCategory\"\r\n          (outputSelected)=\"outputSelected($event)\"\r\n          style=\"width: 100%;\"\r\n        >\r\n        </brc-select-multiple>\r\n      </div>\r\n    </div>\r\n    <div class=\"date-time\" style=\"width: 100%;\">\r\n      <div class=\"date\" style=\"width: 100%;\">\r\n        <brc-label\r\n          [label]=\"labelFromDate\"\r\n          class=\"filter-label\"\r\n          style=\"width: 100%; margin-bottom: 10px;\"\r\n        ></brc-label>\r\n        <brc-datetime-picker\r\n          (getDay) = \"getFromDate($event)\"\r\n          (getHour) = \"getFromHour($event)\"\r\n          (getMinute) = \"getFromMinute($event)\"\r\n        ></brc-datetime-picker>\r\n      </div>\r\n      <div class=\"date\">\r\n        <brc-label\r\n          [label]=\"labelToDate\"\r\n          class=\"filter-label\"\r\n          style=\"width: 100%; margin-bottom: 10px;\"\r\n        ></brc-label>\r\n        <brc-datetime-picker\r\n          (getDay) = \"getToDate($event)\"\r\n          (getHour) = \"getToHour($event)\"\r\n          (getMinute) = \"getToMinute($event)\"\r\n        ></brc-datetime-picker>\r\n      </div>\r\n    </div>\r\n    <div class=\"checkbox\" style=\"width: 100%;\">\r\n      <brc-checkbox-new\r\n        [checkboxContent]=\"dataCheckbox\"\r\n        (dataCheckBox)=\"getDataCheckBox($event)\"\r\n      ></brc-checkbox-new>\r\n    </div>\r\n    <br />\r\n    <div class=\"button\">\r\n      <div class=\"row-button\" style=\"width: 100%; margin: auto;\">\r\n        <brc-button\r\n          [configButton]=\"buttonSubmit\"\r\n          (click)=\"onSubmit()\"\r\n          data-test=\"submit-action\"\r\n        ></brc-button>\r\n        <brc-button [configButton]=\"buttonReset\" (click)=\"clear()\"></brc-button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-b68e8eb69f2e2083d23890095f6d3129",
            "file": "src/app/modules/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "http",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "token",
                    "type": "Login",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Login } from '../../store/models/login.i';\r\nimport { NotificationStoreFacade } from '../../store/store-facades/notification.store-facade';\r\n@Component({\r\n  selector: 'brc-login-page',\r\n  templateUrl: './login-page.component.html',\r\n  styleUrls: ['./login-page.component.scss'],\r\n})\r\nexport class LoginPageComponent implements OnInit {\r\n  public loginForm: FormGroup;\r\n  public submitted = false;\r\n  public token: Login;\r\n  public disabled = false;\r\n  constructor(\r\n    public http: HttpClient,\r\n    private router: Router,\r\n    private notificationStore: NotificationStoreFacade\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      userName: new FormControl('', Validators.required),\r\n      password: new FormControl('', Validators.required),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.loginForm.controls;\r\n  }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    this.loginForm\r\n      .get('userName')\r\n      .setValue(this.loginForm.get('userName').value.trim());\r\n      console.log(this.loginForm.value);\r\n    this.http\r\n      .post<Login>('http://192.168.4.29:8080/auth', this.loginForm.value)\r\n      .subscribe(\r\n        (token) => {\r\n          this.disabled = true;\r\n          this.token = token;\r\n          localStorage.setItem('token', token.accessToken);\r\n          localStorage.setItem('userName', token.user.userName);\r\n          localStorage.setItem('userId', token.user.id.toString());\r\n          this.notificationStore.loadCountNotification();\r\n          \r\n          this.router.navigate(['/excelTemplateDetail']);\r\n        },\r\n        (err) => {\r\n          this.disabled = false;\r\n          alert('Đăng nhập thất bại');\r\n        }\r\n      );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 100%;\r\n  background-color: #dfe6e9;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.mat-form-field {\r\n  width: 100%;\r\n  min-width: 2vw;\r\n}\r\n\r\nmat-card-title,\r\nmat-card-content {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\nmat-form-field {\r\n  margin: 10px 0px;\r\n}\r\n\r\nmat-card {\r\n  max-height: 50%;\r\n}\r\n\r\n.button {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\ninput:focus {\r\n  outline: none;\r\n  border: none;\r\n  box-shadow: none;\r\n}\r\n",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationStore",
                        "type": "NotificationStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 30
                    }
                }
            },
            "templateData": "<div class=\"container\">\r\n  <mat-card>\r\n    <mat-card-title>EMS-Schedule</mat-card-title>\r\n    <mat-card-content>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            placeholder=\"Username\"\r\n            formControlName=\"userName\"\r\n          />\r\n          <mat-error *ngIf=\"f.userName.hasError('required')\">\r\n            UserName is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n          <input\r\n            type=\"password\"\r\n            matInput\r\n            placeholder=\"Password\"\r\n            formControlName=\"password\"\r\n          />\r\n          <mat-error *ngIf=\"f.password.hasError('required')\">\r\n            Password is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <div class=\"button\">\r\n          <button type=\"submit\" mat-button>Login</button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "MainLayoutComponent",
            "id": "component-MainLayoutComponent-ba9e522324c35f575c5762158f7a29ca",
            "file": "src/app/main-layout/main-layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-layout",
            "styleUrls": [
                "./main-layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./main-layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countNotification",
                    "defaultValue": "1",
                    "line": 71,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "defaultValue": "[\r\n    {\r\n      text: 'Home',\r\n      link: '/',\r\n      icon: 'home',\r\n    },\r\n    {\r\n      text: 'Todo',\r\n      link: '/todo',\r\n      icon: 'list_alt',\r\n    },\r\n    {\r\n      text: 'Schedule',\r\n      link: '/schedule',\r\n      icon: 'event',\r\n    },\r\n    {\r\n      text: 'Excel List',\r\n      link: '/excel',\r\n      icon: 'event',\r\n    },\r\n    {\r\n      text: 'Import',\r\n      link: '/excelTemplateDetail',\r\n      icon: 'input',\r\n    },\r\n    {\r\n      text: 'Poll',\r\n      link: '/poll',\r\n      icon: 'poll',\r\n    }\r\n  ]",
                    "type": "MenuItem[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "reminder",
                    "defaultValue": "{\r\n    eventId: 0,\r\n    eventViewPath: '/todo',\r\n    eventStartTime: new Date(),\r\n    eventTypeId: 0,\r\n    notificationId: 0,\r\n    categoryName: 'Notifications',\r\n    notificationTitle: 'Meeting Team',\r\n    notificationDescription: 'This Meeting will begin at 1 PM. Please prepare and be on time ',\r\n  }",
                    "type": "ReminderNotification",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "temp",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateNotification",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "onGetId",
                    "args": [
                        {
                            "name": "popup",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "popup",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMarkAsRead",
                    "args": [
                        {
                            "name": "popup",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "popup",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "readDetailNotification",
                    "args": [
                        {
                            "name": "data",
                            "type": "IsRead"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "IsRead",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { SocketClientService } from '../socket-client/socket-client.service';\r\nimport { MenuItem } from '../store/models/menu-item.i';\r\nimport { ReminderNotification } from '../store/models/reminder-notification.i';\r\nimport { NotificationStoreFacade } from '../store/store-facades/notification.store-facade';\r\nimport { IsRead } from '../store/models/is_read.i';\r\nimport { NotificationService } from '../store/services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-main-layout',\r\n  templateUrl: './main-layout.component.html',\r\n  styleUrls: ['./main-layout.component.scss'],\r\n})\r\nexport class MainLayoutComponent implements OnInit {\r\n  menu: MenuItem[] = [\r\n    {\r\n      text: 'Home',\r\n      link: '/',\r\n      icon: 'home',\r\n    },\r\n    {\r\n      text: 'Todo',\r\n      link: '/todo',\r\n      icon: 'list_alt',\r\n    },\r\n    {\r\n      text: 'Schedule',\r\n      link: '/schedule',\r\n      icon: 'event',\r\n    },\r\n    {\r\n      text: 'Excel List',\r\n      link: '/excel',\r\n      icon: 'event',\r\n    },\r\n    {\r\n      text: 'Import',\r\n      link: '/excelTemplateDetail',\r\n      icon: 'input',\r\n    },\r\n    {\r\n      text: 'Poll',\r\n      link: '/poll',\r\n      icon: 'poll',\r\n    }\r\n  ];\r\n  temp = false;\r\n  reminder: ReminderNotification = {\r\n    eventId: 0,\r\n    eventViewPath: '/todo',\r\n    eventStartTime: new Date(),\r\n    eventTypeId: 0,\r\n    notificationId: 0,\r\n    categoryName: 'Notifications',\r\n    notificationTitle: 'Meeting Team',\r\n    notificationDescription: 'This Meeting will begin at 1 PM. Please prepare and be on time ',\r\n  }\r\n  constructor(\r\n    private socketClient: SocketClientService,\r\n    private router: Router,\r\n    private storeFace: NotificationStoreFacade,\r\n    private service: NotificationService,\r\n  ) {\r\n    const token = localStorage.getItem('token');\r\n    const userName = localStorage.getItem('userName');\r\n    const userId = localStorage.getItem('userId');\r\n    this.socketClient.connectionSocket(token, userName, userId);\r\n  }\r\n\r\n  @Input() countNotification: number =1 ;\r\n  ngOnInit(): void {\r\n    this.socketClient.listernNotification$().subscribe((data) => {\r\n      this.reminder = {\r\n        eventId: data.eventId,\r\n        eventViewPath: data.eventPath,\r\n        eventStartTime: data.eventStartTime,\r\n        notificationId: data.notificationId || 0,\r\n        notificationTitle: data.title,\r\n        eventTypeId: data.eventTypeId,\r\n        notificationDescription: data.description,\r\n      }\r\n      this.temp = true;\r\n      setTimeout(() => {\r\n        this.temp = false;\r\n      }, 15000);\r\n    });\r\n    this.storeFace\r\n      .getValueCountNotification()\r\n      .subscribe((data) => {\r\n        if(data !== undefined)\r\n        (this.countNotification = data)\r\n      console.log(this.countNotification)});\r\n  }\r\n  onGetId(popup: Object) {\r\n    console.log(popup);\r\n  }\r\n  onMarkAsRead(popup: Object) {\r\n    console.log(popup);\r\n  }\r\n  navigate(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n  navigateNotification(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n  readDetailNotification(data: IsRead) {\r\n    data = {\r\n      isRead: 1,\r\n      notificationId: this.reminder.notificationId,\r\n      userId: Number(sessionStorage.getItem('userId')),\r\n    }\r\n    this.service.updateIsRead(data).subscribe();\r\n    this.router.navigate([this.reminder.eventViewPath + this.reminder.eventId]);\r\n    this.temp = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".popup-notification {\r\n  position: absolute;\r\n  z-index: 1;\r\n}\r\n",
                    "styleUrl": "./main-layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "socketClient",
                        "type": "SocketClientService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "storeFace",
                        "type": "NotificationStoreFacade"
                    },
                    {
                        "name": "service",
                        "type": "NotificationService"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "socketClient",
                        "type": "SocketClientService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storeFace",
                        "type": "NotificationStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "NotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"width: 100%;\">\r\n  <brc-header\r\n    [menu]=\"menu\"\r\n    (emitValueLink)=\"navigate($event)\"\r\n    (emitValueNotification)=\"navigateNotification($event)\"\r\n    [countNotification]=\"countNotification\"\r\n  ></brc-header>\r\n  <brc-pop-up\r\n    [temp]=\"temp\"\r\n    [reminder] = \"reminder\"\r\n    (getId)=\"onGetId($event)\"\r\n    (markAsRead)=\"onMarkAsRead($event)\"\r\n    (readDetail)=\"readDetailNotification($event)\"\r\n    class=\"popup-notification\"\r\n  >\r\n  </brc-pop-up>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "MatPaginatorCustomComponent",
            "id": "component-MatPaginatorCustomComponent-2dcc5158f5643e6204d6aaced4bf16a6",
            "file": "src/app/shared/components/mat-paginator-custom/mat-paginator-custom.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-mat-paginator",
            "styleUrls": [
                "./mat-paginator-custom.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mat-paginator-custom.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "line": 23,
                    "type": "number"
                },
                {
                    "name": "pageSize",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "total",
                    "line": 22,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onPageEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "paginator",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  OnChanges,\r\n  ViewChild,\r\n  ChangeDetectionStrategy,\r\n} from '@angular/core';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Component({\r\n  // tslint:disable-next-line: component-selector\r\n  selector: 'brc-mat-paginator',\r\n  templateUrl: './mat-paginator-custom.component.html',\r\n  styleUrls: ['./mat-paginator-custom.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MatPaginatorCustomComponent implements OnChanges {\r\n  @Input() pageSize: number;\r\n  @Input() total: number;\r\n  @Input() pageIndex: number = 0;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n\r\n  @Output() onPageChange = new EventEmitter();\r\n  constructor() {}\r\n  onPageEvent = ($event) => {\r\n    this.onPageChange.emit($event);\r\n  };\r\n  ngOnChanges() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .pg-container {\r\n//   display: flex;\r\n//   justify-content: center;\r\n// }\r\n",
                    "styleUrl": "./mat-paginator-custom.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"pg-container\">\r\n  <mat-paginator\r\n    appPagination\r\n    [length]=\"total\"\r\n    [pageSize]=\"pageSize\"\r\n    [pageIndex]=\"pageIndex\"\r\n    [hidePageSize]=\"true\"\r\n    (page)=\"onPageEvent($event)\"\r\n  >\r\n  </mat-paginator>\r\n</div>\r\n"
        },
        {
            "name": "NotificationIconComponent",
            "id": "component-NotificationIconComponent-4c66c27969c96974d1e2cb9fdcd0c3cc",
            "file": "src/app/shared/components/notification-icon/notification-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-notification-icon",
            "styleUrls": [
                "./notification-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countNotification",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "emitNotificationClick",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 11,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hidden",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "toggleBadgeVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'brc-notification-icon',\r\n  templateUrl: './notification-icon.component.html',\r\n  styleUrls: ['./notification-icon.component.scss'],\r\n})\r\nexport class NotificationIconComponent implements OnInit, OnChanges {\r\n\r\n  @Input() countNotification: number;\r\n  @Output() emitNotificationClick : EventEmitter<string> = new EventEmitter<string>();\r\n  hidden = false;\r\n  constructor() {}\r\n  ngOnInit(): void {\r\n    if (this.countNotification == 0 || this.countNotification == undefined) this.hidden = true;\r\n  }\r\n  ngOnChanges(){\r\n    if (this.countNotification == 0 || this.countNotification == undefined) this.hidden = true;\r\n  }\r\n  toggleBadgeVisibility() {\r\n    this.emitNotificationClick.emit('/notification');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".notification-icon{\r\n  cursor: pointer;\r\n}\r\n.mat-icon {\r\n  font-size: 30px;\r\n}\r\n",
                    "styleUrl": "./notification-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"notification-icon\">\r\n  <mat-icon\r\n    matBadge=\"{{ countNotification }}\"\r\n    matBadgeColor=\"warn\"\r\n    (click)=\"toggleBadgeVisibility()\"\r\n    [matBadgeHidden]=\"hidden\"\r\n    >notifications</mat-icon\r\n  >\r\n</div>\r\n"
        },
        {
            "name": "NotificationListComponent",
            "id": "component-NotificationListComponent-456cdc5d0af1a4e89e9a4f3f68372938",
            "file": "src/app/shared/components/notification-list/notification-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-notification-list",
            "styleUrls": [
                "./notification-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configNotificationList",
                    "defaultValue": "\"Notifications List\"",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "dataSelect",
                    "defaultValue": "[]",
                    "line": 54
                },
                {
                    "name": "labelSelect",
                    "defaultValue": "'Category'",
                    "line": 55
                },
                {
                    "name": "notification_columns",
                    "defaultValue": "[]",
                    "line": 43,
                    "type": "Column[]"
                },
                {
                    "name": "notification_dataSource",
                    "defaultValue": "[]",
                    "line": 44,
                    "type": "Object[]"
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "0",
                    "line": 48,
                    "type": "number"
                },
                {
                    "name": "notification_showRowSelection",
                    "defaultValue": "false",
                    "line": 45,
                    "type": "boolean"
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "0",
                    "line": 47,
                    "type": "number"
                },
                {
                    "name": "searchPlaceholder",
                    "defaultValue": "'Search ...'",
                    "line": 53
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "line": 52,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "categorySelected",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 66,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 62,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "resetPage",
                    "defaultValue": "new EventEmitter()",
                    "line": 68,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 58,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 59,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "statusFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 67,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "textSearch",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 64,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "eventPagination",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventSearch",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventsSubject",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterButton",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "fontSizeTitle",
                    "defaultValue": "25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "showToolbar",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "sizeFlexFilter",
                    "defaultValue": "20",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeShowToolbar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "clickResetPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "getValueCategory",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueStatus",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleonPageChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSearch",
                    "args": [
                        {
                            "name": "textSearch",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "textSearch",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlesort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "optional": true
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 86
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { AfterViewChecked, ChangeDetectorRef, Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\n@Component({\r\n  selector: 'brc-notification-list',\r\n  templateUrl: './notification-list.component.html',\r\n  styleUrls: ['./notification-list.component.scss'],\r\n})\r\nexport class NotificationListComponent implements OnInit, AfterViewChecked {\r\n  constructor(private cdRef: ChangeDetectorRef) { }\r\n  ngOnChanges(): void {\r\n    //Responsive\r\n    if (window.innerWidth > 1000) {\r\n      this.sizeFlexFilter = 20;\r\n      this.fontSizeTitle = 25;\r\n      this.filterButton = false;\r\n      this.showToolbar = false;\r\n    }\r\n    else if (window.innerWidth < 600) {\r\n      this.filterButton = true;\r\n      this.fontSizeTitle = 15;\r\n      this.sizeFlexFilter = 0;\r\n    }\r\n    else {\r\n      this.filterButton = true;\r\n      this.sizeFlexFilter = 0;\r\n      this.fontSizeTitle = 20;\r\n    }\r\n  }\r\n  ngAfterViewChecked(): void {\r\n    this.cdRef.detectChanges();\r\n  }\r\n  public sizeFlexFilter: number = 20;\r\n  public fontSizeTitle: number = 25;\r\n  public filterButton: boolean = false;\r\n  public showToolbar: boolean = false;\r\n  public eventsSubject: Subject<void> = new Subject<void>();\r\n  public eventPagination: Subject<void> = new Subject<void>();\r\n  public eventSearch: Subject<void> = new Subject<void>();\r\n  ngOnInit(): void {\r\n  }\r\n  //Input table\r\n  @Input() notification_columns: Column[] = [];\r\n  @Input() notification_dataSource: Object[] = [];\r\n  @Input() notification_showRowSelection: boolean = false;\r\n  //Input pagination\r\n  @Input() notification_totalRecords: number = 0;\r\n  @Input() notification_recordsPerPage: number = 0;\r\n  //Input notificationList\r\n  @Input() configNotificationList: string = \"Notifications List\";\r\n  //Input search\r\n  @Input() searchText: string = '';\r\n  @Input() searchPlaceholder = 'Search ...';\r\n  @Input() dataSelect = [];\r\n  @Input() labelSelect = 'Category';\r\n  //Input ResetPage\r\n  //Output table\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  //Output pagination\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n  //Output text search\r\n  @Output() textSearch: EventEmitter<string> = new EventEmitter<string>();\r\n  //Output filter\r\n  @Output() categorySelected = new EventEmitter<string>();\r\n  @Output() statusFilter: EventEmitter<string> = new EventEmitter();\r\n  @Output() resetPage: EventEmitter<string> = new EventEmitter();\r\n  handleonPageChange(data: number) {\r\n    this.onPageChange.emit(data);\r\n  }\r\n  handleClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n  handlesort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n  handleSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n  handleSearch(textSearch: string) {\r\n    this.textSearch.emit(textSearch);\r\n  }\r\n  //Responsive\r\n  @HostListener('window:resize', ['$event'])\r\n  getScreenSize(event?) {\r\n    if (window.innerWidth > 1000) {\r\n      this.sizeFlexFilter = 20;\r\n      this.fontSizeTitle = 25;\r\n      this.filterButton = false;\r\n      this.showToolbar = false;\r\n    }\r\n    else if (window.innerWidth < 600) {\r\n      console.log(2)\r\n      this.filterButton = true;\r\n      this.fontSizeTitle = 15;\r\n      this.sizeFlexFilter = 0;\r\n    }\r\n    else {\r\n      console.log(3)\r\n      this.filterButton = true;\r\n      this.sizeFlexFilter = 0;\r\n      this.fontSizeTitle = 20;\r\n    }\r\n  }\r\n  changeShowToolbar() {\r\n    this.showToolbar = !this.showToolbar;\r\n  }\r\n  getValueCategory(value) {\r\n    this.eventPagination.next()\r\n    this.categorySelected.emit(value);\r\n  }\r\n  getValueStatus(value) {\r\n    this.eventPagination.next()\r\n    this.statusFilter.emit(value);\r\n  }\r\n  clickResetPage() {\r\n    this.resetPage.emit(\"Reset Page\");\r\n    this.eventsSubject.next();\r\n    this.eventPagination.next();\r\n    this.eventSearch.next();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-toolbar-row {\r\n    max-height: 80% !important;\r\n    height: 80% !important;\r\n    padding : 0 0 !important;\r\n  }\r\n  .mat-button-toggle-label-content {\r\n      line-height: 0px !important;\r\n  }\r\n  .mat-toolbar\r\n  {\r\n      background-color: white !important;\r\n  }\r\n  .container\r\n  {\r\n    width:100%;\r\n    height: 100%;\r\n  }\r\n  .title-page{\r\n    margin: 0px 0px 0px 10px;\r\n  }\r\n  .search{\r\n    margin: 0.7em 20px 1em 0.2em;\r\n  }\r\n  .navbar{\r\n    margin-bottom: 1em;\r\n    border : 1px solid #f0f0f0;\r\n  }\r\n  .filter-notification{\r\n    border : 1px solid #f0f0f0;\r\n  }\r\n  .notification-list{\r\n    margin: 0 0 0 1em;\r\n  }\r\n  .title-content\r\n  {\r\n    cursor: pointer;\r\n  }\r\n",
                    "styleUrl": "./notification-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "cdRef",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked"
            ],
            "templateData": "<div class=\"container \">\r\n  <div [fxFlex]=\"sizeFlexFilter\" *ngIf=\"sizeFlexFilter!=0\" class=\"filter-notificaton\">\r\n    <brc-filter-notification [dataSelect]=\"dataSelect\" [labelSelect]=\"labelSelect\" [fxFlex]=\"100\"\r\n      (categorySelected)=\"getValueCategory($event)\" (statusFilter)=\"getValueStatus($event)\" class=\"filter-notification\"\r\n      [events]=\"eventsSubject.asObservable()\">\r\n    </brc-filter-notification>\r\n  </div>\r\n\r\n  <div [fxFlex]=\"100-sizeFlexFilter\" class=\"notification-list\">\r\n    <div fxLayout=\"column\">\r\n      <mat-toolbar [fxFlex]=\"20\">\r\n        <mat-toolbar-row class=\"toggleMenu\">\r\n          <button fxFlex=\"10\" fxLayoutAlign=\"center space-around\" mat-icon-button class=\"example-icon\"\r\n            aria-label=\"Example icon-button with menu icon\" *ngIf=\"filterButton\">\r\n            <mat-icon (click)=\"changeShowToolbar()\">menu</mat-icon>\r\n          </button>\r\n          <h1 [style.font-size.px]=\"fontSizeTitle\" [fxFlex]=\"70\" class=\"title-page\">\r\n            <b (click)=\"clickResetPage()\" class=\"title-content\">{{ configNotificationList }}</b>\r\n          </h1>\r\n          <brc-search [placeholder]=\"searchPlaceholder\" [searchText]=\"searchText\" (textSearch)=\"handleSearch($event)\"\r\n            [eventResetSearch]=\"eventSearch.asObservable()\" fxFlex class=\"search\" [fxFlex]=\"30\"\r\n            *ngIf=\"sizeFlexFilter!=0\">\r\n          </brc-search>\r\n        </mat-toolbar-row>\r\n      </mat-toolbar>\r\n      <mat-toolbar [fxFlex]=\"80\" *ngIf='showToolbar' class=\"navbar\">\r\n        <mat-toolbar-row class=\"toolbar\" style=\"max-height: 100%;\">\r\n          <brc-filter-notification [dataSelect]=\"dataSelect\" [labelSelect]=\"labelSelect\"\r\n            [events]=\"eventsSubject.asObservable()\" fxFlex=\"100\" (categorySelected)=\"getValueCategory($event)\"\r\n            (statusFilter)=\"getValueStatus($event)\">\r\n          </brc-filter-notification>\r\n        </mat-toolbar-row>\r\n        <mat-toolbar-row class=\"toolbar\" style=\"max-height: 100%;\">\r\n          <brc-search [placeholder]=\"searchPlaceholder\" [searchText]=\"searchText\"\r\n            [eventResetSearch]=\"eventSearch.asObservable()\" (textSearch)=\"handleSearch($event)\" fxFlex class=\"search\"\r\n            [fxFlex]=\"100\">\r\n          </brc-search>\r\n        </mat-toolbar-row>\r\n      </mat-toolbar>\r\n    </div>\r\n    <div fxLayout=\"column\">\r\n      <brc-table [columns]=\"notification_columns\" [dataSource]=\"notification_dataSource\"\r\n        [showRowSelection]=\"notification_showRowSelection\" [eventResetSort]=\"eventPagination.asObservable()\"\r\n        (rowClicked)=\"handleClickRow($event)\" (rowsSelected)=\"handleSelectRow($event)\" (sort)=\"handlesort($event)\">\r\n      </brc-table>\r\n    </div>\r\n    <div class=\"pagination-list\" fxLayout=\"column\" *ngIf=\" notification_totalRecords !== 0\">\r\n      <brc-pagination [totalRecords]=\"notification_totalRecords\" [recordsPerPage]=\"notification_recordsPerPage\"\r\n        [eventResetPagination]=\"eventPagination.asObservable()\" (onPageChange)=\"handleonPageChange($event)\"\r\n        fxLayout=\"column\">\r\n      </brc-pagination>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "NotificationPageComponent",
            "id": "component-NotificationPageComponent-de1ecf813e0437edf4ae1f7ee3dcc69a",
            "file": "src/app/modules/notification-page/notification-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-page",
            "styleUrls": [
                "./notification-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notification-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataEvent",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "defaultPagination",
                    "defaultValue": "{\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 10,\r\n  }",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "eventButton",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "{\r\n    textSearch: '',\r\n    category: '',\r\n    sort: [],\r\n    event: '',\r\n    status: -1,\r\n  }",
                    "type": "FilterNotification",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_dataSource",
                    "type": "Object[]",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_recordsPerPage",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_showRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "notification_totalRecords",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "totalColumns",
                    "defaultValue": "columns",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "categorySelected",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertIsRead",
                    "args": [
                        {
                            "name": "data",
                            "type": "Notification[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Notification[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                },
                {
                    "name": "rowClicked",
                    "args": [
                        {
                            "name": "data",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowsSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "statusFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textSearch",
                    "args": [
                        {
                            "name": "textSearch",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "textSearch",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Column, SortItem } from '../../store/models/column.i';\r\nimport { FilterNotification } from '../../store/models/notificaiton-filter.i';\r\nimport { Pagination } from '../../store/models/pagination.i';\r\nimport { NotificationStoreFacade } from '../../store/store-facades/notification.store-facade';\r\nimport { Notification } from '../../store/models/notification.i';\r\n\r\nconst columns: Column[] = [\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Event Type',\r\n    dataIndex: 'eventTypeName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Start Time',\r\n    dataIndex: 'eventStartTime',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n];\r\n\r\n@Component({\r\n  selector: 'app-notification-page',\r\n  templateUrl: './notification-page.component.html',\r\n  styleUrls: ['./notification-page.component.scss'],\r\n})\r\nexport class NotificationPageComponent implements OnInit {\r\n  public dataEvent = [];\r\n  public totalColumns = columns;\r\n  public notification_dataSource: Object[];\r\n  public notification_totalRecords: number = 100;\r\n  public notification_recordsPerPage: number = 5;\r\n  public notification_showRowSelection: boolean = false;\r\n  public filter: FilterNotification = {\r\n    textSearch: '',\r\n    category: '',\r\n    sort: [],\r\n    event: '',\r\n    status: -1,\r\n  };\r\n  public eventButton = [];\r\n  public defaultPagination: Pagination = {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 10,\r\n  };\r\n\r\n  constructor(\r\n    private storeFacade: NotificationStoreFacade,\r\n    private router: Router\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.storeFacade.loadValueEvent();\r\n\r\n    this.defaultPagination = this.storeFacade.pagination\r\n      ? this.storeFacade.pagination\r\n      : this.defaultPagination;\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n    this.storeFacade.getValueTablePage().subscribe((notification) => {\r\n      if (notification.listNotification.length > 0) {\r\n        this.notification_dataSource = this.convertIsRead(\r\n          notification.listNotification\r\n        );\r\n      } else {\r\n        this.notification_dataSource = [];\r\n      }\r\n      (this.notification_totalRecords = notification.pagination.total),\r\n        (this.notification_recordsPerPage = notification.pagination.pageSize);\r\n      this.dataEvent = notification.listEvent;\r\n    });\r\n  }\r\n  convertIsRead(data: Notification[]) {\r\n    return data.map((n) => ({\r\n      ...n,\r\n      status: n.isRead == 1 ? 'Readied' : 'Unread',\r\n    }));\r\n  }\r\n  rowClicked(data: any) {\r\n    this.router.navigate([data?.eventPath, data?.eventId]);\r\n  }\r\n  rowsSelected(data: Object) {\r\n    console.log(data);\r\n  }\r\n  pageSort(data: SortItem[]) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      sort: data,\r\n      event: this.filter.event,\r\n      status: this.filter.status,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n  onPageChange(data: number) {\r\n    this.defaultPagination = {\r\n      page: data,\r\n      pageSize: this.defaultPagination.pageSize,\r\n      total: this.defaultPagination.total,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n  textSearch(textSearch: string) {\r\n    this.filter = {\r\n      textSearch: textSearch,\r\n      category: this.filter.category,\r\n      sort: this.filter.sort,\r\n      event: this.filter.event,\r\n      status: this.filter.status,\r\n    };\r\n    this.defaultPagination = {\r\n      page: 1,\r\n      pageSize: this.defaultPagination.pageSize,\r\n      total: this.defaultPagination.total,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n  statusFilter(value: number) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      sort: this.filter.sort,\r\n      event: this.filter.event,\r\n      status: value,\r\n    };\r\n    this.defaultPagination = {\r\n      page: 1,\r\n      pageSize: this.defaultPagination.pageSize,\r\n      total: this.defaultPagination.total,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n  categorySelected(value: string) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      sort: this.filter.sort,\r\n      event: value,\r\n      status: this.filter.status,\r\n    };\r\n    this.defaultPagination = {\r\n      page: 1,\r\n      pageSize: this.defaultPagination.pageSize,\r\n      total: this.defaultPagination.total,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n  resetPage() {\r\n    //default filter\r\n    this.filter = {\r\n      textSearch: '',\r\n      category: '',\r\n      sort: [],\r\n      event: '',\r\n      status: -1,\r\n    };\r\n    //default pagination , page 1\r\n    this.defaultPagination = {\r\n      page: 1,\r\n      total: this.notification_totalRecords,\r\n      pageSize: this.notification_recordsPerPage,\r\n    };\r\n    this.storeFacade.loadAllNotification(this.defaultPagination, this.filter);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./notification-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "NotificationStoreFacade"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "NotificationStoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-notification-list [notification_columns]=\"totalColumns\" [notification_dataSource]=\"notification_dataSource\"\r\n  [notification_showRowSelection]=\"notification_showRowSelection\"\r\n  [notification_recordsPerPage]=\"notification_recordsPerPage\" [notification_totalRecords]=\"notification_totalRecords\"\r\n  [dataSelect]=\"dataEvent\" (rowClicked)=\"rowClicked($event)\" (rowsSelected)=\"rowsSelected($event)\"\r\n  (sort)=\"pageSort($event)\" (onPageChange)=\"onPageChange($event)\" (textSearch)=\"textSearch($event)\"\r\n  (categorySelected)=\"categorySelected($event)\" (statusFilter)=\"statusFilter($event)\" (resetPage)=\"resetPage()\">\r\n</brc-notification-list>\r\n"
        },
        {
            "name": "PageTodoListComponent",
            "id": "component-PageTodoListComponent-03831a23fd90ec60e21db5c05b49020e",
            "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-todo-list-page",
            "styleUrls": [
                "./todo-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "this.storeFacade.filter",
                    "type": "FilterTodo",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "todoButtonReset",
                    "defaultValue": "configButtonReset",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "todoButtonSubmit",
                    "defaultValue": "configButtonSubmit",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "todoDataCategory",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "todoDataCheckbox",
                    "defaultValue": "checkboxField",
                    "type": "CheckboxInterface[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "todoDataImportance",
                    "defaultValue": "dataImportance",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "todoLabelCategory",
                    "defaultValue": "labelCategory",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "todoLabelFromDate",
                    "defaultValue": "labelFromDate",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "todoLabelImportance",
                    "defaultValue": "labelImportance",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "todoLabelToDate",
                    "defaultValue": "labelToDate",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "todoPageColumns",
                    "defaultValue": "columns",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPageDataSource",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPageRecordsPerPage",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPageShowRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPageTotalRecords",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoPlaceholderSearch",
                    "defaultValue": "'search todo ...'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "todoTitleCategory",
                    "defaultValue": "'Category'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "todoTitleGroupCheckbox",
                    "defaultValue": "'Status'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "todoTitleImportance",
                    "defaultValue": "'Importance'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "pageClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageOnClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "pageOnPageChange",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pageSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todoValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterTodo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterTodo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "todo",
                            "type": "TodoState"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "TodoState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { configButton } from '../../store/models/button.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { CheckboxInterface } from '../../store/models/checkbox-item.i';\r\nimport { Column, SortItem } from '../../store/models/column.i';\r\nimport { LabelInterface } from '../../store/models/label.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport { FilterTodo } from '../../store/models/todo-filter.i';\r\nimport { TodoState } from '../../store/reducers/todo.reducer';\r\nimport { StoreFacade } from '../../store/store-facades/todo.store-facade';\r\n\r\n// mock data\r\n\r\n@Component({\r\n  selector: 'brc-todo-list-page',\r\n  templateUrl: './todo-list-page.component.html',\r\n  styleUrls: ['./todo-list-page.component.scss'],\r\n})\r\nexport class PageTodoListComponent implements OnInit {\r\n  private filter: FilterTodo = this.storeFacade.filter;\r\n  public todoPageTotalRecords: number = 100;\r\n  public todoPageRecordsPerPage: number = 5;\r\n  public todoPageIndex: number = 0;\r\n  public todoPageShowRowSelection: boolean = false;\r\n  public todoPageColumns = columns;\r\n  public todoPageDataSource = [];\r\n  todoButtonSubmit: configButton = configButtonSubmit;\r\n  todoButtonReset: configButton = configButtonReset;\r\n  todoLabelImportance: LabelInterface = labelImportance;\r\n  todoLabelFromDate: LabelInterface = labelFromDate;\r\n  todoLabelToDate: LabelInterface = labelToDate;\r\n  todoLabelCategory: LabelInterface = labelCategory;\r\n  todoPlaceholderSearch: string = 'search todo ...';\r\n  todoTitleGroupCheckbox: string = 'Status';\r\n  todoTitleImportance: string = 'Importance';\r\n  todoTitleCategory: string = 'Category';\r\n  todoDataCheckbox: CheckboxInterface[] = checkboxField;\r\n  todoDataCategory: Category[] = [];\r\n  todoDataImportance: LabelledValue<string>[] = dataImportance;\r\n\r\n  constructor(private storeFacade: StoreFacade, private _router: Router) {}\r\n  ngOnInit(): void {\r\n    // thưc hiện action filter todo để gán giá trị vào store\r\n    this.storeFacade.filterTodo(\r\n      this.storeFacade.pagination,\r\n      this.storeFacade.filter\r\n    );\r\n    this.storeFacade.getValueTodoTablePage().subscribe((todo) => {\r\n      this.updateData(todo);\r\n    });\r\n  }\r\n  updateData(todo: TodoState) {\r\n    this.todoDataCategory = todo.listCategory;\r\n    this.todoPageDataSource = todo.todos;\r\n    this.todoPageTotalRecords = todo.pagination.total;\r\n    this.todoPageRecordsPerPage = todo.pagination.pageSize;\r\n    this.todoPageIndex = todo.pagination.page - 1;\r\n  }\r\n\r\n  todoValueFilter(data: FilterTodo) {\r\n    this.filter = data;\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = 1;\r\n    this.storeFacade.filterTodo(pagination, this.filter);\r\n  }\r\n  pageOnClickBtnAdd() {\r\n    this._router.navigateByUrl('todo/add');\r\n  }\r\n  pageClickRow(data: Object) {\r\n    this._router.navigateByUrl(`todo/detail/${data['todoId']}`);\r\n  }\r\n  pageSelectRow(data: Object) {\r\n    console.log(data);\r\n  }\r\n  pageSort(data: SortItem[]) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      importance: this.filter.importance,\r\n      status: this.filter.status,\r\n      fromDate: this.filter.fromDate,\r\n      toDate: this.filter.toDate,\r\n      sort: data,\r\n    };\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    this.storeFacade.filterTodo(pagination, this.filter);\r\n  }\r\n  pageOnPageChange(data) {\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = Number(data.pageIndex) + 1;\r\n    this.storeFacade.filterTodo(pagination, this.filter);\r\n  }\r\n}\r\nconst columns: Column[] = [\r\n  {\r\n    title: 'Title Todo',\r\n    dataIndex: 'todoName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Deadline',\r\n    dataIndex: 'deadline',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'todoCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n];\r\nconst dataImportance: LabelledValue<string>[] = [\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Low',\r\n    value: 'Low',\r\n  },\r\n];\r\nconst fakeData: Category[] = [\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n];\r\nconst checkboxField: CheckboxInterface[] = [\r\n  { name: 'Complete', checked: false },\r\n  { name: 'Incomplete', checked: false },\r\n];\r\nconst labelCategory: LabelInterface = {\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n};\r\nconst labelImportance: LabelInterface = {\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n};\r\nconst labelFromDate: LabelInterface = {\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n};\r\nconst labelToDate: LabelInterface = {\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n};\r\nconst configButtonSubmit: configButton = {\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n};\r\nconst configButtonReset: configButton = {\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n};\r\nconst placeholder = 'search todo...';\r\nconst titleGroup = 'Status';\r\nconst importance = 'Importance';\r\nconst category = 'Category';\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./todo-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-todo-list\r\n  [todoColumns]=\"todoPageColumns\"\r\n  [todoDataSource]=\"todoPageDataSource\"\r\n  [todoShowRowSelection]=\"todoPageShowRowSelection\"\r\n  [todoTotalRecords]=\"todoPageTotalRecords\"\r\n  [todoRecordsPerPage]=\"todoPageRecordsPerPage\"\r\n  [todoPageIndex]=\"todoPageIndex\"\r\n  (btnAddTodo)=\"pageOnClickBtnAdd()\"\r\n  (rowClicked)=\"pageClickRow($event)\"\r\n  (rowsSelected)=\"pageSelectRow($event)\"\r\n  (sort)=\"pageSort($event)\"\r\n  (pageOnPageChange)=\"pageOnPageChange($event)\"\r\n  [todoButtonSubmit]=\"todoButtonSubmit\"\r\n  [todoButtonReset]=\"todoButtonReset\"\r\n  [todoLabelImportance]=\"todoLabelImportance\"\r\n  [todoLabelFromDate]=\"todoLabelFromDate\"\r\n  [todoLabelToDate]=\"todoLabelToDate\"\r\n  [todoLabelCategory]=\"todoLabelCategory\"\r\n  [todoPlaceholderSearch]=\"todoPlaceholderSearch\"\r\n  [todoTitleGroupCheckbox]=\"todoTitleGroupCheckbox\"\r\n  [todoTitleImportance]=\"todoTitleImportance\"\r\n  [todoTitleCategory]=\"todoTitleCategory\"\r\n  [todoDataCheckbox]=\"todoDataCheckbox\"\r\n  [todoDataCategory]=\"todoDataCategory\"\r\n  [todoDataImportance]=\"todoDataImportance\"\r\n  (valueFilter)=\"todoValueFilter($event)\"\r\n>\r\n</brc-todo-list>\r\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-e31984359a2049c7208dd1ad1110d014",
            "file": "src/app/shared/components/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-pagination",
            "styleUrls": [
                "./pagination.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "eventResetPagination",
                    "line": 13,
                    "type": "Observable<void>"
                },
                {
                    "name": "recordsPerPage",
                    "defaultValue": "0",
                    "line": 12,
                    "type": "number"
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activePage",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "pageCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "pages",
                    "defaultValue": "[]",
                    "type": "Array<string | number>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getArrayOfPageFirst",
                    "args": [
                        {
                            "name": "pageCount",
                            "type": "number"
                        },
                        {
                            "name": "pageStart",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string | number>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageStart",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getArrayOfPageMiddle",
                    "args": [
                        {
                            "name": "pageCount",
                            "type": "number"
                        },
                        {
                            "name": "pageStart",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string | number>",
                    "typeParameters": [],
                    "line": 73,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageStart",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getArrayShort",
                    "args": [
                        {
                            "name": "pageCount",
                            "type": "number"
                        },
                        {
                            "name": "pageStart",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "pageCount",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageStart",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "onClickArrow",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickPage",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number | string"
                        },
                        {
                            "name": "i",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number | string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'brc-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrls: ['./pagination.component.scss']\r\n})\r\nexport class PaginationComponent implements OnInit, OnChanges {\r\n\r\n  @Input() totalRecords: number = 0;\r\n  @Input() recordsPerPage: number = 0;\r\n  @Input() eventResetPagination : Observable<void>;\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  public pages: Array<string | number> = [];\r\n  pageCount: number = 0;\r\n  activePage: number = 1;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.eventResetPagination.subscribe( () => {\r\n      console.log(\"minh\")\r\n      this.activePage = 1;\r\n    })\r\n   \r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.pageCount = this.getPageCount();\r\n    this.pages = this.pageCount <= 10 ? this.getArrayShort(this.pageCount, 1) : this.getArrayOfPageFirst(this.pageCount, 1);\r\n   }\r\n\r\n  private getPageCount(): number {\r\n    let toTalPage: number = 0;\r\n\r\n    if (this.totalRecords > 0 && this.recordsPerPage > 0) {\r\n      const pageCount = this.totalRecords / this.recordsPerPage;\r\n      const roundedPageCount = Math.floor(pageCount);\r\n      toTalPage = roundedPageCount < pageCount ? roundedPageCount + 1 : roundedPageCount;\r\n    }\r\n    return toTalPage;\r\n  }\r\n  // Lấy danh sách khi tổng số trang dưới 10\r\n  private getArrayShort(pageCount: number, pageStart: number): number[] {\r\n    let pageArray: number[] = [];\r\n    for (var i = 1; i <= pageCount; i++) {\r\n      pageArray.push(i);\r\n    }\r\n    return pageArray;\r\n  }\r\n  // Lấy danh sách trang khi ở 5 trang đầu hoặc 5 trang cuối\r\n  private getArrayOfPageFirst(pageCount: number, pageStart: number): Array<string | number> {\r\n    let pageArray: Array<string | number> = [];\r\n    if (pageStart === 1) {\r\n      for (var i = 1; i <= 5; i++) {\r\n        pageArray.push(i)\r\n      }\r\n      pageArray.push(\"...\");\r\n      pageArray.push(pageCount);\r\n    }\r\n    else {\r\n      pageArray.push(1);\r\n      pageArray.push(\"...\")\r\n      for (var i = pageStart; i <= pageCount; i++) {\r\n        pageArray.push(i)\r\n      }\r\n    }\r\n    return pageArray;\r\n  }\r\n  // Lấy danh sách trang khi trang ở giữa\r\n  private getArrayOfPageMiddle(pageCount: number, pageStart: number): Array<string | number> {\r\n    let pageArrayMiddle: Array<string | number> = [];\r\n    pageArrayMiddle.push(1);\r\n    pageArrayMiddle.push(\"...\")\r\n    for (var i = 1; i <= 3; i++) {\r\n\r\n      pageArrayMiddle.push(pageStart);\r\n      pageStart++;\r\n    }\r\n    pageArrayMiddle.push(\"...\");\r\n    pageArrayMiddle.push(pageCount);\r\n    return pageArrayMiddle;\r\n  }\r\n  onClickPage(pageNumber: number | string, i: number) {\r\n    if (pageNumber < 1) return;\r\n    if (pageNumber > this.pageCount) return;\r\n    if (this.pageCount <= 10) {\r\n      this.activePage = Number(this.pages[i]);\r\n      this.onPageChange.emit(this.activePage);\r\n    }\r\n    else {\r\n      if (i >= 4) {\r\n        let value = this.pages[i - 1] === \"...\" ? Number(this.pages[i]) : Number(this.pages[i - 1]) + 1;\r\n        this.pages = (this.pageCount - value < 4) ? this.getArrayOfPageFirst(this.pageCount, this.pageCount - 4) : this.getArrayOfPageMiddle(this.pageCount, value - 1);\r\n        this.activePage = value;\r\n        this.onPageChange.emit(this.activePage);\r\n      }\r\n      else if (i <= 2) {\r\n        let value = this.pages[i + 1] === \"...\" ? Number(this.pages[i]) : Number(this.pages[i + 1]) - 1;\r\n        this.pages = value < 5 ? this.getArrayOfPageFirst(this.pageCount, 1) : this.getArrayOfPageMiddle(this.pageCount, value - 1)\r\n        this.activePage = value;\r\n        this.onPageChange.emit(this.activePage);\r\n      }\r\n      else {\r\n        this.activePage = Number(this.pages[i]);\r\n        this.onPageChange.emit(this.activePage);\r\n      }\r\n    }\r\n  }\r\n  onClickArrow(pageNumber: number) {\r\n    if (pageNumber < 1) { return; }\r\n    else if (pageNumber > this.pageCount) { return; }\r\n    else {\r\n      for (let i = 0; i < this.pages.length; i++) {\r\n        if (pageNumber == this.pages[i]) {\r\n          this.onClickPage(pageNumber, i);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "ul {\r\n    padding: 0;\r\n  }\r\n  \r\n  a {\r\n    font-size: 12px;\r\n  }\r\n  \r\n  .page-number {\r\n    margin-top: 2px;\r\n  }",
                    "styleUrl": "./pagination.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"pagination\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\r\n  <ul fxFlex=\"100\" fxLayoutAlign=\"center space-around\">\r\n    <li class=\"page-item\" (click)=\"onClickArrow(activePage - 1 )\">\r\n      <a class=\"page-link\" href=\"javascript:void(0);\">\r\n        <mat-icon>\r\n          keyboard_arrow_left\r\n        </mat-icon>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item page-number\" *ngFor=\"let item of pages ; index as i\" fxLayoutAlign=\"center space-around\">\r\n      <a class=\"page-link\" [ngClass]=\"{'active': activePage === item}\" (click)=\"onClickPage(item , i)\"\r\n        href=\"javascript:void(0);\">\r\n        {{item}}\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item\">\r\n      <a class=\"page-link\" (click)=\"onClickArrow(activePage + 1)\" href=\"javascript:void(0);\">\r\n        <mat-icon>\r\n          keyboard_arrow_right\r\n        </mat-icon>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n"
        },
        {
            "name": "PollDetailComponent",
            "id": "component-PollDetailComponent-cf26bdcd14a7f7c56b87cfe8863b3e04",
            "file": "src/app/shared/components/poll-detail/poll-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-poll-detail",
            "styleUrls": [
                "./poll-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "CategoryArray",
                    "defaultValue": "[]",
                    "line": 99,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }",
                    "line": 48,
                    "type": "configButton"
                },
                {
                    "name": "configButtonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }",
                    "line": 55,
                    "type": "configButton"
                },
                {
                    "name": "ImportanceArray",
                    "defaultValue": "[]",
                    "line": 100,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelCategory",
                    "defaultValue": "\"Category\"",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "LabelCategory",
                    "defaultValue": "{\r\n    content: \"Category\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 21,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDatePicker",
                    "defaultValue": "{\r\n    content: \"DatePicker\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 27,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDescription",
                    "defaultValue": "{\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 39,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelImportance",
                    "defaultValue": "\"Importance\"",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "LabelImportance",
                    "defaultValue": "{\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 33,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelTodoName",
                    "defaultValue": "{\r\n    content: \"Todo Name\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 15,
                    "type": "LabelInterface"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Todo Description\"",
                    "line": 45,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "addTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 101,
                    "type": "EventEmitter"
                },
                {
                    "name": "cancelTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 102,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "colSpan",
                    "defaultValue": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelHeader",
                    "defaultValue": "{\r\n    content: 'Đi chơi phố',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "todoCategory",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDatePicker",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoImportant",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119
                },
                {
                    "name": "changeValueTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                },
                {
                    "name": "onsubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "setCategory",
                    "args": [
                        {
                            "name": "Category",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "Category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDatePicker",
                    "args": [
                        {
                            "name": "datePicker",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "datePicker",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImportant",
                    "args": [
                        {
                            "name": "Important",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "Important",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 135
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { addTodoValue } from '../../../store/models/addtodo.i';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\n\r\n@Component({\r\n  selector: 'brc-poll-detail',\r\n  templateUrl: './poll-detail.component.html',\r\n  styleUrls: ['./poll-detail.component.scss'],\r\n\r\n})\r\nexport class PollDetailComponent implements OnInit {\r\n\r\n  @Input() LabelTodoName: LabelInterface = {\r\n    content: \"Todo Name\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelCategory: LabelInterface = {\r\n    content: \"Category\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDatePicker: LabelInterface = {\r\n    content: \"DatePicker\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelImportance: LabelInterface = {\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDescription: LabelInterface = {\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() placeholder: string = \"Todo Description\"\r\n  @Input() labelCategory: string = \"Category\";\r\n  @Input() labelImportance: string = \"Importance\";\r\n  @Input() configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }\r\n  @Input() configButtonCancel: configButton = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }\r\n  labelHeader: LabelInterface = {\r\n    content: 'Đi chơi phố',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  getToDate(data) {\r\n    this.valueGetToDate = data;\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (window.innerWidth > 834) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n  public todoName: string;\r\n  public todoCategory: number;\r\n  public todoDatePicker: string;\r\n  public todoImportant: string;\r\n  public todoDescription: string;\r\n  public userId : number =1;\r\n  public colSpan: number = 2;\r\n  public valueGetToDate: string = '';\r\n  @Input() CategoryArray: LabelledValue<string>[] = [];\r\n  @Input() ImportanceArray: LabelledValue<string>[] = [];\r\n  @Output() addTodo = new EventEmitter();\r\n  @Output() cancelTodo = new EventEmitter();\r\n  onsubmit() {\r\n    let addTodoModel: addTodoValue = {\r\n      todoName: this.todoName,\r\n      todoCategoryId: this.todoCategory,\r\n      deadline: this.valueGetToDate === ''\r\n      ? undefined\r\n      : this.valueGetToDate+\"T00:00:00.000Z\",\r\n      importance: this.todoImportant,\r\n      description: this.todoDescription,\r\n      userId : this.userId,\r\n    };\r\n    this.addTodo.emit(addTodoModel);\r\n  }\r\n  changeValueTodo(data : string){\r\n    this.todoName = data;\r\n  }\r\n  cancel(){\r\n    this.cancelTodo.emit('/todo');\r\n  }\r\n  setCategory(Category: string) {\r\n    this.todoCategory = Number(Category);\r\n  }\r\n  setImportant(Important: string) {\r\n    this.todoImportant = Important;\r\n  }\r\n  setDatePicker(datePicker: string) {\r\n    this.todoDatePicker = datePicker;\r\n  }\r\n  setDescription(description: string) {\r\n    this.todoDescription = description;\r\n  }\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event) {\r\n    if (window.innerWidth > 834) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-grid-list{\r\n    border: solid 1px lightgray;\r\n}\r\nmat-grid-tile{\r\n    overflow: unset !important;\r\n}\r\n.container {\r\n    padding: 1%;\r\n  }\r\n.header {\r\n    padding: 10px;\r\n    margin: 10px;\r\n    margin-bottom: 40px;\r\n}\r\n.input{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.inputTodoName{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.labelTodoName{\r\n    margin : 15px 0 0px -8px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\n.label\r\n{\r\n    margin : 15px 0 0px 20px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\ninput:focus , .text-area:focus {\r\n    border: none;\r\n    box-shadow: none;\r\n    outline: none;\r\n}\r\n.text-area {\r\n    width: 75%;\r\n    height: 100%;\r\n    margin : 50px 0px 0px 20px\r\n}\r\n.button\r\n{\r\n    margin: 20px 50px 0px 50px;\r\n}\r\n.icon\r\n{\r\n    cursor: pointer;\r\n}\r\n@media (max-width:834px)\r\n{\r\n    .input{\r\n        width:50%\r\n    }\r\n    .label{\r\n        width: 25%;\r\n        margin : 0px 0 0 10px;\r\n    }\r\n    .labelTodoName{\r\n        width: 25%;\r\n        margin : 0px 0 0 -10.5px;\r\n    }\r\n    .text-area\r\n    {\r\n        width: 50%;\r\n        margin : 50px 0px 0 20px\r\n    }\r\n}\r\n@media (max-width:325)\r\n{\r\n    .button{\r\n        margin: 20px 0px 0px 0px!important;\r\n    }\r\n}\r\n.inputDate{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n",
                    "styleUrl": "./poll-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 70
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-1\">\r\n      <mat-icon>assignment_return</mat-icon>\r\n    </div>\r\n    <div class=\"col-sm-10\">\r\n      <div class=\"header\" style=\"text-align: center;\">\r\n        <brc-label [label]=\"labelHeader\"></brc-label>\r\n      </div>\r\n      <div style=\"text-align: center;\">\r\n        <label>Option này đang nằm top 2, với 3 Nhân viên đã lựa chọn</label>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-1\">\r\n\r\n    </div>\r\n  </div>\r\n  <hr/>\r\n  <div class=\"row\">\r\n    <mat-icon>account_circle</mat-icon>Nguyễn Nhật Anh\r\n  </div>\r\n  <br/>\r\n  <div class=\"row\">\r\n    <mat-icon>account_circle</mat-icon>Lê Văn Quốc Vũ\r\n  </div>\r\n  <br/> \r\n  <div class=\"row\">\r\n    <mat-icon>account_circle</mat-icon>Nguyễn Bá Nam Khánh\r\n  </div>\r\n  <br/>\r\n \r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "PollDetailPageComponent",
            "id": "component-PollDetailPageComponent-f8fa5e1d2a94f89451176deab66c9d14",
            "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-poll-detail-page",
            "styleUrls": [
                "./poll-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "type": "AddSchedule",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectEquipment",
                    "defaultValue": "selectEquipmentFake",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectImportant",
                    "defaultValue": "selectImportantFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMonthly",
                    "defaultValue": "selectMonthlyFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectTypeSchedule",
                    "defaultValue": "selectTypeScheduleFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectUserIds",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectWeekly",
                    "defaultValue": "selectWeeklyFake",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "unsubscribe$",
                    "defaultValue": "new Subject<void>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "AddSchedule",
                    "args": [
                        {
                            "name": "data",
                            "type": "AddSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "AddSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CancelSchedule",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CheckFreeTimeEquipment",
                    "args": [
                        {
                            "name": "data",
                            "type": "CheckFreeTimeParams"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "CheckFreeTimeParams",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        },
                        {
                            "name": "action",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n  CheckEquipmentSuccess,\r\n  ESchedule,\r\n  ScheduleAddFail,\r\n  ScheduleAddSuccess,\r\n} from '../../store/actions/schedule.action';\r\nimport {\r\n  AddSchedule,\r\n  CheckFreeTimeParams,\r\n} from '../../store/models/add-schedule.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport { UserService } from '../../store/services/user.service';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\n\r\n@Component({\r\n  selector: 'app-poll-detail-page',\r\n  templateUrl: './poll-detail-page.component.html',\r\n  styleUrls: ['./poll-detail-page.component.scss']\r\n})\r\nexport class PollDetailPageComponent implements OnInit, OnDestroy {\r\n  private unsubscribe$ = new Subject<void>();\r\n  public selectTypeSchedule: LabelledValue<string>[] = selectTypeScheduleFake;\r\n  public selectImportant: LabelledValue<string>[] = selectImportantFake;\r\n  public selectWeekly: LabelledValue<string>[] = selectWeeklyFake;\r\n  public selectMonthly: LabelledValue<string>[] = selectMonthlyFake;\r\n  public selectUserIds: Category[] = [];\r\n  public selectEquipment: Category[] = selectEquipmentFake;\r\n  public data: AddSchedule;\r\n  constructor(\r\n    private storeFacade: StoreFacade,\r\n    private actions$: Actions,\r\n    private router: Router,\r\n    private _snackBar: MatSnackBar,\r\n    private userService: UserService\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.userService.getAllUser().subscribe((data) => {\r\n      if (data !== undefined && data != []) {\r\n        this.selectUserIds = data.map((item) => {\r\n          let category: Category = {\r\n            categoryId: item.id,\r\n            categoryName: item.fullName,\r\n          };\r\n          return category;\r\n        });\r\n      }\r\n    });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<ScheduleAddSuccess>(ESchedule.ADD_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.router.navigate(['/poll']);\r\n        this.openSnackBar('Add Schedule Success !!!', 'Success!!');\r\n      });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<ScheduleAddFail>(ESchedule.ADD_FAIL),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        this.openSnackBar('Add Schedule Fail !!!', 'Failed!!');\r\n      });\r\n    this.actions$\r\n      .pipe(\r\n        ofType<CheckEquipmentSuccess>(ESchedule.CHECK_EQUIPMENT_SUCCESS),\r\n        takeUntil(this.unsubscribe$)\r\n      )\r\n      .subscribe((res) => {\r\n        let notification: string = '';\r\n        if (res.payload.list.count == 0) {\r\n          notification = 'OK';\r\n          this.openSnackBar('Check Equipment', notification);\r\n        } else {\r\n          for (let i = 0; i < res.payload.list.records.length; i++) {\r\n            for (let j = 0; j < selectEquipmentFake.length; j++) {\r\n              if (\r\n                res.payload.list.records[i].equipment_id ===\r\n                selectEquipmentFake[j].categoryId\r\n              ) {\r\n                notification += selectEquipmentFake[j].categoryName + ' ';\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          this.openSnackBar('Check Equipment', notification);\r\n        }\r\n      });\r\n  }\r\n  openSnackBar(message: string, action: string) {\r\n    this._snackBar.open(message, action, {\r\n      duration: 1500,\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.unsubscribe$.next();\r\n    this.unsubscribe$.complete();\r\n  }\r\n  AddSchedule(data: AddSchedule) {\r\n    this.data = data;\r\n    this.storeFacade.addSchedule(this.data);\r\n  }\r\n  CheckFreeTimeEquipment(data: CheckFreeTimeParams) {\r\n    console.log(data);\r\n    this.storeFacade.checkEquipment(data);\r\n  }\r\n  CancelSchedule(data: string) {\r\n    this.router.navigate([data]);\r\n  }\r\n}\r\nconst selectTypeScheduleFake: LabelledValue<string>[] = [\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n];\r\nconst selectImportantFake: LabelledValue<string>[] = [\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n];\r\n\r\nconst selectWeeklyFake: LabelledValue<string>[] = [\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n];\r\n\r\nlet selectMonthlyFake: LabelledValue<string>[] = [];\r\n\r\nconst nth = (d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n};\r\nconst dates = [...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n});\r\n\r\nselectMonthlyFake.push({\r\n  label: `last of month`,\r\n  value: `lastOfMonth`,\r\n});\r\n\r\nconst selectEquipmentFake: Category[] = [\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./poll-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<p>poll-detail-page works!</p>\r\n"
        },
        {
            "name": "PollListPageComponent",
            "id": "component-PollListPageComponent-0e78674f367b8d7d49da4951f85e536d",
            "file": "src/app/modules/poll-list-page/poll-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-poll-list-page",
            "styleUrls": [
                "./poll-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "configPollList",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Poll List',\r\n    btnAdd: 'Add Poll',\r\n  }",
                    "type": "PollList",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "filter",
                    "defaultValue": "this.storeFacade.filter",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "optionPollData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "optionPollDetailData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollColumns",
                    "defaultValue": "columns",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollDataSource",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollList",
                    "type": "PollRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollPageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollRecordsPerPage",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollShowRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "pollTotalRecords",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "topVotesData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "votes",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "configData",
                    "args": [
                        {
                            "name": "pollData",
                            "type": "any"
                        },
                        {
                            "name": "topVotesData",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "pollData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "topVotesData",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "pollAdd",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pollSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowDelete",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowDetail",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Column, SortItem } from '../../store/models/column.i';\r\nimport { PollRecord } from '../../store/models/pollList';\r\nimport { PollList } from '../../store/models/pollList.i';\r\nimport {\r\n  FilterSchedule\r\n} from '../../store/models/schedule.i';\r\nimport { PollService } from '../../store/services/poll.service';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\n\r\n\r\n@Component({\r\n  selector: 'brc-poll-list-page',\r\n  templateUrl: './poll-list-page.component.html',\r\n  styleUrls: ['./poll-list-page.component.scss'],\r\n})\r\nexport class PollListPageComponent implements OnInit {\r\n  private filter: FilterSchedule = this.storeFacade.filter;\r\n  public pollTotalRecords: number = 100;\r\n  public pollRecordsPerPage: number = 5;\r\n  public pollPageIndex: number = 0;\r\n  public pollShowRowSelection: boolean = false;\r\n  public pollColumns: Column[] = columns;\r\n  public pollDataSource = [];\r\n  public optionPollData = [];\r\n  public optionPollDetailData = [];\r\n  public topVotesData = [];\r\n  public pollData = [];\r\n  public pollList: PollRecord[];\r\n  public votes = [];\r\n  configPollList: PollList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Poll List',\r\n    btnAdd: 'Add Poll',\r\n  };\r\n  constructor(private storeFacade: StoreFacade, private _router: Router, private pollservice: PollService) { }\r\n  ngOnInit(): void {\r\n    this.pollservice.getListPoll().subscribe(dataPoll => {\r\n      this.pollData = dataPoll;\r\n      this.pollservice.getListTopVote().subscribe(dataTop => {\r\n        this.topVotesData = dataTop;\r\n        this.configData(this.pollData, this.topVotesData);\r\n      })\r\n    });\r\n  }\r\n\r\n  configData(pollData: any, topVotesData: any) {\r\n    let index = 0;\r\n    pollData.forEach(poll => {\r\n      let topvotes: any;\r\n      topvotes = ['top'];\r\n      topVotesData.forEach(topVote => {\r\n        if (poll['pollId'] == topVote['pollId']) {\r\n          let vote = { optionName: topVote['optionName'], voteCount: topVote['voteCount'] };\r\n          topvotes.push(vote);\r\n        }\r\n      });\r\n      let data =\r\n      {\r\n        id: poll['pollId'], stt: index + 1, question: poll['question'], expiration: poll['expiration'], status: poll['status'], create_by: poll['firstName'] + \" \" + poll['lastName'],\r\n        topvotes,\r\n        action: 'action'\r\n      }\r\n      this.pollDataSource.push(data);\r\n      index = index + 1;\r\n    });\r\n    console.log(this.pollDataSource);\r\n  }\r\n\r\n  scheduleFilter(data: FilterSchedule) {\r\n    this.filter = data;\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = 1;\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n\r\n  pollSort(data: SortItem[]) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      importance: this.filter.importance,\r\n      fromDateList: this.filter.fromDateList,\r\n      toDateList: this.filter.toDateList,\r\n      sort: data,\r\n    };\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n\r\n  pollAdd(data) {\r\n    this._router.navigateByUrl('poll/add');\r\n  }\r\n\r\n  rowDetail(data: Object) {\r\n    this._router.navigateByUrl(`poll/poll-vote/${data['id']}`);\r\n  }\r\n\r\n  rowDelete(data: Object) {\r\n    if (confirm(\"Are you sure delete poll\")) {\r\n      this.pollservice.deletePoll(data['id']).subscribe(data => {\r\n        console.log(data);\r\n        this.pollservice.getListPoll().subscribe(dataPoll => {\r\n          this.pollData = dataPoll;\r\n          this.pollservice.getListTopVote().subscribe(dataTop => {\r\n            this.topVotesData = dataTop;\r\n            this.configData(this.pollData, this.topVotesData);\r\n          })\r\n        })\r\n      },\r\n      error =>{\r\n        console.log(error);\r\n      }\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  changePage(data) {\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = Number(data.pageIndex) + 1;\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n}\r\n// mock data\r\nconst columns: Column[] = [\r\n  {\r\n    title: 'STT',\r\n    dataIndex: 'stt',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Question',\r\n    dataIndex: 'question',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Expiration',\r\n    dataIndex: 'expiration',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Created by',\r\n    dataIndex: 'create_by',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Top votes',\r\n    dataIndex: 'topvotes',\r\n    sort: false,\r\n  },\r\n  {\r\n    title: 'Action',\r\n    dataIndex: 'action',\r\n    sort: false,\r\n  },\r\n];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./poll-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "pollservice",
                        "type": "PollService"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pollservice",
                        "type": "PollService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-poll-list\r\n    [pollColumns]=\"pollColumns\"\r\n    [pollDataSource]=\"pollDataSource\"\r\n    [scheduleShowRowSelection]=\"pollShowRowSelection\"\r\n    [scheduleTotalRecords]=\"pollTotalRecords\"\r\n    [scheduleRecordsPerPage]=\"pollRecordsPerPage\"\r\n    [schedulePageIndex]=\"pollPageIndex\"\r\n    [configPollList]=\"configPollList\"\r\n    (valueFilter)=\"scheduleFilter($event)\"\r\n    (sort)=\"pollSort($event)\"\r\n    (btnAddPoll)=\"pollAdd($event)\"\r\n    (rowDetail)=\"rowDetail($event)\"\r\n    (rowDelete)=\"rowDelete($event)\"\r\n    (pageOnPageChange)=\"changePage($event)\"\r\n></brc-poll-list>\r\n"
        },
        {
            "name": "PollMainComponent",
            "id": "component-PollMainComponent-ea88e3559b51a6c19da6a629ce480d18",
            "file": "src/app/shared/components/poll-main/poll-main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-poll-main",
            "styleUrls": [
                "./poll-main.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "CategoryArray",
                    "defaultValue": "[]",
                    "line": 102,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }",
                    "line": 51,
                    "type": "configButton"
                },
                {
                    "name": "configButtonCancel",
                    "defaultValue": "{\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }",
                    "line": 58,
                    "type": "configButton"
                },
                {
                    "name": "ImportanceArray",
                    "defaultValue": "[]",
                    "line": 103,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelCategory",
                    "defaultValue": "\"Expiration\"",
                    "line": 49,
                    "type": "string"
                },
                {
                    "name": "LabelCategory",
                    "defaultValue": "{\r\n    content: \"Expiration\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 24,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDatePicker",
                    "defaultValue": "{\r\n    content: \"Response\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 30,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelDescription",
                    "defaultValue": "{\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 42,
                    "type": "LabelInterface"
                },
                {
                    "name": "labelImportance",
                    "defaultValue": "\"Importance\"",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "LabelImportance",
                    "defaultValue": "{\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 36,
                    "type": "LabelInterface"
                },
                {
                    "name": "LabelTodoName",
                    "defaultValue": "{\r\n    content: \"Question\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }",
                    "line": 18,
                    "type": "LabelInterface"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Todo Description\"",
                    "line": 48,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "addTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 104,
                    "type": "EventEmitter"
                },
                {
                    "name": "cancelTodo",
                    "defaultValue": "new EventEmitter()",
                    "line": 105,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "70",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "colSpan",
                    "defaultValue": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelHeader",
                    "defaultValue": "{\r\n    content: 'Poll',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  }",
                    "type": "LabelInterface",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "mode",
                    "defaultValue": "'determinate'",
                    "type": "ProgressBarMode",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "todoCategory",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDatePicker",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoDescription",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoImportant",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "todoName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "valueGetToDate",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122
                },
                {
                    "name": "changeValueTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onsubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "setCategory",
                    "args": [
                        {
                            "name": "Category",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "Category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDatePicker",
                    "args": [
                        {
                            "name": "datePicker",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "datePicker",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDescription",
                    "args": [
                        {
                            "name": "description",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "description",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setImportant",
                    "args": [
                        {
                            "name": "Important",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "Important",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 138
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, HostListener, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport {ThemePalette} from '@angular/material/core';\r\nimport {ProgressBarMode} from '@angular/material/progress-bar';\r\nimport { addTodoValue } from '../../../store/models/addtodo.i';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\n@Component({\r\n  selector: 'brc-poll-main',\r\n  templateUrl: './poll-main.component.html',\r\n  styleUrls: ['./poll-main.component.scss']\r\n})\r\nexport class PollMainComponent implements OnInit {\r\n  color: ThemePalette = 'primary';\r\n  mode: ProgressBarMode ='determinate';\r\n  bufferValue = 70;\r\n\r\n  @Input() LabelTodoName: LabelInterface = {\r\n    content: \"Question\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelCategory: LabelInterface = {\r\n    content: \"Expiration\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDatePicker: LabelInterface = {\r\n    content: \"Response\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelImportance: LabelInterface = {\r\n    content: \"Importance\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() LabelDescription: LabelInterface = {\r\n    content: \"Description\",\r\n    size: 15,\r\n    color: \"\",\r\n    backgroundColor: \"\"\r\n  }\r\n  @Input() placeholder: string = \"Todo Description\"\r\n  @Input() labelCategory: string = \"Expiration\";\r\n  @Input() labelImportance: string = \"Importance\";\r\n  @Input() configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Add Todo!',\r\n  }\r\n  @Input() configButtonCancel: configButton = {\r\n    colorButton: 'warn',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'warn',\r\n    type: 'submit',\r\n    text: 'Cancel!',\r\n  }\r\n  labelHeader: LabelInterface = {\r\n    content: 'Poll',\r\n    size: 30,\r\n    color: 'black',\r\n    backgroundColor: 'while',\r\n  };\r\n  getToDate(data) {\r\n    this.valueGetToDate = data;\r\n  }\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (window.innerWidth < 834) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n  public todoName: string;\r\n  public todoCategory: number;\r\n  public todoDatePicker: string;\r\n  public todoImportant: string;\r\n  public todoDescription: string;\r\n  public userId : number =1;\r\n  public colSpan: number = 2;\r\n  public valueGetToDate: string = '';\r\n  @Input() CategoryArray: LabelledValue<string>[] = [];\r\n  @Input() ImportanceArray: LabelledValue<string>[] = [];\r\n  @Output() addTodo = new EventEmitter();\r\n  @Output() cancelTodo = new EventEmitter();\r\n  onsubmit() {\r\n    let addTodoModel: addTodoValue = {\r\n      todoName: this.todoName,\r\n      todoCategoryId: this.todoCategory,\r\n      deadline: this.valueGetToDate === ''\r\n      ? undefined\r\n      : this.valueGetToDate+\"T00:00:00.000Z\",\r\n      importance: this.todoImportant,\r\n      description: this.todoDescription,\r\n      userId : this.userId,\r\n    };\r\n    this.addTodo.emit(addTodoModel);\r\n  }\r\n  changeValueTodo(data : string){\r\n    this.todoName = data;\r\n  }\r\n  cancel(){\r\n    this.cancelTodo.emit('/todo');\r\n  }\r\n  setCategory(Category: string) {\r\n    this.todoCategory = Number(Category);\r\n  }\r\n  setImportant(Important: string) {\r\n    this.todoImportant = Important;\r\n  }\r\n  setDatePicker(datePicker: string) {\r\n    this.todoDatePicker = datePicker;\r\n  }\r\n  setDescription(description: string) {\r\n    this.todoDescription = description;\r\n  }\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event) {\r\n    if (window.innerWidth < 1000) {\r\n      this.colSpan= 2;\r\n      this.LabelCategory.size = 15;\r\n      this.LabelTodoName.size = 15;\r\n      this.LabelDatePicker.size = 15;\r\n      this.LabelImportance.size = 15;\r\n      this.LabelDescription.size = 15;\r\n    }\r\n    else {\r\n      this.colSpan = 4;\r\n      this.LabelCategory.size = 12;\r\n      this.LabelTodoName.size = 12;\r\n      this.LabelDatePicker.size = 12;\r\n      this.LabelImportance.size = 12;\r\n      this.LabelDescription.size = 12;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-grid-list{\r\n    border: solid 1px lightgray;\r\n}\r\nmat-grid-tile{\r\n    overflow: unset !important;\r\n}\r\n.container {\r\n    padding: 1%;\r\n  }\r\n.header {\r\n    padding: 10px;\r\n    margin: 10px;\r\n    margin-bottom: 40px;\r\n}\r\n.input{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.inputTodoName{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n}\r\n.labelTodoName{\r\n    margin : 15px 0 0px -8px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\n.label\r\n{\r\n    margin : 15px 0 0px 20px;\r\n    width : 8em;\r\n    font-weight : bold;\r\n}\r\ninput:focus , .text-area:focus {\r\n    border: none;\r\n    box-shadow: none;\r\n    outline: none;\r\n}\r\n.text-area {\r\n    width: 75%;\r\n    height: 100%;\r\n    margin : 50px 0px 0px 20px\r\n}\r\n.button\r\n{\r\n    margin: 20px 50px 0px 50px;\r\n}\r\n.icon\r\n{\r\n    cursor: pointer;\r\n}\r\n@media (max-width:834px)\r\n{\r\n    .input{\r\n        width:50%\r\n    }\r\n    .label{\r\n        width: 25%;\r\n        margin : 0px 0 0 10px;\r\n    }\r\n    .labelTodoName{\r\n        width: 25%;\r\n        margin : 0px 0 0 -10.5px;\r\n    }\r\n    .text-area\r\n    {\r\n        width: 50%;\r\n        margin : 50px 0px 0 20px\r\n    }\r\n}\r\n@media (max-width:325)\r\n{\r\n    .button{\r\n        margin: 20px 0px 0px 0px!important;\r\n    }\r\n}\r\n.inputDate{\r\n    margin: 10px 0px 0px 20px;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n",
                    "styleUrl": "./poll-main.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 73
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\r\n  <h1 style=\"text-align:center;\">Poll</h1>\r\n  <div class=\"container-fluid\">\r\n    <hr/>\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-3\"><b>Question</b></div>\r\n      <div class=\"col-sm-9\">Cuối tuần này các bạn muốn đi đâu?</div>\r\n    </div>\r\n    <br>\r\n    \r\n    <hr/>\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-3\"><b>Expiration</b></div>\r\n      <div class=\"col-sm-9\">Tomorrow at 12:10 AM</div>\r\n    </div>\r\n    <br>\r\n\r\n    <hr/>\r\n    <div class=\"row\">\r\n      <div class=\"col-sm-3\"><b>Response</b></div>\r\n      <div class=\"col-sm-6\">\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-10\">\r\n              <input type=\"checkbox\"  id=\"check1\" name=\"option1\" value=\"something\">  Đi chơi phố\r\n             \r\n              <section class=\"example-section\">\r\n                <mat-progress-bar\r\n                    class=\"example-margin\"\r\n                    [color]=\"color\"\r\n                    [mode]=\"mode\"\r\n                    [value]=\"'30'\"\r\n                    [bufferValue]=\"bufferValue\">\r\n                </mat-progress-bar>     \r\n                \r\n              </section>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>navigate_next</mat-icon>\r\n            </div>\r\n            <div class=\"col-sm-1\" style=\"margin-top: 7px;\">\r\n              <span matBadge=\"3\" matBadgeOverlap=\"false\"></span>\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div>\r\n            <!-- <div class=\"col-sm-1\">\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div> -->\r\n          </div>\r\n          <br/><br/>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-10\">\r\n              <input type=\"checkbox\"  id=\"check1\" name=\"option1\" value=\"something\" checked>  Đi shopping\r\n              <section class=\"example-section\">\r\n                <mat-progress-bar\r\n                  [color]=\"color\"\r\n                  [mode]=\"mode\"\r\n                  [value]=\"'20'\"\r\n                  [bufferValue]=\"bufferValue\">\r\n                </mat-progress-bar>  \r\n              </section>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>navigate_next</mat-icon>\r\n            </div>\r\n            <div class=\"col-sm-1\" style=\"margin-top: 7px;\">\r\n              <span matBadge=\"2\" matBadgeOverlap=\"false\"></span>\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div>\r\n            <!-- <div class=\"col-sm-1\">\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div> -->\r\n          </div>\r\n\r\n        <br/><br/>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-sm-10\">\r\n              <input type=\"checkbox\"  id=\"check1\" name=\"option1\" value=\"something\">  Đi cà phê\r\n              <section class=\"example-section\">\r\n                <mat-progress-bar\r\n                    class=\"example-margin\"\r\n                    [color]=\"color\"\r\n                    [mode]=\"mode\"\r\n                    [value]=\"'50'\"\r\n                    [bufferValue]=\"bufferValue\">\r\n                </mat-progress-bar> \r\n              </section>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>account_circle</mat-icon>\r\n              <mat-icon>navigate_next</mat-icon>\r\n            </div>\r\n            <div class=\"col-sm-1\" style=\"margin-top: 7px;\">\r\n              <span matBadge=\"5\" matBadgeOverlap=\"false\"></span>\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div>\r\n            <!-- <div class=\"col-sm-1\">\r\n              <mat-icon>play_circle_outline</mat-icon>\r\n            </div> -->\r\n          </div>\r\n\r\n          <br/><br/>\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-3\"></div>\r\n        <div class=\"col-sm-9\" style=\"display: flex; flex-direction: row;\">\r\n          <mat-icon>add_box</mat-icon>\r\n          <label style=\"color: black; margin-top: 4px;\">Add option</label>\r\n        </div>\r\n      </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "name": "PollMainPageComponent",
            "id": "component-PollMainPageComponent-ac1b23ea4fb1a6cd1e0481be53934acd",
            "file": "src/app/modules/poll-main-page/poll-main-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-poll-main-page",
            "styleUrls": [
                "./poll-main-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-main-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-poll-main-page',\r\n  templateUrl: './poll-main-page.component.html',\r\n  styleUrls: ['./poll-main-page.component.scss']\r\n})\r\nexport class PollMainPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./poll-main-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<brc-poll-main></brc-poll-main>"
        },
        {
            "name": "PopUpComponent",
            "id": "component-PopUpComponent-9c00dedde7ee11c45e77c93a77f3c6b5",
            "file": "src/app/shared/components/pop-up/pop-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-pop-up",
            "styleUrls": [
                "./pop-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pop-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "reminder",
                    "line": 30,
                    "type": "ReminderNotification"
                },
                {
                    "name": "temp",
                    "defaultValue": "false",
                    "line": 29,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "getId",
                    "defaultValue": "new EventEmitter<{ eventId: number, notificationId: number }>()",
                    "line": 31,
                    "type": "EventEmitter"
                },
                {
                    "name": "markAsRead",
                    "defaultValue": "new EventEmitter<{ isRead: boolean, notificationId: number }>()",
                    "line": 32,
                    "type": "EventEmitter"
                },
                {
                    "name": "readDetail",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "notification",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'notification'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "getValueNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "markedReaded",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "readDetailNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  animate, state,\r\n  style,\r\n  transition, trigger\r\n} from '@angular/animations';\r\nimport { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ReminderNotification } from '../../../store/models/reminder-notification.i';\r\n@Component({\r\n  selector: 'brc-pop-up',\r\n  templateUrl: './pop-up.component.html',\r\n  styleUrls: ['./pop-up.component.scss'],\r\n  animations: [\r\n    trigger('flyInOut', [\r\n      state('in', style({ transform: 'translateX(80vw)' })),\r\n      transition('void => *', [\r\n        style({ transform: 'translateX(120vw)' }),\r\n        animate(500)\r\n      ]),\r\n      transition('* => void', [\r\n        animate(500, style({ transform: 'translateX(120vw)' }))\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class PopUpComponent implements OnInit {\r\n\r\n  @ViewChild('notification') notification: ElementRef;\r\n  @Input() temp: boolean = false;\r\n  @Input() reminder: ReminderNotification;\r\n  @Output() getId = new EventEmitter<{ eventId: number, notificationId: number }>();\r\n  @Output() markAsRead = new EventEmitter<{ isRead: boolean, notificationId: number }>();\r\n  @Output() readDetail = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  public ngOnInit() {\r\n    // call this setTimer method when you want to set timer\r\n  }\r\n\r\n  markedReaded() {\r\n    const notificationIdTemp = this.reminder.notificationId;\r\n    this.markAsRead.emit({ isRead: true, notificationId: notificationIdTemp });\r\n    this.notification.nativeElement.style.display = \"none\";\r\n\r\n  }\r\n\r\n  cancelNotification() {\r\n    this.notification.nativeElement.style.display = \"none\";\r\n  }\r\n\r\n  readDetailNotification() {\r\n    this.readDetail.emit();\r\n  }\r\n  getValueNotification() {\r\n    let type = this.reminder.eventTypeId;\r\n    switch (type) {\r\n      case 1: return 'Schedule: Meeting/ '\r\n        + this.reminder.notificationTitle\r\n        + ' Start at '\r\n        + this.reminder.eventStartTime;\r\n      case 2: return 'Todo: '\r\n        + this.reminder.notificationTitle\r\n        + ' Deadline at: '\r\n        + this.reminder.eventStartTime;\r\n      default:\r\n        return '/Event type name/: '\r\n          + this.reminder.notificationTitle\r\n          + '/' + this.reminder.eventStartTime;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pop-up-notification {\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\r\n    max-width: 19vw;\r\n    min-width: 19vw;\r\n    padding: 0.5vw;\r\n    background-color: rgb(245, 245, 245);\r\n    padding-top: 0px;\r\n    \r\n}\r\n.pop-up-notification p {\r\n    padding: 0px;\r\n    margin: 0px;\r\n    \r\n}\r\n\r\n.pop-up-notification h2 {\r\n    padding-bottom: 8px;\r\n    margin-bottom: 0px;\r\n    margin-top: 8px;\r\n    \r\n}\r\n\r\n.mat-icon {\r\n    font-size: 30px;\r\n    padding-right: 10px;\r\n    \r\n}\r\n\r\n.button-area {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-top: 10px;\r\n    padding-bottom: 8px;\r\n    margin-bottom: 0px;\r\n}\r\n\r\n .mat-raised-button{\r\n\r\n    font-family: sans-serif;\r\n    font-size: 15px !important;\r\n    line-height: 30px !important;\r\n}\r\n.notification-description{\r\n    text-overflow: ellipsis; \r\n    white-space: nowrap; \r\n    overflow: hidden;\r\n    color: rgb(14, 14, 116);\r\n}\r\n",
                    "styleUrl": "./pop-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"pop-up-notification\" #notification [@flyInOut]=\"'in'\" *ngIf=\"temp\">\r\n  <h3 class=\"category-notification-style\">\r\n    <mat-icon matBadgeColor=\"warn\" color=\"primary\">notifications</mat-icon> {{reminder.categoryName}}\r\n  </h3>\r\n  <p class=\"notification-title\">{{getValueNotification()}}</p>\r\n  <p><a class=\"notification-description\" (click)=\"readDetailNotification()\">View detail</a></p>\r\n  <div class=\"button-area\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"markedReaded()\">Readed</button>\r\n    <button mat-raised-button color=\"basic\" (click)=\"cancelNotification()\">Cancel</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PopupPageComponent",
            "id": "component-PopupPageComponent-7df9790c89ca2cdbf18b91070a12af47",
            "file": "src/app/modules/popup-notification/popup-page/popup-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-popup-page",
            "styleUrls": [
                "./popup-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./popup-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                },
                {
                    "name": "onGetId",
                    "args": [
                        {
                            "name": "popup",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "popup",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMarkAsRead",
                    "args": [
                        {
                            "name": "popup",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "popup",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n// import { SocketClientService } from '../../../socket-client/socket-client.service';\r\n\r\n@Component({\r\n  selector: 'brc-popup-page',\r\n  templateUrl: './popup-page.component.html',\r\n  styleUrls: ['./popup-page.component.scss'],\r\n})\r\nexport class PopupPageComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onGetId(popup: Object) {\r\n    console.log(popup);\r\n  }\r\n  onMarkAsRead(popup: Object) {\r\n    console.log(popup);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./popup-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n"
        },
        {
            "name": "ScheduleDetailComponent",
            "id": "component-ScheduleDetailComponent-41785f77e50eb083592044b2fefc3677",
            "file": "src/app/shared/components/schedule-detail/schedule-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-schedule-detail",
            "styleUrls": [
                "./schedule-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "scheduleDetail",
                    "defaultValue": "{\r\n    scheduleId: '',\r\n    title: '',\r\n    description: '',\r\n    startDate: '',\r\n    dueDate: '',\r\n    timeDueRepeat: '',\r\n    timeStartRepeat: '',\r\n    createBy: '',\r\n    createdByName: '',\r\n    createByFullName: '',\r\n    scheduleCategoryId: '',\r\n    scheduleCategoryName: '',\r\n    created: '',\r\n    modified: '',\r\n    place: '',\r\n    important: '',\r\n    equipmentNames: '',\r\n    type: '',\r\n    valueRepeat: '',\r\n    userNames: '',\r\n  }",
                    "line": 19,
                    "type": "ScheduleDetail"
                },
                {
                    "name": "scheduleTime",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "scheduleTimeRepeat",
                    "line": 16,
                    "type": "string"
                },
                {
                    "name": "typeCheck",
                    "line": 17,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClickEmt",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 42,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "configButtonAdd",
                    "defaultValue": "{\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'OK!',\r\n  }",
                    "type": "configButton",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "checkInDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "clickButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { formatDate } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { ScheduleDetail } from '../../../store/models/schedule.i';\r\n\r\n@Component({\r\n  selector: 'brc-schedule-detail',\r\n  templateUrl: './schedule-detail.component.html',\r\n  styleUrls: ['./schedule-detail.component.scss'],\r\n})\r\nexport class ScheduleDetailComponent implements OnInit {\r\n  constructor() {}\r\n  ngOnInit(): void {\r\n    //this.scheduleDetail.startDate = this.convertDateToDayName(this.scheduleDetail.startDate) + ', ' + this.convertDateToMonthName(this.scheduleDetail.startDate);\r\n  }\r\n  @Input() scheduleTimeRepeat : string;\r\n  @Input() typeCheck: boolean;\r\n  @Input() scheduleTime: string;\r\n  @Input() scheduleDetail: ScheduleDetail = {\r\n    scheduleId: '',\r\n    title: '',\r\n    description: '',\r\n    startDate: '',\r\n    dueDate: '',\r\n    timeDueRepeat: '',\r\n    timeStartRepeat: '',\r\n    createBy: '',\r\n    createdByName: '',\r\n    createByFullName: '',\r\n    scheduleCategoryId: '',\r\n    scheduleCategoryName: '',\r\n    created: '',\r\n    modified: '',\r\n    place: '',\r\n    important: '',\r\n    equipmentNames: '',\r\n    type: '',\r\n    valueRepeat: '',\r\n    userNames: '',\r\n  };\r\n\r\n  @Output() btnClickEmt: EventEmitter<void> = new EventEmitter<void>();\r\n  configButtonAdd: configButton = {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'Basic',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'OK!',\r\n  };\r\n  clickButton() {\r\n    this.btnClickEmt.emit();\r\n  }\r\n  checkInDate() {\r\n    if (\r\n      new Date(this.scheduleDetail.startDate).toLocaleDateString() ===\r\n      new Date(this.scheduleDetail.dueDate).toLocaleDateString()\r\n    ) {\r\n      this.scheduleDetail.dueDate = formatDate(\r\n        new Date(this.scheduleDetail.dueDate),\r\n        'hh:mm aaa',\r\n        'en'\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".label {\r\n  color: #718093;\r\n  padding-left: 10px;\r\n  margin: 0px 1vw 0.2vw 2vw;\r\n}\r\n\r\n.form-info {\r\n  display: inline-flex;\r\n  line-height: 30px;\r\n  width: 100%;\r\n  height: 100%;\r\n  border-bottom: 1px solid #dfe6e9;\r\n  padding:  0.5vw 0px;\r\n}\r\n\r\n.form-info>p {\r\n  margin: 0;\r\n  font-size: 17px;\r\n}\r\n\r\ndiv.form-info>brc-label {\r\n  margin-right: 5px;\r\n  float: left;\r\n}\r\n\r\n.title {\r\n  background-color: #0097e6;\r\n  padding: 1vw;\r\n  display: inline-flex;\r\n}\r\n\r\n.title>p {\r\n  margin: 0;\r\n  color: black;\r\n  font-size: 20px;\r\n}\r\n\r\n.registration {\r\n  display: inline-flex;\r\n  background-color: #cce8f0;\r\n  padding: 0.8vw;\r\n}\r\n\r\n.registration>p {\r\n  margin: 0;\r\n  font-size: 18px;\r\n}\r\n\r\n.button {\r\n  margin: 1vw;\r\n}\r\n\r\n\r\n\r\n@media only screen and (max-width: 1280px) {\r\n  .label {\r\n    padding-left: 10px;\r\n  }\r\n  .form-info>p {\r\n    font-size: 15px;\r\n  }\r\n\r\n  .label {\r\n    max-width: 30% !important;\r\n  }\r\n\r\n  .registration>p {\r\n    font-size: 16px;\r\n    line-height: 2vw;\r\n  }\r\n\r\n  .registrationTitle {\r\n    max-width: 30% !important;\r\n  }\r\n\r\n  .title>p {\r\n    font-size: 17px;\r\n  }\r\n}\r\n\r\n\r\n@media only screen and (max-width: 836px) {\r\n\r\n  .form-info>p {\r\n    font-size: 11px;\r\n    line-height: 3vw;\r\n    padding: 1vw 0;\r\n  }\r\n  .label {\r\n    padding-left: 10px!important;\r\n    max-width: 30% !important;\r\n  }\r\n  .registration>p {\r\n    font-size: 12px;\r\n    line-height: 15px;\r\n  }\r\n  .registration{\r\n    padding: 1vw 0.8vw !important;\r\n  }\r\n  .registrationTitle {\r\n    padding-left: 10px;\r\n    max-width: 30% !important;\r\n  }\r\n  .title>p {\r\n    font-size: 13px;\r\n    max-width: 100%!important;\r\n  }\r\n}\r\n@media only screen and (max-width: 540px) {\r\n\r\n  .registration>p {\r\n    font-size: 11px;\r\n    line-height: 15px;\r\n  }\r\n  .registration{\r\n    padding: 1.5vw 0.8vw;\r\n  }\r\n  .form-info>p {\r\n    font-size: 10px;\r\n    line-height: 15px;\r\n    padding: 1vw 0 1vw 1vw;\r\n  }\r\n  .title>p {\r\n    font-size: 13px;\r\n    max-width: 100%!important;\r\n  }\r\n  .title{\r\n    padding-left: 13px;\r\n  }\r\n}\r\n@media only screen and (max-width: 360px) {\r\n  .label {\r\n    padding-left: 10px!important;\r\n    max-width: 40% !important;\r\n  }\r\n  .registration>p {\r\n    font-size: 10px;\r\n    line-height: 15px;\r\n  }\r\n  .registration{\r\n    padding: 1.5vw 0.8vw;\r\n  }\r\n  .registrationTitle{\r\n    padding: 0;\r\n  }\r\n  .form-info>p {\r\n    font-size: 9px;\r\n    line-height: 15px;\r\n    padding: 1vw 0 1vw 1vw;\r\n  }\r\n  .title>p {\r\n    font-size: 11px;\r\n    max-width: 100%!important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./schedule-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"container\"\r\n  fxLayout=\"row wrap\"\r\n  fxLayoutAlign=\"center start\"\r\n  style=\"font-size: 18px;\"\r\n>\r\n  <div class=\"title\" fxFlex=\"100\" fxFlex.gt-md=\"100\">\r\n    <mat-icon >today</mat-icon>\r\n    <p fxLayoutAlign=\"start center\">\r\n      {{ scheduleDetail?.scheduleCategoryName }}: {{ scheduleDetail?.title }}\r\n    </p>\r\n  </div>\r\n  <div class=\"registration\" fxFlex=\"100\" fxFlex.gt-md=\"100\">\r\n    <p fxFlex=\"10\" fxFlex.gt-md=\"25\" fxLayoutAlign=\"start center\" class=\"registrationTitle\">\r\n      Registration information:\r\n    </p>\r\n    <mat-icon >person</mat-icon>\r\n    <p  fxLayoutAlign=\"start center\">\r\n      {{ scheduleDetail?.createByFullName }} | {{ scheduleDetail?.created }}\r\n    </p>\r\n  </div>\r\n\r\n  <!-- time repeat -->\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"50\" *ngIf=\"!typeCheck\">\r\n    <p class=\"label\" fxFlex=\"15\" fxFlex.gt-md=\"30\" fxLayoutAlign=\"start center\">\r\n      Schedule time:\r\n    </p>\r\n    <p>\r\n      {{ scheduleTimeRepeat }} at\r\n      {{ scheduleDetail?.timeStartRepeat }}-{{ scheduleDetail?.timeDueRepeat }}\r\n    </p>\r\n  </div>\r\n  <!-- end time repeat -->\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"50\" *ngIf=\"!typeCheck\">\r\n    <p class=\"label\" fxFlex=\"15\" fxFlex.gt-md=\"30\" fxLayoutAlign=\"start center\">\r\n      Experience at:\r\n    </p>\r\n    <p>{{ scheduleDetail?.dueDate }}</p>\r\n  </div>\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"100\" *ngIf=\"typeCheck\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Schedule Time:</p>\r\n    <p>{{ scheduleTime }}</p>\r\n  </div>\r\n  <!-- title -->\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Schedule name:</p>\r\n    <p>{{ scheduleDetail?.title }}</p>\r\n  </div>\r\n  <!-- localtion -->\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Location:</p>\r\n    <p>{{ scheduleDetail?.place }}</p>\r\n  </div>\r\n  <!-- type schedule -->\r\n  <div class=\"form-info\" fxFlex=\"100\" fxFlex.gt-md=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Importance:</p>\r\n    <p>{{ scheduleDetail?.important }}</p>\r\n  </div>\r\n  <div class=\"form-info\" fxFlex=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Participants:</p>\r\n    <p class=\"child\">{{ scheduleDetail?.userNames }}</p>\r\n  </div>\r\n  <div class=\"form-info\" fxFlex=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Equipment:</p>\r\n    <p class=\"child\">{{ scheduleDetail?.equipmentNames }}</p>\r\n  </div>\r\n  <div class=\"form-info\" fxFlex=\"100\">\r\n    <p class=\"label\" fxFlex=\"15\" fxLayoutAlign=\"start center\">Description:</p>\r\n    <p>{{ scheduleDetail?.description }}</p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ScheduleDetailPageComponent",
            "id": "component-ScheduleDetailPageComponent-0cf7330687084b806894a0c7ab60dd6f",
            "file": "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-schedule-detail-page",
            "styleUrls": [
                "./schedule-detail-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-detail-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "scheduleDetail",
                    "type": "ScheduleDetail",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleTime",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleTimeRepeat",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "typeCheck",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "btnClickEmt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "checkTypeSchedule",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertEquipmentToString",
                    "args": [
                        {
                            "name": "equipments",
                            "type": "EquipmentNames[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "jsdoctags": [
                        {
                            "name": "equipments",
                            "type": "EquipmentNames[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertUserToString",
                    "args": [
                        {
                            "name": "users",
                            "type": "UserNames[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "UserNames[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { formatDate } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport {\r\n  EquipmentNames,\r\n  ScheduleDetail,\r\n  UserNames,\r\n} from '../../store/models/schedule.i';\r\nimport { ScheduleService } from '../../store/services/schedule.service';\r\n\r\nconst selectWeekly: string[] = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n@Component({\r\n  selector: 'brc-schedule-detail-page',\r\n  templateUrl: './schedule-detail-page.component.html',\r\n  styleUrls: ['./schedule-detail-page.component.scss'],\r\n})\r\nexport class ScheduleDetailPageComponent implements OnInit {\r\n  constructor(\r\n    private router: Router,\r\n    private _route: ActivatedRoute,\r\n    private scheduleService: ScheduleService\r\n  ) {}\r\n  public scheduleDetail: ScheduleDetail;\r\n  public scheduleTime: string;\r\n  public scheduleTimeRepeat: string;\r\n  ngOnInit(): void {\r\n    let id = Number(this._route.snapshot.paramMap.get('id'));\r\n    this.scheduleService.getDetailSchedule(id).subscribe((data) => {\r\n      this.scheduleDetail = {\r\n        ...data,\r\n        created: formatDate(\r\n          new Date(data.created),\r\n          'EEEE, MMMM dd, yyyy, HH:mm a',\r\n          'en'\r\n        ),\r\n        modified: new Date(data.modified)\r\n          .toISOString()\r\n          .replace(/T/, ' ')\r\n          .replace(/\\..+/, ''),\r\n        dueDate: formatDate(\r\n          new Date(data.dueDate),\r\n          'EEEE, MMMM dd, yyyy, HH:mm a',\r\n          'en'\r\n        ),\r\n        startDate: formatDate(\r\n          new Date(data.startDate),\r\n          'EEEE, MMMM dd, yyyy, HH:mm a',\r\n          'en'\r\n        ),\r\n        scheduleId: data.scheduleId.toString(),\r\n        userNames: this.convertUserToString(JSON.parse(data.userNames)),\r\n        equipmentNames: this.convertEquipmentToString(\r\n          JSON.parse(data.equipmentNames)\r\n        ),\r\n      };\r\n      console.log(new Date(data.startDate).toLocaleDateString());\r\n      console.log(new Date(data.dueDate).toLocaleDateString());\r\n      if (\r\n        new Date(data.startDate).toLocaleDateString() ===\r\n        new Date(data.dueDate).toLocaleDateString()\r\n      ) {\r\n        this.scheduleTime =\r\n          this.scheduleDetail.startDate +\r\n          ' - ' +\r\n          formatDate(new Date(data.dueDate), 'HH:mm a', 'en');\r\n      } else {\r\n        this.scheduleTime =\r\n          this.scheduleDetail.startDate + ' - ' + this.scheduleDetail.dueDate;\r\n      }\r\n      if (data.type === 'weekly') {\r\n        this.scheduleTimeRepeat =\r\n          data.type + ' ' + selectWeekly[Number(data.valueRepeat)];\r\n      } else if (data.type === 'monthly') {\r\n        switch (Number(data.valueRepeat) % 10) {\r\n          case 1:\r\n            this.scheduleTimeRepeat = data.type + ' ' + data.valueRepeat + 'st';\r\n          case 2:\r\n            this.scheduleTimeRepeat = data.type + ' ' + data.valueRepeat + 'nd';\r\n          case 3:\r\n            this.scheduleTimeRepeat = data.type + ' ' + data.valueRepeat + 'rd';\r\n          default:\r\n            this.scheduleTimeRepeat = data.type + ' ' + data.valueRepeat + 'th';\r\n        }\r\n      } else {\r\n        this.scheduleTimeRepeat = 'everyday';\r\n      }\r\n      this.checkTypeSchedule(data.type);\r\n    });\r\n  }\r\n  public typeCheck: boolean = false;\r\n  checkTypeSchedule(value: string): void {\r\n    if (value === 'normal') this.typeCheck = true;\r\n  }\r\n  convertEquipmentToString(equipments: EquipmentNames[]): string {\r\n    if (equipments == null) return '';\r\n    return equipments.map((e) => e.equipmentName).join(', ') + '.';\r\n  }\r\n  convertUserToString(users: UserNames[]): string {\r\n    if (users == null) return '';\r\n    return users.map((e) => e.userName).join(', ') + '.';\r\n  }\r\n  btnClickEmt() {\r\n    this.router.navigate(['/schedule']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".detail {\r\n  margin: 30px 14%;\r\n}\r\n\r\n.header {\r\n  background-color: rgb(221, 235, 247);\r\n  padding-top: 1vw;\r\n  padding-bottom: 1vw;\r\n  padding-left: 20px;\r\n  font-size: 20px;\r\n\r\n}\r\n.header>div>a{\r\n  cursor: pointer;\r\n  color: rgb(0, 162, 255);\r\n  text-decoration: none;\r\n}\r\n.content {\r\n  margin: 0vw ;\r\n}\r\n@media only screen and (max-width: 1280px) {\r\n  .header {\r\n    font-size: 15px;\r\n  }\r\n}\r\n@media only screen and (max-width: 540px) {\r\n  .header {\r\n    font-size: 10px;\r\n    padding-left: 15px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./schedule-detail-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "scheduleService",
                        "type": "ScheduleService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scheduleService",
                        "type": "ScheduleService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"detail\">\r\n  <div class=\"header\">\r\n    <div>\r\n      <a (click)=\"btnClickEmt()\">Back to Schedule List</a>\r\n    </div>\r\n  </div>\r\n  <div class=\"content\">\r\n    <brc-schedule-detail\r\n      [typeCheck]=\"typeCheck\"\r\n      [scheduleDetail]=\"scheduleDetail\"\r\n      [scheduleTime]=\"scheduleTime\"\r\n      [scheduleTimeRepeat]=\"scheduleTimeRepeat\"\r\n      (btnClickEmt)=\"btnClickEmt()\"\r\n    ></brc-schedule-detail>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ScheduleFilterComponent",
            "id": "component-ScheduleFilterComponent-5615d7aa17bf4628fb238fa352172652",
            "file": "src/app/shared/components/schedule-filter/schedule-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-schedule-filter",
            "styleUrls": [
                "./schedule-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFilterSchedule",
                    "line": 43,
                    "type": "ButtonFilterSchedule<configButton>"
                },
                {
                    "name": "dataCategory",
                    "defaultValue": "[]",
                    "line": 46,
                    "type": "Category[]"
                },
                {
                    "name": "dataImportance",
                    "line": 47,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "labelScheduleFilter",
                    "line": 44,
                    "type": "LabelFilterSchedule<LabelInterface>"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "line": 45,
                    "type": "PlaceholderFilterSchedule"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "model",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectMultiple",
                    "type": "SelectMultipleComponent",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SelectMultipleComponent"
                        }
                    ]
                },
                {
                    "name": "selectOne",
                    "type": "SelectComponent",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SelectComponent"
                        }
                    ]
                },
                {
                    "name": "valueFilterSchedule",
                    "defaultValue": "{\r\n    valueSearch: '',\r\n    valueImportance: '',\r\n    valueCategory: [],\r\n    valueGetToDate: '',\r\n    valueGetToTimeNow: '',\r\n    valueGetToHour: '',\r\n    valueGetToMinute: '',\r\n    valueGetFromDate: '',\r\n    valueGetFromTimeNow: '',\r\n    valueGetFromHour: '',\r\n    valueGetFromMinute: '',\r\n  }",
                    "type": "ValueFilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125
                },
                {
                    "name": "getFromDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFromTimeNow",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToDate",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToHour",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getToMinute",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueImportance",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83
                },
                {
                    "name": "outputSelected",
                    "args": [
                        {
                            "name": "data",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "textSearch",
                    "args": [
                        {
                            "name": "data",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport {\r\n  ButtonFilterSchedule,\r\n  FilterSchedule,\r\n  LabelFilterSchedule,\r\n  PlaceholderFilterSchedule,\r\n  ValueFilterSchedule,\r\n} from '../../../store/models/schedule-filter.i';\r\nimport { SelectMultipleComponent } from '../select-multiple/select-multiple.component';\r\nimport { SelectComponent } from '../select/select.component';\r\n\r\n@Component({\r\n  selector: 'brc-schedule-filter',\r\n  templateUrl: './schedule-filter.component.html',\r\n  styleUrls: ['./schedule-filter.component.scss'],\r\n})\r\nexport class ScheduleFilterComponent {\r\n  public model: FilterSchedule;\r\n  public valueFilterSchedule: ValueFilterSchedule = {\r\n    valueSearch: '',\r\n    valueImportance: '',\r\n    valueCategory: [],\r\n    valueGetToDate: '',\r\n    valueGetToTimeNow: '',\r\n    valueGetToHour: '',\r\n    valueGetToMinute: '',\r\n    valueGetFromDate: '',\r\n    valueGetFromTimeNow: '',\r\n    valueGetFromHour: '',\r\n    valueGetFromMinute: '',\r\n  };\r\n  constructor() {}\r\n  @Input() buttonFilterSchedule: ButtonFilterSchedule<configButton>;\r\n  @Input() labelScheduleFilter: LabelFilterSchedule<LabelInterface>;\r\n  @Input() placeholderFilterSchedule: PlaceholderFilterSchedule;\r\n  @Input() dataCategory: Category[] = [];\r\n  @Input() dataImportance: LabelledValue<string>[];\r\n  @Output() valueFilter = new EventEmitter();\r\n  @ViewChild(SelectMultipleComponent) selectMultiple: SelectMultipleComponent;\r\n  @ViewChild(SelectComponent) selectOne: SelectComponent;\r\n\r\n  textSearch(data: string) {\r\n    this.valueFilterSchedule.valueSearch = data;\r\n  }\r\n  getValueImportance(data: string) {\r\n    this.valueFilterSchedule.valueImportance = data;\r\n  }\r\n  outputSelected(data: string[]) {\r\n    this.valueFilterSchedule.valueCategory = data;\r\n  }\r\n  getToDate(data: string) {\r\n    this.valueFilterSchedule.valueGetToDate = data;\r\n  }\r\n  getToHour(data: string) {\r\n    this.valueFilterSchedule.valueGetToHour = data;\r\n  }\r\n  getToMinute(data: string) {\r\n    this.valueFilterSchedule.valueGetToMinute = data;\r\n  }\r\n\r\n  getFromDate(data: string) {\r\n    this.valueFilterSchedule.valueGetFromDate = data;\r\n  }\r\n  getFromTimeNow(data: string) {\r\n    this.valueFilterSchedule.valueGetFromTimeNow = data;\r\n  }\r\n  getFromHour(data: string) {\r\n    this.valueFilterSchedule.valueGetFromHour = data;\r\n  }\r\n  getFromMinute(data: string) {\r\n    this.valueFilterSchedule.valueGetFromMinute = data;\r\n  }\r\n  onSubmit() {\r\n    let fromHour =\r\n      this.valueFilterSchedule.valueGetFromHour === ''\r\n        ? '00'\r\n        : this.valueFilterSchedule.valueGetFromHour;\r\n    let fromMinute =\r\n      this.valueFilterSchedule.valueGetFromMinute === ''\r\n        ? '00'\r\n        : this.valueFilterSchedule.valueGetFromMinute;\r\n    let toHour =\r\n      this.valueFilterSchedule.valueGetToHour === ''\r\n        ? '00'\r\n        : this.valueFilterSchedule.valueGetToHour;\r\n    let toMinute =\r\n      this.valueFilterSchedule.valueGetToMinute === ''\r\n        ? '00'\r\n        : this.valueFilterSchedule.valueGetToMinute;\r\n    this.model = {\r\n      textSearch: this.valueFilterSchedule.valueSearch,\r\n      importance: this.valueFilterSchedule.valueImportance,\r\n      category: this.valueFilterSchedule.valueCategory,\r\n      fromDateList:\r\n        this.valueFilterSchedule.valueGetFromDate === ''\r\n          ? ''\r\n          : this.valueFilterSchedule.valueGetFromDate +\r\n            'T' +\r\n            fromHour +\r\n            ':' +\r\n            fromMinute +\r\n            ':00.000Z',\r\n      toDateList:\r\n        this.valueFilterSchedule.valueGetToDate === ''\r\n          ? ''\r\n          : this.valueFilterSchedule.valueGetToDate +\r\n            'T' +\r\n            toHour +\r\n            ':' +\r\n            toMinute +\r\n            ':00.000Z',\r\n    };\r\n    this.valueFilter.emit(this.model);\r\n  }\r\n  clear() {\r\n    this.valueFilterSchedule.valueSearch = '';\r\n    this.valueFilterSchedule.valueImportance = '';\r\n    this.valueFilterSchedule.valueCategory = [];\r\n    this.valueFilterSchedule.valueGetFromDate = '';\r\n    this.valueFilterSchedule.valueGetToDate = '';\r\n    this.valueFilterSchedule.valueGetToHour = '';\r\n    this.valueFilterSchedule.valueGetFromHour = '';\r\n    this.selectMultiple.clear();\r\n    this.selectOne.clear();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".filter-label{\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n}\r\n.row-button{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n.row-button > brc-button{\r\n  text-align: center;\r\n  margin:0px 15px;\r\n}\r\n.date{\r\n  padding: 10x 0px;\r\n  margin : 10px 0px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 100%;\r\n}\r\n.date >brc-label{\r\n  width : 100% !important;\r\n}\r\n.date > brc-datetime-picker{\r\n  width: 99% !important;\r\n}\r\n.filter-container {\r\n  padding: 20px;\r\n  padding-top: 0;\r\n  max-width: 500px;\r\n  margin: auto;\r\n}\r\n",
                    "styleUrl": "./schedule-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 41
            },
            "templateData": "<div class=\"filter-container\">\r\n  <form class=\"width_100\">\r\n    <div\r\n      class=\"search\"\r\n      style=\"width: 99%; margin-bottom: 20px; padding-top: 20px;\"\r\n    >\r\n      <brc-search\r\n        [placeholder]=\"placeholderFilterSchedule.placeholderSearch\"\r\n        [searchText]=\"valueFilterSchedule.valueSearch\"\r\n        (textSearch)=\"textSearch($event)\"\r\n        style=\"width: 100%;\"\r\n      ></brc-search>\r\n    </div>\r\n    <!-- <div class=\"select\" style=\"width: 100%;\">\r\n      <div class=\"importance\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelImportance\"\r\n          class=\"filter-label\"\r\n        ></brc-label>\r\n        <brc-app-select\r\n          [data]=\"dataImportance\"\r\n          [label]=\"placeholderFilterSchedule.titleImportance\"\r\n          [default]=\"valueFilterSchedule.valueImportance\"\r\n          (getValue)=\"getValueImportance($event)\"\r\n        ></brc-app-select>\r\n      </div>\r\n      <div class=\"category\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelCategory\"\r\n          class=\"filter-label\"\r\n        ></brc-label>\r\n        <brc-select-multiple\r\n          [values]=\"dataCategory\"\r\n          [label]=\"placeholderFilterSchedule.titleCategory\"\r\n          (outputSelected)=\"outputSelected($event)\"\r\n          style=\"width: 100%;\"\r\n        >\r\n        </brc-select-multiple>\r\n      </div>\r\n    </div> -->\r\n    <div class=\"date-time\" style=\"width: 100%;\">\r\n      <div class=\"date\" style=\"width: 100%;\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelFromDate\"\r\n          class=\"filter-label\"\r\n          style=\"width: 100%; margin-bottom: 10px;\"\r\n        ></brc-label>\r\n        <brc-datetime-picker\r\n          (getDay)=\"getFromDate($event)\"\r\n          (getHour)=\"getFromHour($event)\"\r\n          (getMinute)=\"getFromMinute($event)\"\r\n        ></brc-datetime-picker>\r\n      </div>\r\n      <div class=\"date\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelToDate\"\r\n          class=\"filter-label\"\r\n          style=\"width: 100%; margin-bottom: 10px;\"\r\n        ></brc-label>\r\n        <brc-datetime-picker\r\n          (getDay)=\"getToDate($event)\"\r\n          (getHour)=\"getToHour($event)\"\r\n          (getMinute)=\"getToMinute($event)\"\r\n        ></brc-datetime-picker>\r\n      </div>\r\n      <div class=\"select\" style=\"width: 100%;\">\r\n      <div class=\"importance\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelImportance\"\r\n          class=\"filter-label\"\r\n        ></brc-label>\r\n        <brc-app-select\r\n          [data]=\"dataImportance\"\r\n          [label]=\"placeholderFilterSchedule.titleImportance\"\r\n          [default]=\"valueFilterSchedule.valueImportance\"\r\n          (getValue)=\"getValueImportance($event)\"\r\n        ></brc-app-select>\r\n      </div>\r\n      <div class=\"category\">\r\n        <brc-label\r\n          [label]=\"labelScheduleFilter.labelCategory\"\r\n          class=\"filter-label\"\r\n        ></brc-label>\r\n        <brc-select-multiple\r\n          [values]=\"dataCategory\"\r\n          [label]=\"placeholderFilterSchedule.titleCategory\"\r\n          (outputSelected)=\"outputSelected($event)\"\r\n          style=\"width: 100%;\"\r\n        >\r\n        </brc-select-multiple>\r\n      </div>\r\n    </div>\r\n    </div>\r\n    <br />\r\n    <div class=\"button\">\r\n      <div class=\"row-button\" style=\"width: 100%; margin: auto;\">\r\n        <brc-button\r\n          [configButton]=\"buttonFilterSchedule.buttonSubmit\"\r\n          (click)=\"onSubmit()\"\r\n        ></brc-button>\r\n        <brc-button\r\n          [configButton]=\"buttonFilterSchedule.buttonReset\"\r\n          (click)=\"clear()\"\r\n        ></brc-button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ScheduleListComponent",
            "id": "component-ScheduleListComponent-32b30f8a690e4be223f8183c88752092",
            "file": "src/app/shared/components/poll-list/poll-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-poll-list",
            "styleUrls": [
                "./poll-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./poll-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFilterSchedule",
                    "line": 20,
                    "type": "ButtonFilterSchedule<configButton>"
                },
                {
                    "name": "configPollList",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Poll List',\r\n    btnAdd: 'Add Poll',\r\n  }",
                    "line": 39,
                    "type": "ScheduleList"
                },
                {
                    "name": "labelScheduleFilter",
                    "line": 21,
                    "type": "LabelFilterSchedule<LabelInterface>"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  }",
                    "line": 22,
                    "type": "PlaceholderFilterSchedule"
                },
                {
                    "name": "pollColumns",
                    "defaultValue": "[]",
                    "line": 30,
                    "type": "Column[]"
                },
                {
                    "name": "pollDataSource",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "Object[]"
                },
                {
                    "name": "scheduleDataCategory",
                    "line": 27,
                    "type": "Category[]"
                },
                {
                    "name": "scheduleDataImportance",
                    "line": 28,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "schedulePageIndex",
                    "defaultValue": "0",
                    "line": 37,
                    "type": "number"
                },
                {
                    "name": "scheduleRecordsPerPage",
                    "defaultValue": "0",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "scheduleShowRowSelection",
                    "defaultValue": "false",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "scheduleTotalRecords",
                    "defaultValue": "0",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "votes",
                    "defaultValue": "[]",
                    "line": 32,
                    "type": "Object[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddPoll",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 54,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 52,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "pageOnPageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 57,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowDelete",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowDetail",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 55,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handlerClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "onPageEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowDeleteEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowDetailEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { ButtonFilterSchedule, FilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from '../../../store/models/schedule-filter.i';\r\nimport { ScheduleList } from '../../../store/models/scheduleList.i';\r\n\r\n@Component({\r\n  selector: 'brc-poll-list',\r\n  templateUrl: './poll-list.component.html',\r\n  styleUrls: ['./poll-list.component.scss'],\r\n})\r\nexport class ScheduleListComponent implements OnInit {\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n\r\n  //Input filter\r\n  @Input() buttonFilterSchedule: ButtonFilterSchedule<configButton>;\r\n  @Input() labelScheduleFilter: LabelFilterSchedule<LabelInterface>;\r\n  @Input() placeholderFilterSchedule: PlaceholderFilterSchedule = {\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  };\r\n  @Input() scheduleDataCategory: Category[];\r\n  @Input() scheduleDataImportance: LabelledValue<string>[];\r\n  //Input table\r\n  @Input() pollColumns: Column[] = [];\r\n  @Input() pollDataSource: Object[] = [];\r\n  @Input() votes: Object[] = [];\r\n  @Input() scheduleShowRowSelection: boolean = false;\r\n  //Input pagination\r\n  @Input() scheduleTotalRecords: number = 0;\r\n  @Input() scheduleRecordsPerPage: number = 0;\r\n  @Input() schedulePageIndex: number = 0;\r\n  //Input todolist\r\n  @Input() configPollList: ScheduleList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Poll List',\r\n    btnAdd: 'Add Poll',\r\n  };\r\n\r\n  //Output filter\r\n  @Output() valueFilter = new EventEmitter();\r\n  //Output table\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  //Output pagination\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n  //Out put schedulelist\r\n  @Output() btnAddPoll: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() rowDetail= new EventEmitter<Object>();\r\n  @Output() rowDelete= new EventEmitter<Object>();\r\n  @Output() pageOnPageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  scheduleValueFilter(data: FilterSchedule) {\r\n    this.valueFilter.emit(data);\r\n  }\r\n  handlerClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n  handlerSort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n  handlerSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n  onClickBtnAdd() {\r\n    this.btnAddPoll.emit();\r\n  }\r\n  onPageEvent(data: number) {\r\n    this.pageOnPageChange.emit(data);\r\n  }\r\n  rowDetailEvent(data: Object) {\r\n    this.rowDetail.emit(data);\r\n  }\r\n  rowDeleteEvent(data: Object) {\r\n    this.rowDelete.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pagination-list {\r\n    margin-left: 30% !important;\r\n    margin-top: 20px;\r\n}",
                    "styleUrl": "./poll-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n    <div class=\"col-sm-2\"></div>\r\n    <div class=\"col-sm-8\">\r\n      <div style=\"padding: 20px 10px 10px 10px;\">\r\n        <div>\r\n          <div style=\"text-align: center; font-weight: 600;\">\r\n            <h1>\r\n              <b>{{ configPollList.title }}</b>\r\n            </h1>\r\n          </div>\r\n          <div style=\"margin-bottom: 20px; display: flex; justify-content: flex-start;\">\r\n            <button mat-raised-button color=\"primary\" (click)=\"onClickBtnAdd()\">\r\n              <mat-icon>add</mat-icon>{{ configPollList.btnAdd }}\r\n            </button>\r\n            <input placeholder=\"Search\" style=\"margin-left: auto;\">\r\n          </div>\r\n          <div style=\"margin: auto; display: block; min-width: 100%; overflow-x: auto;\">\r\n            <brc-table \r\n              [columns]=\"pollColumns\"\r\n              [dataSource]=\"pollDataSource\"\r\n              [votes]=\"votes\"\r\n              (rowDetail)=\"rowDetailEvent($event)\"\r\n              (rowDelete)=\"rowDeleteEvent($event)\">\r\n            </brc-table>\r\n          </div>\r\n          <div class=\"pagination-list\" *ngIf=\"pollDataSource.length > 0\">\r\n            <brc-mat-paginator [total]=\"scheduleTotalRecords\" [pageSize]=\"scheduleRecordsPerPage\"\r\n              [pageIndex]=\"schedulePageIndex\" (onPageChange)=\"onPageEvent($event)\"></brc-mat-paginator>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"col-sm-2\"></div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ScheduleListComponent",
            "id": "component-ScheduleListComponent-6792993e326fe8181eb74d70300dc5c3-1",
            "file": "src/app/shared/components/schedule-list/schedule-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-schedule-list",
            "styleUrls": [
                "./schedule-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonFilterSchedule",
                    "line": 20,
                    "type": "ButtonFilterSchedule<configButton>"
                },
                {
                    "name": "configScheduleList",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add Schedule',\r\n  }",
                    "line": 38,
                    "type": "ScheduleList"
                },
                {
                    "name": "labelScheduleFilter",
                    "line": 21,
                    "type": "LabelFilterSchedule<LabelInterface>"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  }",
                    "line": 22,
                    "type": "PlaceholderFilterSchedule"
                },
                {
                    "name": "scheduleColumns",
                    "defaultValue": "[]",
                    "line": 30,
                    "type": "Column[]"
                },
                {
                    "name": "scheduleDataCategory",
                    "line": 27,
                    "type": "Category[]"
                },
                {
                    "name": "scheduleDataImportance",
                    "line": 28,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "scheduleDataSource",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "Object[]"
                },
                {
                    "name": "schedulePageIndex",
                    "defaultValue": "0",
                    "line": 36,
                    "type": "number"
                },
                {
                    "name": "scheduleRecordsPerPage",
                    "defaultValue": "0",
                    "line": 35,
                    "type": "number"
                },
                {
                    "name": "scheduleShowRowSelection",
                    "defaultValue": "false",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "scheduleTotalRecords",
                    "defaultValue": "0",
                    "line": 34,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddSchedule",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 53,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 51,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "pageOnPageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 54,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handlerClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "onPageEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { ButtonFilterSchedule, FilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from '../../../store/models/schedule-filter.i';\r\nimport { ScheduleList } from '../../../store/models/scheduleList.i';\r\n\r\n@Component({\r\n  selector: 'brc-schedule-list',\r\n  templateUrl: './schedule-list.component.html',\r\n  styleUrls: ['./schedule-list.component.scss'],\r\n})\r\nexport class ScheduleListComponent implements OnInit {\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n\r\n  //Input filter\r\n  @Input() buttonFilterSchedule: ButtonFilterSchedule<configButton>;\r\n  @Input() labelScheduleFilter: LabelFilterSchedule<LabelInterface>;\r\n  @Input() placeholderFilterSchedule: PlaceholderFilterSchedule = {\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  };\r\n  @Input() scheduleDataCategory: Category[];\r\n  @Input() scheduleDataImportance: LabelledValue<string>[];\r\n  //Input table\r\n  @Input() scheduleColumns: Column[] = [];\r\n  @Input() scheduleDataSource: Object[] = [];\r\n  @Input() scheduleShowRowSelection: boolean = false;\r\n  //Input pagination\r\n  @Input() scheduleTotalRecords: number = 0;\r\n  @Input() scheduleRecordsPerPage: number = 0;\r\n  @Input() schedulePageIndex: number = 0;\r\n  //Input todolist\r\n  @Input() configScheduleList: ScheduleList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add Schedule',\r\n  };\r\n\r\n  //Output filter\r\n  @Output() valueFilter = new EventEmitter();\r\n  //Output table\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  //Output pagination\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n  //Out put schedulelist\r\n  @Output() btnAddSchedule: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() pageOnPageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  scheduleValueFilter(data: FilterSchedule) {\r\n    this.valueFilter.emit(data);\r\n  }\r\n  handlerClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n  handlerSort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n  handlerSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n  onClickBtnAdd() {\r\n    this.btnAddSchedule.emit();\r\n  }\r\n  onPageEvent(data: number) {\r\n    this.pageOnPageChange.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pagination-list {\r\n    margin-left: 30% !important;\r\n    margin-top: 20px;\r\n}\r\n\r\n.container {\r\n    align-items: unset !important;\r\n}\r\n",
                    "styleUrl": "./schedule-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ScheduleListComponent-1",
            "templateData": "<div\r\n  class=\"container\"\r\n  style=\"padding: 5px 10px 10px 10px;\"\r\n  fxLayoutGap=\"10px\"\r\n  fxLayoutGap.xs=\"0\"\r\n  fxLayout.gt-sm =\"row \"\r\n  fxLayout.lt-md = \"column\"\r\n>\r\n  <div\r\n    fxFlex=\"20\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"30\"\r\n    fxFlex.gt-lg=\"20\"\r\n    style=\"\r\n      border: 1px solid #f0f0f0;\r\n      height: 100%;\r\n    \"\r\n  > \r\n  <div style=\"padding: 3px 29px 0 13px;\">\r\n    <brc-schedule-filter\r\n      style=\"font-size: small\"\r\n      [buttonFilterSchedule]=\"buttonFilterSchedule\"\r\n      [labelScheduleFilter]=\"labelScheduleFilter\"\r\n      [placeholderFilterSchedule]=\"placeholderFilterSchedule\"\r\n      [dataCategory]=\"scheduleDataCategory\"\r\n      [dataImportance]=\"scheduleDataImportance\"\r\n      (valueFilter)=\"scheduleValueFilter($event)\"\r\n    ></brc-schedule-filter>\r\n  </div>\r\n  </div>\r\n\r\n  <div\r\n    fxFlex=\"80\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"70\"\r\n    fxFlex.gt-lg=\"80\"\r\n  >\r\n    <div style=\"text-align: left; font-weight: 600;\">\r\n      <h1>\r\n        <b>{{ configScheduleList.title }}</b>\r\n      </h1>\r\n    </div>\r\n    <div style=\"margin: auto; display: flex; justify-content: flex-end;\">\r\n      <button mat-raised-button color=\"primary\"  data-test=\"submit-action\" (click)=\"onClickBtnAdd()\">\r\n        <mat-icon>add</mat-icon>{{ configScheduleList.btnAdd }}\r\n      </button>\r\n    </div>\r\n    <div style=\"margin: auto; display: block; min-width: 100%; overflow-x: auto;\">\r\n      <brc-table\r\n        [columns]=\"scheduleColumns\"\r\n        [dataSource]=\"scheduleDataSource\"\r\n        [showRowSelection]=\"scheduleShowRowSelection\"\r\n        (rowClicked)=\"handlerClickRow($event)\"\r\n        (rowsSelected)=\"handlerSelectRow($event)\"\r\n        (sort)=\"handlerSort($event)\"\r\n      >\r\n      </brc-table>\r\n    </div>\r\n    <div class=\"pagination-list\" *ngIf=\"scheduleDataSource.length > 0\">\r\n      <brc-mat-paginator\r\n        [total]=\"scheduleTotalRecords\"\r\n        [pageSize]=\"scheduleRecordsPerPage\"\r\n        [pageIndex]=\"schedulePageIndex\"\r\n        (onPageChange)=\"onPageEvent($event)\"\r\n      ></brc-mat-paginator>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ScheduleListPageComponent",
            "id": "component-ScheduleListPageComponent-cf0ef243214901c1d2a37c0c1bcc11f4",
            "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-schedule-list-page",
            "styleUrls": [
                "./schedule-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonFilterSchedule",
                    "defaultValue": "configButtonFilterSchedule",
                    "type": "ButtonFilterSchedule<configButton>",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "configScheduleList",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add Schedule',\r\n  }",
                    "type": "ScheduleList",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "filter",
                    "defaultValue": "this.storeFacade.filter",
                    "type": "FilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "labelScheduleFilter",
                    "defaultValue": "configLabelScheduleFilter",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "placeholderFilterSchedule",
                    "defaultValue": "configPlaceholderFilterSchedule",
                    "type": "PlaceholderFilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "scheduleColumns",
                    "defaultValue": "columns",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleDataCategory",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "scheduleDataImportance",
                    "defaultValue": "dataImportance",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "scheduleDataSource",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "schedulePageIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleRecordsPerPage",
                    "defaultValue": "5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleShowRowSelection",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "scheduleTotalRecords",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "btnClickEmt",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertDataSchedule",
                    "args": [
                        {
                            "name": "schedule",
                            "type": "Schedule[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Schedule[]",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "schedule",
                            "type": "Schedule[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertUserToString",
                    "args": [
                        {
                            "name": "users",
                            "type": "UserNames[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "users",
                            "type": "UserNames[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "scheduleAdd",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleClick",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterSchedule"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterSchedule",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleSelect",
                    "args": [
                        {
                            "name": "data",
                            "type": "ScheduleFilter"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ScheduleFilter",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleSort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "schedule",
                            "type": "ScheduleState"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "schedule",
                            "type": "ScheduleState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ScheduleFilter } from '../../store/actions/schedule.action';\r\nimport { configButton } from '../../store/models/button.i';\r\nimport { Category } from '../../store/models/category.i';\r\nimport { Column, SortItem } from '../../store/models/column.i';\r\nimport { LabelInterface } from '../../store/models/label.i';\r\nimport { LabelledValue } from '../../store/models/labelvalue.i';\r\nimport {\r\n  ButtonFilterSchedule,\r\n  LabelFilterSchedule,\r\n  PlaceholderFilterSchedule,\r\n} from '../../store/models/schedule-filter.i';\r\nimport {\r\n  FilterSchedule,\r\n  Schedule,\r\n} from '../../store/models/schedule.i';\r\nimport { ScheduleList } from '../../store/models/scheduleList.i';\r\nimport { ScheduleState } from '../../store/reducers/schedule.reducer';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\nimport { UserNames } from '../../store/models/schedule.i';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'brc-schedule-list-page',\r\n  templateUrl: './schedule-list-page.component.html',\r\n  styleUrls: ['./schedule-list-page.component.scss'],\r\n})\r\nexport class ScheduleListPageComponent implements OnInit {\r\n  private filter: FilterSchedule = this.storeFacade.filter;\r\n  public scheduleTotalRecords: number = 100;\r\n  public scheduleRecordsPerPage: number = 5;\r\n  public schedulePageIndex: number = 0;\r\n  public scheduleShowRowSelection: boolean = false;\r\n  public scheduleColumns: Column[] = columns;\r\n  public scheduleDataSource = [];\r\n  buttonFilterSchedule: ButtonFilterSchedule<\r\n    configButton\r\n  > = configButtonFilterSchedule;\r\n  labelScheduleFilter: LabelFilterSchedule<\r\n    LabelInterface\r\n  > = configLabelScheduleFilter;\r\n  placeholderFilterSchedule: PlaceholderFilterSchedule = configPlaceholderFilterSchedule;\r\n  scheduleDataCategory: Category[];\r\n  scheduleDataImportance: LabelledValue<string>[] = dataImportance;\r\n  configScheduleList: ScheduleList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Schedule List',\r\n    btnAdd: 'Add Schedule',\r\n  };\r\n  constructor(private storeFacade: StoreFacade, private _router: Router) {}\r\n  ngOnInit(): void {\r\n    this.storeFacade.getValuePaginationAndFilter();\r\n  //  this.storeFacade.getCategorySchedule();\r\n    this.storeFacade.dispatchCategory();\r\n    //thực hiện action filter schedule để gán giá trị vào store\r\n    this.storeFacade.filterSchedule(\r\n      this.storeFacade.pagination,\r\n      this.storeFacade.filter\r\n    );\r\n    this.storeFacade.getValueScheduleTablePage().subscribe((schedule) => {\r\n      this.updateData(schedule);\r\n    });\r\n  }\r\n  updateData(schedule: ScheduleState) {\r\n    let categories: Category[] = [];\r\n    schedule.categories?.forEach((schedule) => {\r\n      categories.push({\r\n        categoryName: schedule.name,\r\n        categoryId: schedule.scheduleCategoryId,\r\n      });\r\n    });\r\n    this.scheduleDataCategory = categories;\r\n    this.scheduleDataSource = this.convertDataSchedule(schedule.listSchedule);\r\n    this.scheduleTotalRecords = schedule.pagination.total;\r\n    this.scheduleRecordsPerPage = schedule.pagination.pageSize;\r\n    this.schedulePageIndex = schedule.pagination.page - 1;\r\n  }\r\n\r\n  convertDataSchedule(schedule: Schedule[]): Schedule[] {\r\n    var dataFake = [];\r\n    schedule.forEach((item) => {\r\n      let data = {\r\n        scheduleId: item.scheduleId,\r\n        title: item.title,\r\n        description: item.description,\r\n        place: item.place,\r\n        importance: item.importance,\r\n        typeRepeat: item.typeRepeat,\r\n        time: `${formatDate(\r\n          new Date(item.timeStart),\r\n          'yyyy-MM-dd HH:mm ',\r\n          'en'\r\n        )} - ${formatDate(new Date(item.dueTime), 'yyyy-MM-dd HH:mm ', 'en')}`,\r\n        dueTime: item.dueTime,\r\n        scheduleCategoryId: item.scheduleCategoryId,\r\n        scheduleCategoryName: item.scheduleCategoryName,\r\n        timeStart: item.timeStart,\r\n        userName: item.userName,\r\n        users: this.convertUserToString(JSON.parse(item.users)),\r\n      };\r\n      dataFake.push(data);\r\n    });\r\n    return dataFake;\r\n  }\r\n\r\n  convertUserToString(users: UserNames[]): string {\r\n    if (users == null) return '';\r\n    return users.map((e) => e.userName).join(', ') + '.';\r\n  }\r\n\r\n  scheduleFilter(data: FilterSchedule) {\r\n    this.filter = data;\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = 1;\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n\r\n  scheduleClick(data: Object) {\r\n    this._router.navigateByUrl(`schedule/detail/${data['scheduleId']}`);\r\n  }\r\n\r\n  scheduleSelect(data: ScheduleFilter) {\r\n    console.log(data);\r\n  }\r\n\r\n  scheduleSort(data: SortItem[]) {\r\n    this.filter = {\r\n      textSearch: this.filter.textSearch,\r\n      category: this.filter.category,\r\n      importance: this.filter.importance,\r\n      fromDateList: this.filter.fromDateList,\r\n      toDateList: this.filter.toDateList,\r\n      sort: data,\r\n    };\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n\r\n  scheduleAdd(data) {\r\n    this._router.navigateByUrl('schedule/add');\r\n  }\r\n\r\n  changePage(data) {\r\n    let pagination = Object.assign({}, this.storeFacade.pagination);\r\n    pagination.page = Number(data.pageIndex) + 1;\r\n    this.storeFacade.filterSchedule(pagination, this.filter);\r\n  }\r\n  btnClickEmt(){\r\n    this._router.navigate(['/schedule']);\r\n  }\r\n}\r\n// mock data\r\nconst columns: Column[] = [\r\n  {\r\n    title: 'Title Schedule',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'scheduleCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Place',\r\n    dataIndex: 'place',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Type Repeat',\r\n    dataIndex: 'typeRepeat',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Users',\r\n    dataIndex: 'users',\r\n  },\r\n];\r\n\r\n//filter\r\nconst configPlaceholderFilterSchedule: PlaceholderFilterSchedule = {\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n};\r\n\r\nconst configLabelScheduleFilter: LabelFilterSchedule<LabelInterface> = {\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n};\r\n\r\nconst configButtonFilterSchedule: ButtonFilterSchedule<configButton> = {\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n};\r\n\r\nconst dataImportance: LabelledValue<string>[] = [\r\n  {\r\n    label: 'High',\r\n    value: 'High',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n];\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./schedule-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div style=\"padding: 10px 0 0 20px;\">\r\n    <a style=\"text-decoration: none; margin: 10px; font-size: medium; color: blue;\" (click)=\"btnClickEmt()\">Back to Calendar</a>\r\n</div>\r\n<brc-schedule-list\r\n    [buttonFilterSchedule]=\"buttonFilterSchedule\"\r\n    [labelScheduleFilter]=\"labelScheduleFilter\"\r\n    [placeholderFilterSchedule]=\"placeholderFilterSchedule\"\r\n    [scheduleDataCategory]=\"scheduleDataCategory\"\r\n    [scheduleDataImportance]=\"scheduleDataImportance\"\r\n    [scheduleColumns]=\"scheduleColumns\"\r\n    [scheduleDataSource]=\"scheduleDataSource\"\r\n    [scheduleShowRowSelection]=\"scheduleShowRowSelection\"\r\n    [scheduleTotalRecords]=\"scheduleTotalRecords\"\r\n    [scheduleRecordsPerPage]=\"scheduleRecordsPerPage\"\r\n    [schedulePageIndex]=\"schedulePageIndex\"\r\n    [configScheduleList]=\"configScheduleList\"\r\n    (valueFilter)=\"scheduleFilter($event)\"\r\n    (rowClicked)=\"scheduleClick($event)\"\r\n    (rowsSelected)=\"scheduleSelect($event)\"\r\n    (sort)=\"scheduleSort($event)\"\r\n    (btnAddSchedule)=\"scheduleAdd($event)\"\r\n    (pageOnPageChange)=\"changePage($event)\"\r\n>\r\n</brc-schedule-list>\r\n"
        },
        {
            "name": "SchedulePageComponent",
            "id": "component-SchedulePageComponent-d5354b9ea47efc566eb0f92388b07730",
            "file": "src/app/modules/schedule-page/schedule-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-page",
            "styleUrls": [
                "./schedule-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actions",
                    "defaultValue": "[\r\n    {\r\n      label: '<i class=\"material-icons\">event_note</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.router.navigate(['/schedule/detail', event.id]);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons s-10\">edit</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.router.navigate(['/schedule/edit', event.id]);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons\">delete</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.storeFacade.delSchedule(event.meta);\r\n        this.bottomSheet.dismiss();\r\n      },\r\n    },\r\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "afterTomorrow",
                    "defaultValue": "new Date(this.today).setDate(\r\n    new Date(this.today).getDate() + 2\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "buttonFilterSchedule",
                    "defaultValue": "buttonFilterSchedule",
                    "type": "ButtonFilterSchedule<configButton>",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "caledarComp",
                    "type": "CalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CalendarComponent"
                        }
                    ]
                },
                {
                    "name": "calendar",
                    "type": "MatCalendar<Date>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendar', {static: true}"
                        }
                    ]
                },
                {
                    "name": "calendarView",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "categoryEvent",
                    "type": "Observable<CategorySchedule[]>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "checkBox",
                    "type": "QueryList<any>",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'checkBox'"
                        }
                    ]
                },
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "checkedArr",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "events",
                    "type": "Observable<CalendarEvent[]>",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "eventsAfterTomorrow",
                    "type": "Observable<CalendarEvent[]>",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "eventsToday",
                    "type": "Observable<CalendarEvent[]>",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "eventsTomorrow",
                    "type": "Observable<CalendarEvent[]>",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "labelScheduleFilter",
                    "defaultValue": "labelScheduleFilter",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "nameAfterTomorrow",
                    "defaultValue": "format(this.afterTomorrow, 'iiii')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "placeholderFilterSchedule",
                    "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  }",
                    "type": "PlaceholderFilterSchedule",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "scheduleDataCategory",
                    "defaultValue": "fakeData",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "scheduleDataImportance",
                    "defaultValue": "dataImportance",
                    "type": "LabelledValue<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "scrollbarRef",
                    "type": "NgScrollbar",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "NgScrollbar, {static: true}"
                        }
                    ]
                },
                {
                    "name": "selectedDate",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "today",
                    "defaultValue": "Date.now()",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "tomorrow",
                    "defaultValue": "new Date(this.today).setDate(new Date(this.today).getDate() + 1)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "visibilityScroll",
                    "defaultValue": "'always'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "visibilityScrollNavBar",
                    "defaultValue": "'hover'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "convertDataScheduleToEvent",
                    "args": [
                        {
                            "name": "schedule",
                            "type": "Schedule"
                        },
                        {
                            "name": "category",
                            "type": "CategorySchedule[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarEvent",
                    "typeParameters": [],
                    "line": 209,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "schedule",
                            "type": "Schedule",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "category",
                            "type": "CategorySchedule[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "currentPeriodClicked",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "category",
                            "type": "CategorySchedule[]"
                        },
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "EventColor",
                    "typeParameters": [],
                    "line": 202,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "CategorySchedule[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEventToday",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108
                },
                {
                    "name": "onClickCheckBox",
                    "args": [
                        {
                            "name": "checkbox",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "jsdoctags": [
                        {
                            "name": "checkbox",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDayClick",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMonthChange",
                    "args": [
                        {
                            "name": "date",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "dayClick",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "dayClick",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColorCheckbox",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ 'border-style': string; 'border-color': any; }",
                    "typeParameters": [],
                    "line": 244,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Router } from '@angular/router';\r\nimport { EventColor } from 'calendar-utils';\r\nimport { CalendarComponent } from './../../shared/components/calendar/calendar.component';\r\nimport {\r\n  Schedule,\r\n  FilterSchedule,\r\n  CategorySchedule,\r\n} from './../../store/models/schedule.i';\r\nimport { map, catchError, filter, mergeMap } from 'rxjs/operators';\r\nimport { CalendarEvent, CalendarEventAction } from 'angular-calendar';\r\nimport { StoreFacade } from '../../store/store-facades/schedule.store-facade';\r\nimport { of, Observable, throwError, zip, combineLatest } from 'rxjs';\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  ViewChildren,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { MatCalendar } from '@angular/material/datepicker';\r\nimport {\r\n  endOfMonth,\r\n  startOfMonth,\r\n  endOfWeek,\r\n  startOfWeek,\r\n  format,\r\n} from 'date-fns';\r\nimport { MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { NgScrollbar } from 'ngx-scrollbar';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { ButtonFilterSchedule, LabelFilterSchedule, PlaceholderFilterSchedule } from 'src/app/store/models/schedule-filter.i';\r\nimport { configButton } from 'src/app/store/models/button.i';\r\nimport { LabelInterface } from 'src/app/store/models/label.i';\r\nimport { Category } from 'src/app/store/models/category.i';\r\nimport { LabelledValue } from 'src/app/store/models/labelvalue.i';\r\n\r\n@Component({\r\n  selector: 'app-schedule-page',\r\n  templateUrl: './schedule-page.component.html',\r\n  styleUrls: ['./schedule-page.component.scss'],\r\n})\r\nexport class SchedulePageComponent implements OnInit {\r\n  constructor(\r\n    private storeFacade: StoreFacade,\r\n    private router: Router,\r\n    private bottomSheet: MatBottomSheet\r\n  ) {\r\n    this.selectedDate = { date: new Date() };\r\n    this.calendarView = 'month';\r\n  }\r\n  @ViewChild('calendar', { static: true }) calendar: MatCalendar<Date>;\r\n  @ViewChild(CalendarComponent) caledarComp: CalendarComponent;\r\n  @ViewChild(NgScrollbar, { static: true }) scrollbarRef: NgScrollbar;\r\n  @ViewChildren('checkBox') checkBox: QueryList<any>;\r\n  visibilityScroll = 'always';\r\n  visibilityScrollNavBar = 'hover';\r\n  calendarView: string;\r\n  events: Observable<CalendarEvent[]>;\r\n  eventsToday: Observable<CalendarEvent[]>;\r\n  eventsTomorrow: Observable<CalendarEvent[]>;\r\n  eventsAfterTomorrow: Observable<CalendarEvent[]>;\r\n  categoryEvent: Observable<CategorySchedule[]>;\r\n  checked: boolean;\r\n  actions = [\r\n    {\r\n      label: '<i class=\"material-icons\">event_note</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.router.navigate(['/schedule/detail', event.id]);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons s-10\">edit</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.router.navigate(['/schedule/edit', event.id]);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons\">delete</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        this.storeFacade.delSchedule(event.meta);\r\n        this.bottomSheet.dismiss();\r\n      },\r\n    },\r\n  ];\r\n  selectedDate: any;\r\n  today: number = Date.now();\r\n  tomorrow = new Date(this.today).setDate(new Date(this.today).getDate() + 1);\r\n  afterTomorrow = new Date(this.today).setDate(\r\n    new Date(this.today).getDate() + 2\r\n  );\r\n  nameAfterTomorrow = format(this.afterTomorrow, 'iiii');\r\n  checkedArr = [];\r\n  onSelect(dayClick) {\r\n    this.selectedDate = { date: dayClick };\r\n    this.caledarComp.view = 'week';\r\n    this.caledarComp.viewDate = dayClick;\r\n  }\r\n  buttonFilterSchedule: ButtonFilterSchedule<configButton> = buttonFilterSchedule;\r\n  labelScheduleFilter: LabelFilterSchedule<LabelInterface> = labelScheduleFilter;\r\n  placeholderFilterSchedule: PlaceholderFilterSchedule = {\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'Importance',\r\n    titleCategory: 'Category',\r\n  };\r\n  scheduleDataCategory: Category[] = fakeData;\r\n  scheduleDataImportance: LabelledValue<string>[] = dataImportance;\r\n  ngOnInit(): void {\r\n    // Init data for schedule\r\n    const today = new Date();\r\n    const filter: FilterSchedule = {\r\n      from: startOfWeek(startOfMonth(today)).toISOString(),\r\n      to: endOfWeek(endOfMonth(today)).toISOString(),\r\n    };\r\n    this.storeFacade.dispatchSchedule(filter);\r\n    this.storeFacade.getSchedules();\r\n    this.storeFacade.getFilter();\r\n    this.storeFacade.getEventsInSiderBar();\r\n    this.storeFacade.getCategorySchedule();\r\n    this.categoryEvent = this.storeFacade.categories$;\r\n\r\n    // end Init\r\n    this.events = combineLatest([\r\n      this.storeFacade.schedules$,\r\n      this.storeFacade.categories$,\r\n    ]).pipe(\r\n      map(([schedule, category]) => {\r\n        return schedule.map((rs) => {\r\n          return this.convertDataScheduleToEvent(rs, category);\r\n        });\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n    this.eventsToday = combineLatest([\r\n      this.storeFacade.eventsToday$,\r\n      this.storeFacade.categories$,\r\n    ]).pipe(\r\n      map(([schedule, category]) => {\r\n        return schedule.map((rs) => {\r\n          return this.convertDataScheduleToEvent(rs, category);\r\n        });\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n    this.eventsTomorrow = combineLatest([\r\n      this.storeFacade.eventsTomorrow$,\r\n      this.storeFacade.categories$,\r\n    ]).pipe(\r\n      map(([schedule, category]) => {\r\n        return schedule.map((rs) => {\r\n          return this.convertDataScheduleToEvent(rs, category);\r\n        });\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n    this.eventsAfterTomorrow = combineLatest([\r\n      this.storeFacade.eventsAfterTomorrow$,\r\n      this.storeFacade.categories$,\r\n    ]).pipe(\r\n      map(([schedule, category]) => {\r\n        return schedule.map((rs) => {\r\n          return this.convertDataScheduleToEvent(rs, category);\r\n        });\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n    this.checked = true;\r\n  }\r\n  getEventToday() {}\r\n\r\n  onMonthChange(date) {\r\n    this.selectedDate = { date };\r\n    this.calendar._goToDateInView(date, 'month');\r\n    this.storeFacade.getFilter();\r\n    const filter: FilterSchedule = {\r\n      ...this.storeFacade.filter,\r\n      from: startOfWeek(startOfMonth(date)).toISOString(),\r\n      to: endOfWeek(endOfMonth(date)).toISOString(),\r\n    };\r\n    this.storeFacade.dispatchScheduleOnMonthChange(filter);\r\n  }\r\n  onDayClick(date) {\r\n    this.selectedDate = { date };\r\n    this.calendar._goToDateInView(date, 'month');\r\n  }\r\n  currentPeriodClicked(date) {\r\n    console.log(date);\r\n  }\r\n\r\n  private getColor(category: CategorySchedule[], id: number): EventColor {\r\n    let data: CategorySchedule;\r\n    if (category.length > 0) {\r\n      data = category.filter((x) => x.scheduleCategoryId === id)[0];\r\n    }\r\n    return data?.colors;\r\n  }\r\n  private convertDataScheduleToEvent(\r\n    schedule: Schedule,\r\n    category: CategorySchedule[]\r\n  ): CalendarEvent {\r\n    let calendarEvent: CalendarEvent;\r\n    if (schedule !== null && schedule.scheduleId !== null) {\r\n      calendarEvent = {\r\n        id: schedule.scheduleId,\r\n        title: schedule.title,\r\n        start: new Date(schedule.timeStart),\r\n        end: new Date(schedule.dueTime),\r\n        allDay: schedule.allDay,\r\n        color: this.getColor(category, schedule.scheduleCategoryId),\r\n        meta: Object.assign(\r\n          {},\r\n          {\r\n            users: JSON.parse(schedule.users),\r\n            scheduleCategoryName: schedule.scheduleCategoryName,\r\n            scheduleCategoryId: schedule.scheduleCategoryId,\r\n            userName: schedule.userName,\r\n            createdBy: schedule.createdBy,\r\n            scheduleId: schedule.scheduleId,\r\n            title: schedule.title,\r\n            timeStart: schedule.timeStart,\r\n            dueTime: schedule.dueTime,\r\n            allDay: schedule.allDay,\r\n            description: schedule.description,\r\n            status: schedule.status,\r\n          }\r\n        ),\r\n        actions: this.actions,\r\n      };\r\n    }\r\n    return calendarEvent;\r\n  }\r\n  setColorCheckbox(value) {\r\n    return {\r\n      'border-style': 'solid',\r\n      'border-color': value.colors?.primary,\r\n    };\r\n  }\r\n  onClickCheckBox(checkbox) {\r\n    this.checkedArr = [];\r\n    let ids: number[] = [];\r\n    // tslint:disable-next-line: no-shadowed-variable\r\n    const checked = this.checkBox.filter((checkbox) => checkbox.checked);\r\n    checked.forEach((data) => {\r\n      this.checkedArr.push({\r\n        checked: data.checked,\r\n        value: data.value,\r\n      });\r\n      ids.push(data.value?.scheduleCategoryId);\r\n    });\r\n    this.storeFacade.dispatchFilterByCategory(ids);\r\n    this.events = combineLatest([\r\n      this.storeFacade.getDataFilterByCategory$(),\r\n      this.storeFacade.categories$,\r\n    ]).pipe(\r\n      map(([schedule, category]) => {\r\n        return schedule.map((rs) => {\r\n          return this.convertDataScheduleToEvent(rs, category);\r\n        });\r\n      }),\r\n      catchError((err) => {\r\n        console.log(err);\r\n        return throwError(err);\r\n      })\r\n    );\r\n  }\r\n  scheduleValueFilter(data){\r\n    this.storeFacade.filter= data;\r\n    this.router.navigateByUrl(`/schedule/scheduleList`);\r\n  }\r\n}\r\nconst dataImportance: LabelledValue<string>[] = [\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n];\r\nconst fakeData: Category[] = [\r\n  { categoryName: 'Meeting', categoryId: 1 },\r\n  { categoryName: 'Event', categoryId: 2 },\r\n];\r\nconst labelScheduleFilter: LabelFilterSchedule<LabelInterface> = {\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n};\r\nconst buttonFilterSchedule: ButtonFilterSchedule<configButton> = {\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n};\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  overflow-y: scroll;\r\n  scrollbar-width: none; /* Firefox */\r\n  -ms-overflow-style: none; /* Internet Explorer 10+ */\r\n}\r\n.container::-webkit-scrollbar {\r\n  /* WebKit */\r\n  width: 0;\r\n  height: 0;\r\n}\r\n.event-today {\r\n  padding: 10px;\r\n  h3 {\r\n    font-weight: 600;\r\n  }\r\n}\r\n.calendar-small {\r\n  size: 30px;\r\n  margin-top: 0px;\r\n  margin-bottom: 2em;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  overflow: hidden;\r\n}\r\n\r\n::ng-deep {\r\n  ng-scrollbar.scroll-event {\r\n    --scrollbar-size: 8px;\r\n    --scrollbar-thumb-color: gray;\r\n    --scrollbar-hover-size: 12px;\r\n    --scrollbar-track-color: rgba(0, 0, 0, 0.05);\r\n    --scrollbar-border-radius: 10px;\r\n\r\n    height: 870px;\r\n    max-height: 870px;\r\n  }\r\n}\r\n\r\n::-webkit-scrollbar {\r\n  display: none !important;\r\n}\r\n::ng-deep .mat-checkbox-checked .mat-checkbox-background,\r\n::ng-deep .mat-checkbox-indeterminate .mat-checkbox-background {\r\n  background-color: #3f51b5 !important;\r\n}\r\n",
                    "styleUrl": "./schedule-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "storeFacade",
                        "type": "StoreFacade",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"container\"\r\n  fxLayout\r\n  fxLayout.xs=\"column\"\r\n  fxLayout.sm=\"column\"\r\n  fxLayoutAlign=\"center\"\r\n  fxLayoutGap=\"10px\"\r\n  fxLayoutGap.xs=\"0\"\r\n  fxLayout.lg=\"row\"\r\n>\r\n  <div\r\n    fxFlex=\"20\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"30\"\r\n    fxFlex.lg=\"20\"\r\n    fxFlex.xl=\"20\"\r\n  >\r\n    <ng-scrollbar\r\n      class=\"scroll-event\"\r\n      thumbClass=\"white-scrollbars\"\r\n      [visibility]=\"visibilityScrollNavBar\"\r\n    >\r\n      <brc-expansion-filter-schedule\r\n          [buttonFilterSchedule]=\"buttonFilterSchedule\"\r\n          [labelScheduleFilter]=\"labelScheduleFilter\"\r\n          [placeholderFilterSchedule]=\"placeholderFilterSchedule\"\r\n          [scheduleDataCategory]=\"scheduleDataCategory\"\r\n          [scheduleDataImportance]=\"scheduleDataImportance\"\r\n          (valueFilter)=\"scheduleValueFilter($event)\"\r\n      ></brc-expansion-filter-schedule>\r\n      <div class=\"calendar-small\">\r\n        <mat-calendar\r\n          #calendar\r\n          [selected]=\"selectedDate.date\"\r\n          (selectedChange)=\"onSelect($event)\"\r\n        ></mat-calendar>\r\n      </div>\r\n      <div class=\"event-today\">\r\n        <h3>Event Categories</h3>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list>\r\n          <mat-list-item\r\n            *ngFor=\"let cate of categoryEvent | async\"\r\n            matTooltip=\"{{ cate.description }}\"\r\n          >\r\n            <mat-checkbox\r\n              #checkBox\r\n              [value]=\"cate\"\r\n              (change)=\"onClickCheckBox(checkBox)\"\r\n              [checked]=\"checked\"\r\n            >\r\n              <span\r\n                matLine\r\n                class=\"link-caption\"\r\n                style=\"margin-left: 20px; font-weight: 500;\"\r\n                >{{ cate.name }}\r\n                <span\r\n                  class=\"cal-event\"\r\n                  [style.backgroundColor]=\"cate.colors?.primary\"\r\n                  style=\"\r\n                    display: inline-block;\r\n                    padding: 5px;\r\n                    border-radius: 50%;\r\n                    margin-left: 10px;\r\n                  \"\r\n                ></span>\r\n              </span>\r\n              <span\r\n                matLine\r\n                style=\"\r\n                  margin-left: 20px;\r\n                  font-weight: 300;\r\n                  font-size: small;\r\n                  white-space: nowrap;\r\n                  overflow: hidden;\r\n                  text-overflow: ellipsis;\r\n                  max-width: 200px;\r\n                \"\r\n                >{{ cate.description }}</span\r\n              >\r\n            </mat-checkbox>\r\n          </mat-list-item>\r\n        </mat-nav-list>\r\n      </div>\r\n      <div class=\"event-today\">\r\n        <h3>Event Today {{ today | date: \"dd/MM/yyyy\" }}</h3>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list\r\n          *ngIf=\"(eventsToday | async).length > 0; else noEventToday\"\r\n        >\r\n          <mat-list-item *ngFor=\"let eventToday of eventsToday | async\">\r\n            <a matLine [routerLink]=\"['/schedule/detail', eventToday.id]\">\r\n              <span\r\n                class=\"cal-event\"\r\n                [style.backgroundColor]=\"eventToday.color?.primary\"\r\n                style=\"\r\n                  display: inline-block;\r\n                  padding: 5px;\r\n                  border-radius: 50%;\r\n                  margin-right: 10px;\r\n                \"\r\n              ></span>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >{{ eventToday.title }}\r\n              </span>\r\n              <span\r\n                class=\"link-caption\"\r\n                style=\"float: right; font-weight: 300; font-size: small;\"\r\n                >{{ eventToday.start | date: \"shortTime\" }} -\r\n                {{ eventToday.end | date: \"shortTime\" }}</span\r\n              >\r\n            </a>\r\n          </mat-list-item>\r\n        </mat-nav-list>\r\n        <ng-template #noEventToday>\r\n          <mat-nav-list>\r\n            <mat-list-item>\r\n              <span class=\"cal-event\" style=\"background-color: red;\"></span>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >No events today</span\r\n              >\r\n            </mat-list-item>\r\n          </mat-nav-list>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"event-today\">\r\n        <h3>Tomorrow {{ tomorrow | date: \"dd/MM/yyyy\" }}</h3>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list\r\n          *ngIf=\"(eventsTomorrow | async).length > 0; else noEventTomorrow\"\r\n        >\r\n          <mat-list-item *ngFor=\"let eventTomorrow of eventsTomorrow | async\">\r\n            <a matLine [routerLink]=\"['/schedule/detail', eventTomorrow.id]\">\r\n              <span\r\n                class=\"cal-event\"\r\n                [style.backgroundColor]=\"eventTomorrow.color?.primary\"\r\n                style=\"\r\n                  display: inline-block;\r\n                  padding: 5px;\r\n                  border-radius: 50%;\r\n                  margin-right: 10px;\r\n                \"\r\n              ></span>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >{{ eventTomorrow.title }}\r\n              </span>\r\n              <span\r\n                class=\"link-caption\"\r\n                style=\"float: right; font-weight: 300; font-size: small;\"\r\n                >{{ eventTomorrow.start | date: \"shortTime\" }} -\r\n                {{ eventTomorrow.end | date: \"shortTime\" }}</span\r\n              >\r\n            </a>\r\n\r\n            <!-- <h4 matline> {{ link.info }} </h4> -->\r\n          </mat-list-item>\r\n        </mat-nav-list>\r\n        <ng-template #noEventTomorrow>\r\n          <mat-nav-list>\r\n            <mat-list-item>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >No events</span\r\n              >\r\n            </mat-list-item>\r\n          </mat-nav-list>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"event-today\">\r\n        <h3>\r\n          {{ nameAfterTomorrow }} {{ afterTomorrow | date: \"dd/MM/yyyy\" }}\r\n        </h3>\r\n        <mat-divider></mat-divider>\r\n        <mat-nav-list\r\n          *ngIf=\"(eventsAfterTomorrow | async).length > 0; else noEventAfterTmr\"\r\n        >\r\n          <mat-list-item\r\n            *ngFor=\"let eventAfterTomorrow of eventsAfterTomorrow | async\"\r\n          >\r\n            <a\r\n              matLine\r\n              [routerLink]=\"['/schedule/detail', eventAfterTomorrow.id]\"\r\n            >\r\n              <span\r\n                class=\"cal-event\"\r\n                [style.backgroundColor]=\"eventAfterTomorrow.color?.primary\"\r\n                style=\"\r\n                  display: inline-block;\r\n                  padding: 5px;\r\n                  border-radius: 50%;\r\n                  margin-right: 10px;\r\n                \"\r\n              ></span>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >{{ eventAfterTomorrow.title }}\r\n              </span>\r\n              <span\r\n                class=\"link-caption\"\r\n                style=\"float: right; font-weight: 300; font-size: small;\"\r\n                >{{ eventAfterTomorrow.start | date: \"shortTime\" }} -\r\n                {{ eventAfterTomorrow.end | date: \"shortTime\" }}</span\r\n              >\r\n            </a>\r\n\r\n            <!-- <h4 matline> {{ link.info }} </h4> -->\r\n          </mat-list-item>\r\n        </mat-nav-list>\r\n        <ng-template #noEventAfterTmr>\r\n          <mat-nav-list>\r\n            <mat-list-item>\r\n              <span class=\"link-caption\" style=\"font-weight: 400;\"\r\n                >No events</span\r\n              >\r\n            </mat-list-item>\r\n          </mat-nav-list>\r\n        </ng-template>\r\n      </div>\r\n    </ng-scrollbar>\r\n  </div>\r\n\r\n  <div\r\n    fxFlex=\"80\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"70\"\r\n    fxFlex.lg=\"80\"\r\n    fxFlex.xl=\"80\"\r\n    class=\"disable-scrollbars\"\r\n  >\r\n    <ng-scrollbar\r\n      class=\"scroll-event\"\r\n      thumbClass=\"white-scrollbars\"\r\n      [visibility]=\"visibilityScroll\"\r\n      #scrollbarRef\r\n    >\r\n      <brc-calendar\r\n        [events$]=\"events\"\r\n        [view]=\"calendarView\"\r\n        (viewDateChange)=\"onMonthChange($event)\"\r\n        [selectedDay]=\"selectedDate\"\r\n        (onDayClick)=\"onDayClick($event)\"\r\n        [scrollbar]=\"scrollbarRef\"\r\n      ></brc-calendar>\r\n    </ng-scrollbar>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SearchComponent",
            "id": "component-SearchComponent-d621b1727fa7a496185a919b11fb4d7a",
            "file": "src/app/shared/components/search/search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-search",
            "styleUrls": [
                "./search.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "eventResetSearch",
                    "defaultValue": "new Observable<void>()",
                    "line": 15,
                    "type": "Observable<void>"
                },
                {
                    "name": "placeholder",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "line": 14,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "textSearch",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "search",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter, Output, Input } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'brc-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.css'],\r\n})\r\nexport class SearchComponent implements OnInit {\r\n  constructor() { }\r\n\r\n\r\n  @Input() placeholder: string;\r\n  @Input() searchText: string = '';\r\n  @Input() eventResetSearch: Observable<void> = new Observable<void>();\r\n  @Output() textSearch = new EventEmitter<string>();\r\n\r\n  ngOnInit(): void {\r\n    this.eventResetSearch.subscribe(() => {\r\n      this.searchText = \"\";\r\n    })\r\n  }\r\n  search(value: string) {\r\n    this.textSearch.emit(value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-control {\r\n    \r\n    border: 0.5px solid #848484;\r\n    border-radius: 3px;\r\n    width: 99.5%;\r\n    padding-right:0px ;\r\n    margin-right: 0px;\r\n}\r\n.card {\r\n    padding-right: 0px;\r\n    margin-right: 0px;\r\n    width: 100%;\r\n}\r\n\r\n.input .search-text {\r\n\r\n    font-size: 14px;\r\n    padding-right: 0px;\r\n    margin: 0;\r\n}\r\n.mat-icon {\r\n    top: 5px;\r\n    right: 0;\r\n    padding-right: 0px;\r\n    margin-right: 0px;\r\n}\r\n.icon{\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./search.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"card\">\r\n  <div class=\"input\" style=\"position: relative;\">\r\n    <input\r\n      #searchBox\r\n      class=\"form-control\"\r\n      id=\"search-text\"\r\n      aria-describedby=\"search-text\"\r\n      name=\"search\"\r\n      [(ngModel)]=\"searchText\"\r\n      [placeholder]=\"placeholder\"\r\n      autofocus\r\n      (change)=\"search(searchText)\"\r\n    />\r\n    <mat-icon class=\"icon\" style=\"position: absolute;\">search</mat-icon>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-f4f605874433139397ae125f6085eaa8",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "line": 24,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "default",
                    "defaultValue": "''",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "scrollLength",
                    "defaultValue": "5",
                    "line": 26
                }
            ],
            "outputsClass": [
                {
                    "name": "getValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "lengthData",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "virtualScroll",
                    "type": "CdkVirtualScrollViewport",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CdkVirtualScrollViewport"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\n\r\n@Component({\r\n  selector: 'brc-app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss'],\r\n})\r\nexport class SelectComponent implements OnInit {\r\n  @ViewChild(CdkVirtualScrollViewport) virtualScroll: CdkVirtualScrollViewport;\r\n\r\n  lengthData: boolean = false;\r\n\r\n  //input\r\n  @Input() default: string = '';\r\n  @Input() data: LabelledValue<string>[] = [];\r\n  @Input() label: string;\r\n  @Input() scrollLength = 5;\r\n  //output\r\n  @Output() getValue = new EventEmitter<string>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    if(this.data != null){\r\n      this.lengthData = this.data.length < this.scrollLength;\r\n    }\r\n  }\r\n  onSelectionChange(value: string) {\r\n    this.getValue.emit(value);\r\n  }\r\n\r\n  clear() {\r\n    this.default = '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-form-field {\r\n    width: 100%;\r\n}\r\n\r\n.select-viewport {\r\n    height: 200px;\r\n    width: auto;\r\n  }\r\n  \r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field >\r\n  <mat-label>{{ label }}</mat-label>\r\n  <mat-select\r\n    (selectionChange)=\"onSelectionChange($event.value)\"\r\n    [(value)]=\"default\"\r\n  >\r\n  <cdk-virtual-scroll-viewport [style.height]=\"(this.lengthData) ? '130px' : '200px'\" itemSize=\"5\" class=\"select-viewport\">\r\n    <mat-option [value]=\"\">None</mat-option>\r\n    <mat-option *cdkVirtualFor=\"let item of data\" [value]=\"this.item.value\" class=\"select-item\">{{\r\n      this.item.label\r\n    }}</mat-option>\r\n  </cdk-virtual-scroll-viewport>\r\n  </mat-select>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "SelectMultipleComponent",
            "id": "component-SelectMultipleComponent-40c9825d510e933c714bd201355988cd",
            "file": "src/app/shared/components/select-multiple/select-multiple.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-select-multiple",
            "styleUrls": [
                "./select-multiple.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-multiple.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "line": 16
                },
                {
                    "name": "values",
                    "line": 14,
                    "type": "Category[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "outputSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "CHOOSE_ALL",
                    "defaultValue": "'Choose All'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chooseAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelSelected",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "allSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "getLableSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onSelectionChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { flatMap } from 'rxjs/operators';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\n\r\n@Component({\r\n  selector: 'brc-select-multiple',\r\n  templateUrl: './select-multiple.component.html',\r\n  styleUrls: ['./select-multiple.component.scss']\r\n})\r\nexport class SelectMultipleComponent implements OnInit {\r\n\r\n  @Output() outputSelected = new EventEmitter();\r\n  @Input() values: Category[];\r\n  @Input() label: string;\r\n  @Input() selected = [];\r\n  public CHOOSE_ALL = 'Choose All';\r\n  public labelSelected = '';\r\n  public chooseAll = false;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onSelectionChange() {\r\n    if (\r\n      (this.selected[0] != this.CHOOSE_ALL && this.chooseAll) ||\r\n      (this.selected[0] == this.CHOOSE_ALL && !this.chooseAll)\r\n    ) { return; }\r\n\r\n    if (this.chooseAll) {\r\n      this.chooseAll = !this.chooseAll;\r\n      this.selected = this.selected.splice(1, this.selected.length - 1);\r\n      this.outputSelected.emit(this.selected);\r\n    } else {\r\n      if (this.selected.length == this.values.length) {\r\n        this.chooseAll = !this.chooseAll;\r\n        this.selected.push(this.CHOOSE_ALL);\r\n        this.selected = this.selected.splice(0, this.selected.length);\r\n      }\r\n      this.outputSelected.emit(this.selected);\r\n    }\r\n    this.getLableSelected();\r\n  }\r\n\r\n  allSelected() {\r\n    this.chooseAll = !this.chooseAll;\r\n    if (this.chooseAll) {\r\n      this.selected = this.values.map(item => item.categoryId);\r\n      this.outputSelected.emit(this.selected);\r\n      this.selected.push(this.CHOOSE_ALL);\r\n    } else {\r\n      this.selected = [];\r\n      this.outputSelected.emit(this.selected);\r\n    }\r\n    this.getLableSelected();\r\n  }\r\n\r\n  getLableSelected() {\r\n    if (this.selected) {\r\n      if (this.selected[this.selected.length - 1] == this.CHOOSE_ALL) {\r\n        this.labelSelected = this.CHOOSE_ALL;\r\n        return;\r\n      }\r\n      let item = this.values.find(item => {\r\n        if (item.categoryId == this.selected[0]) {\r\n          return item;\r\n        }\r\n      })\r\n      return this.labelSelected = item ? item.categoryName : '';\r\n    }\r\n  }\r\n  clear(){\r\n    this.selected = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n::-webkit-scrollbar {\r\n    width: 20px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 5px grey; \r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: red; \r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #b30000; \r\n}\r\n",
                    "styleUrl": "./select-multiple.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field export=\"fill\" style=\"width: 100%;\">\r\n    <mat-label> {{label}} </mat-label>\r\n    <mat-select (selectionChange)=\"onSelectionChange()\" multiple placeholder=\"multiple select\" [(value)]= 'selected' class=\"custom-scroll-bar\">\r\n      <mat-select-trigger>\r\n        {{labelSelected}}\r\n        <span *ngIf=\"selected?.length > 1\" class=\"example-additional-selection\">\r\n          (+{{selected.length - 1}} {{selected?.length === 2 ? 'other' : 'others'}})\r\n        </span>\r\n      </mat-select-trigger>\r\n      <mat-option (click)='allSelected()' [value] = \"CHOOSE_ALL\" > Select All </mat-option>\r\n      <mat-option *ngFor=\"let item of values\" [value]=\"this.item.categoryId\"> {{this.item.categoryName}} </mat-option>\r\n    </mat-select>\r\n</mat-form-field>\r\n\r\n"
        },
        {
            "name": "SelectMultipleSearchComponent",
            "id": "component-SelectMultipleSearchComponent-fb8c177c078aa6375c076807e1451bea",
            "file": "src/app/shared/components/select-multiple-search/select-multiple-search.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-select-multiple-search",
            "styleUrls": [
                "./select-multiple-search.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-multiple-search.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "notFound",
                    "defaultValue": "'Not Found'",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Search'",
                    "line": 16
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "selected",
                    "defaultValue": "[]",
                    "line": 14
                },
                {
                    "name": "values",
                    "line": 12,
                    "type": "Category[]"
                },
                {
                    "name": "valuesSearch",
                    "line": 24,
                    "type": "Category[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "outputSelected",
                    "defaultValue": "new EventEmitter()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "arr",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "CHOOSE_ALL",
                    "defaultValue": "'Choose All'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "chooseAll",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "labelSelected",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "oldSelected",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "search",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchSelectInput",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchSelectInput', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "select",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "_reset",
                    "args": [
                        {
                            "name": "focus",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "focus",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151
                },
                {
                    "name": "getLableSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectionChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "openedChange",
                    "args": [
                        {
                            "name": "opened",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "opened",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\nimport { Category } from '../../../store/models/category.i';\r\n\r\n@Component({\r\n  selector: 'brc-select-multiple-search',\r\n  templateUrl: './select-multiple-search.component.html',\r\n  styleUrls: ['./select-multiple-search.component.scss'],\r\n})\r\nexport class SelectMultipleSearchComponent implements OnInit {\r\n\r\n  @Output() outputSelected = new EventEmitter();\r\n  @Input() values: Category[];\r\n  @Input() label: string;\r\n  @Input() selected = [];\r\n  oldSelected = [];\r\n  @Input() placeholder = 'Search';\r\n  @Input() notFound = 'Not Found';\r\n  public CHOOSE_ALL = 'Choose All';\r\n  public labelSelected = '';\r\n  public chooseAll = false;\r\n  public search = false;\r\n  public select;\r\n  public arr = [];\r\n  @Input() valuesSearch: Category[];\r\n  @Input() searchText: string = '';\r\n\r\n  @ViewChild('searchSelectInput', { read: ElementRef }) searchSelectInput: ElementRef;\r\n\r\n  constructor(\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.search = false;\r\n  }\r\n\r\n  onSelectionChange() {\r\n    // if (\r\n    //   (this.selected[0] != this.CHOOSE_ALL && this.chooseAll) ||\r\n    //   (this.selected[0] == this.CHOOSE_ALL && !this.chooseAll)\r\n    // ) {\r\n    //   return;\r\n    // }\r\n\r\n    // if (this.chooseAll) {\r\n    //   this.chooseAll = !this.chooseAll;\r\n    //   this.selected = this.selected.splice(1, this.selected.length - 1);\r\n    //   this.outputSelected.emit(this.oldSelected);\r\n    // } else {\r\n    //   if (this.selected.length == this.values.length) {\r\n    //     this.chooseAll = !this.chooseAll;\r\n    //     this.selected.push(this.CHOOSE_ALL);\r\n    //     this.selected = this.selected.splice(0, this.selected.length);\r\n    //   }\r\n    //   //this.outputSelected.emit(this.oldSelected);\r\n    // }\r\n    if (!this.search) {\r\n      this.oldSelected = [];\r\n      this.oldSelected = this.oldSelected.concat(this.selected);\r\n    }\r\n    else {\r\n      this.valuesSearch.forEach(item => {\r\n        for (let i = 0; i < this.oldSelected.length; i++) {\r\n          if (item.categoryId == this.oldSelected[i]) {\r\n            this.oldSelected.splice(i, 1);\r\n          }\r\n        }\r\n      })\r\n      this.oldSelected = this.oldSelected.concat(this.selected);\r\n    }\r\n    this.outputSelected.emit(this.oldSelected);\r\n    this.selected = this.oldSelected;\r\n    this.getLableSelected();\r\n\r\n  }\r\n\r\n  // allSelected() {\r\n  //   this.chooseAll = !this.chooseAll;\r\n  //   if (this.chooseAll) {\r\n  //     this.selected = this.values.map(item => item.categoryId);\r\n  //     this.oldSelected = this.values.map(item => item.categoryId);\r\n  //     this.outputSelected.emit(this.selected);\r\n  //     this.selected.push(this.CHOOSE_ALL);\r\n  //   } else {\r\n  //     this.selected = [];\r\n  //     this.oldSelected = [];\r\n  //     this.outputSelected.emit(this.selected);\r\n  //   }\r\n  //   this.getLableSelected();\r\n  // }\r\n\r\n  getLableSelected() {\r\n    if (this.selected.length > 0) {\r\n      if (this.selected[this.selected.length - 1] == this.CHOOSE_ALL) {\r\n        this.labelSelected = this.CHOOSE_ALL;\r\n        return;\r\n      }\r\n      let item = this.values.find(item => {\r\n        if (item.categoryId == this.selected[0]) {\r\n          return item;\r\n        }\r\n      })\r\n      this.labelSelected = item ? item.categoryName : '';\r\n    }\r\n  }\r\n\r\n  onInputChange(data) {\r\n    this.search = true;\r\n    this.valuesSearch = [];\r\n    this.values.filter(item => {\r\n      if (item.categoryName.toLowerCase().indexOf(data.toLowerCase()) > -1) {\r\n        this.valuesSearch.push(item);\r\n      }\r\n    })\r\n    if (!data) {\r\n      this.search = false;\r\n    }\r\n\r\n  }\r\n\r\n  public _focus() {\r\n    // if (!this.searchSelectInput) {\r\n    //   return;\r\n    // }\r\n    // save and restore scrollTop of panel, since it will be reset by focus()\r\n    // note: this is hacky\r\n    // focus\r\n    this.searchSelectInput.nativeElement.focus();\r\n  }\r\n\r\n  _reset(focus?: boolean) {\r\n    // if (!this.searchSelectInput) {\r\n    //   return;\r\n    // }\r\n    this.searchSelectInput.nativeElement.value = \"\";\r\n    this.onInputChange('')\r\n    if (focus) {\r\n      this._focus();\r\n    }\r\n  }\r\n\r\n  openedChange(opened: boolean) {\r\n    if (opened) {\r\n      // focus the search field when opening\r\n      this._focus();\r\n    } else {\r\n      // clear it when closing\r\n      this._reset();\r\n    }\r\n  }\r\n  clear(){\r\n    this.selected = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n/* Track */\r\n::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 5px grey;\r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle */\r\n::-webkit-scrollbar-thumb {\r\n    background: #C0C0C0;\r\n    border-radius: 10px;\r\n}\r\n\r\n/* Handle on hover */\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #918B8B;\r\n}\r\n\r\ninput.mat-input-element {\r\n    padding: 10px;\r\n    padding-right: 0px;\r\n    border-bottom: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n}\r\n\r\n// .form {\r\n//     max-width: 95%;\r\n//     min-width: 95%;\r\n// }\r\n\r\n.button {\r\n    float: right;\r\n    position: relative;\r\n    padding-right: 50px;\r\n}\r\n\r\n.mat-icon {\r\n    top: 5px;\r\n    right: 0;\r\n    padding-right: 25px;\r\n    padding-top: 3px;\r\n    margin-right: 0px;\r\n}\r\n\r\n::ng-deep .mat-select-panel {\r\n    max-height: none!important;\r\n}\r\n\r\n.select-box {\r\n    max-height: 150px;\r\n    overflow: auto;\r\n}\r\n",
                    "styleUrl": "./select-multiple-search.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field export=\"fill\" style=\"width: 100%;\">\r\n  <mat-label> {{label}} </mat-label>\r\n  <div class=\"form\">\r\n    <mat-select (selectionChange)=\"onSelectionChange()\" multiple placeholder=\"multiple select\" [(value)]='selected'\r\n      class=\"custom-scroll-bar\" (openedChange)=\"openedChange($event)\">\r\n      <div class=\"input-search\">\r\n        <div class=\"input\" style=\"position: relative;\">\r\n\r\n          <input matInput #searchSelectInput (input)=\"onInputChange($event.target.value)\" [placeholder]=\"placeholder\" [(ngModel)]=\"searchText\" autofocus>\r\n          <mat-icon *ngIf=\"search\" style=\"position: absolute;\" (click)=\"_reset(true)\" type=\"button\">close\r\n          </mat-icon>\r\n        </div>\r\n      </div>\r\n      <div class=\"select-box\">\r\n        <div *ngIf=\"!search else loading\">\r\n          <!-- <mat-option (click)='allSelected()' [value]=\"CHOOSE_ALL\"> Select All </mat-option> -->\r\n          <mat-option *ngFor=\"let item of values\" [value]=\"this.item.categoryId\"> {{this.item.categoryName}}\r\n          </mat-option>\r\n        </div>\r\n        <div>\r\n          <ng-template #loading>\r\n            <div *ngIf=\"valuesSearch?.length ===0\" style=\"margin: 10px;\">\r\n              {{notFound}}\r\n            </div>\r\n            <mat-option *ngFor=\"let item of valuesSearch\" [value]=\"this.item.categoryId\"> {{this.item.categoryName}}\r\n            </mat-option>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </mat-select>\r\n  </div>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-ba1dfddbc5070713c6523dc87e7f18ab",
            "file": "src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "line": 14,
                    "type": "Column[]"
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "Object[]"
                },
                {
                    "name": "eventResetSort",
                    "defaultValue": "new Observable<void>()",
                    "line": 21,
                    "type": "Observable<void>"
                },
                {
                    "name": "showBtn",
                    "defaultValue": "false",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "showButtonSelection",
                    "defaultValue": "true",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "showRowAction",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "showRowSelection",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "votes",
                    "defaultValue": "[]",
                    "line": 19
                }
            ],
            "outputsClass": [
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowDelete",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 27,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowDetail",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowID",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allowMultiSelect",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "initialSelection",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isSelectedAll",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selection",
                    "type": "SelectionModel<Object>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sortMap",
                    "type": "Map<string | SortType>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "deletePoll",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "detailPoll",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerDetail",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTextOverflow",
                    "args": [
                        {
                            "name": "elem",
                            "type": "HTMLElement"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "elem",
                            "type": "HTMLElement",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "toggleSelection",
                    "args": [
                        {
                            "name": "row",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSelectionAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77
                },
                {
                    "name": "toggleSort",
                    "args": [
                        {
                            "name": "column",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Column, SortItem, SortType } from './../../../store/models/column.i';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'brc-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  constructor() { }\r\n  // input and output\r\n  @Input() columns: Column[] = [];\r\n  @Input() dataSource: Object[] = [];\r\n  @Input() showRowSelection: boolean = false;\r\n  @Input() showRowAction: boolean = false;\r\n  @Input() showBtn: boolean = false;\r\n  @Input() votes = [];\r\n  @Input() showButtonSelection: boolean = true;\r\n  @Input() eventResetSort: Observable<void> = new Observable<void>();\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowID = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  @Output() rowDetail = new EventEmitter<Object>();\r\n  @Output() rowDelete = new EventEmitter<Object>();\r\n\r\n  // init selection\r\n  initialSelection = [];\r\n  allowMultiSelect = true;\r\n  selection: SelectionModel<Object>;\r\n  isSelectedAll: boolean = false;\r\n\r\n  // init sort collection\r\n  sortMap: Map<string, SortType>;\r\n\r\n  // method\r\n  ngOnInit(): void {\r\n\r\n    this.eventResetSort.subscribe(() => {\r\n      this.columns.forEach((column) => {\r\n        if (column.sort) {\r\n          this.sortMap.set(column.dataIndex, SortType.none);\r\n        }\r\n      });\r\n    })\r\n\r\n    this.selection = new SelectionModel<Object>(\r\n      this.allowMultiSelect,\r\n      this.initialSelection\r\n    );\r\n    this.sortMap = new Map();\r\n\r\n    this.columns.forEach((column) => {\r\n      if (column.sort) {\r\n        this.sortMap.set(column.dataIndex, SortType.none);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Start nc_nghi\r\n  detailPoll(data: Object){\r\n    this.rowDetail.emit(data);\r\n  }\r\n\r\n  deletePoll(data: Object){\r\n    this.rowDelete.emit(data);\r\n  }\r\n  //End nc_nghi\r\n\r\n  toggleSelection(row: Object) {\r\n    this.selection.toggle(row);\r\n    this.rowsSelected.emit(this.selection.selected);\r\n  }\r\n\r\n  toggleSelectionAll() {\r\n    this.isSelectedAll\r\n      ? this.selection.clear()\r\n      : this.dataSource.forEach((row) => this.selection.select(row));\r\n\r\n    this.isSelectedAll = !this.isSelectedAll;\r\n    this.rowsSelected.emit(this.selection.selected);\r\n  }\r\n\r\n  handlerClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n\r\n  handlerDetail(data: Object) {\r\n    this.rowID.emit(data);\r\n  }\r\n\r\n  toggleSort(column: string) {\r\n    console.log(column);\r\n    if (this.sortMap.get(column)) {\r\n      let sortType: SortType = this.sortMap.get(column);\r\n      sortType === SortType.none\r\n        ? this.sortMap.set(column, SortType.asc)\r\n        : sortType === SortType.asc\r\n          ? this.sortMap.set(column, SortType.desc)\r\n          : this.sortMap.set(column, SortType.none);\r\n\r\n      // set sort none other colums\r\n      this.sortMap.forEach((value, key) => {\r\n        console.log(key);\r\n        if (key !== column) {\r\n          this.sortMap.set(key, SortType.none);\r\n        }\r\n      });\r\n\r\n      // init result\r\n      let sortResult: SortItem[] = [];\r\n      this.sortMap.forEach((value, key) => {\r\n        sortResult.push({ name: key, sort: value });\r\n      });\r\n      // emit\r\n      this.sort.emit(sortResult);\r\n    }\r\n  }\r\n\r\n  isTextOverflow(elem: HTMLElement): boolean {\r\n    return elem.offsetWidth < elem.scrollWidth;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table-container {\r\n  width: 100% !important;\r\n  border-collapse: collapse;\r\n\r\n  table-layout: fixed;\r\n}\r\n\r\n.table-row {\r\n  width: 100% !important;\r\n  border-top: 1px solid #f0f0f0;\r\n  border-bottom: 1px solid #f0f0f0;\r\n\r\n}\r\n\r\n.table-row:hover {\r\n  background: #fafafa;\r\n}\r\n\r\n.selected {\r\n  background: #d2ddf7;\r\n}\r\n\r\n.selected:hover {\r\n  background: #d2ddf7;\r\n}\r\n\r\n.table-header {\r\n  width: 100%;\r\n  // background: #f0f0f0;\r\n  border-bottom: 1px solid #d4d4d4;\r\n\r\n}\r\n\r\n.table-cell-header {\r\n  text-align: left;\r\n  cursor: default;\r\n\r\n}\r\n\r\n.table-cell {\r\n  text-align: left;\r\n  padding: 1em 1.2em;\r\n  min-width: 100px !important;\r\n\r\n\r\n}\r\n\r\n.checkbox-cell {\r\n  width: 13%;\r\n}\r\n\r\n.table-cell-entry {\r\n  // width: 100%;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  padding-right: 10px;\r\n}\r\n\r\n.thead-title {\r\n\r\n  -moz-user-select: none;\r\n  /* Firefox */\r\n  -ms-user-select: none;\r\n  /* Internet Explorer */\r\n  -khtml-user-select: none;\r\n  /* KHTML browsers (e.g. Konqueror) */\r\n  -webkit-user-select: none;\r\n  /* Chrome, Safari, and Opera */\r\n  -webkit-touch-callout: none;\r\n  /* Disable Android and iOS callouts*/\r\n}\r\n\r\n.sort-column {\r\n  position: absolute;\r\n  margin-left: 3px;\r\n}\r\n\r\n.sort-column .opacity-02 {\r\n  opacity: 0.2;\r\n}\r\n\r\n\r\n.sort-column .mat-icon {\r\n  font-size: 16px;\r\n  cursor: default;\r\n  width: 10px;\r\n  height: 16px;\r\n}\r\n\r\n// na-Khanh\r\n.btn-delete{\r\n  margin-left: 2%;\r\n}\r\n\r\n// Start nc_nghi\r\n.btn-edit-mat{\r\n  margin-right: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: darkgray;\r\n}\r\n\r\n.btn-delete-mat{\r\n  border: none;\r\n  border-radius: 5px;\r\n  background-color: darkgray;\r\n}\r\n//end nc_nghi",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table class=\"table-container\">\r\n    <tr class=\"table-header\">\r\n        <th *ngIf=\"showRowSelection\" class=\"table-cell table-cell-header checkbox-cell\">\r\n            <mat-checkbox [color]=\"'primary'\" (change)=\"$event ? toggleSelectionAll() : null\" [checked]='isSelectedAll'>\r\n            </mat-checkbox>\r\n        </th>\r\n        <th *ngFor=\"let column of columns\">\r\n            <span class=\"thead-title\">\r\n                {{column.title}}\r\n                <span class=\"sort-column\"\r\n                    *ngIf=\"sortMap.get(column.dataIndex) != null && sortMap.get(column.dataIndex) === 'desc'\">\r\n                    <mat-icon class=\"opacity-02\">north</mat-icon>\r\n                    <mat-icon>south</mat-icon>\r\n                </span>\r\n                <span class=\"sort-column\"\r\n                    *ngIf=\"sortMap.get(column.dataIndex) && sortMap.get(column.dataIndex) === 'asc'\">\r\n                    <mat-icon>north</mat-icon>\r\n                    <mat-icon class=\"opacity-02\">south</mat-icon>\r\n                </span>\r\n                <span class=\"sort-column\"\r\n                    *ngIf=\"sortMap.get(column.dataIndex) && sortMap.get(column.dataIndex) === 'none'\">\r\n                    <mat-icon class=\"opacity-02\">north</mat-icon>\r\n                    <mat-icon class=\"opacity-02\">south</mat-icon>\r\n                </span>\r\n            </span>\r\n        </th>\r\n        <th *ngIf=\"showBtn\" class=\"table-cell table-cell-header\" style=\"text-align: center;\">\r\n            Action\r\n        </th>\r\n    </tr>\r\n    <tr *ngFor=\"let row of dataSource\" class=\"table-row\" (click)=\"handlerClickRow(row)\"\r\n        [class.selected]=\"selection.isSelected(row)\">\r\n        <td *ngIf=\"showRowSelection\" class=\"table-cell table-cell-header\">\r\n            <mat-checkbox [color]=\"'primary'\" (change)=\"$event ? toggleSelection(row) : null\"\r\n                [checked]=\"selection.isSelected(row)\"></mat-checkbox>\r\n        </td>\r\n        <td class=\"table-cell\" *ngFor=\"let column of columns\"> \r\n            <div *ngIf=\"row[column.dataIndex][0]=='top'; else elseBlock1\">\r\n                <div *ngIf=\"row[column.dataIndex][1]\" style=\"display: flex; flex-direction: row;\">\r\n                    <mat-icon style=\"color:#FFCC00;\" title=\"{{row[column.dataIndex][1].optionName}}\">lens</mat-icon>\r\n                    <span style=\"margin: 4px 0 0 4px;\">{{row[column.dataIndex][1].voteCount}}</span>\r\n                </div>\r\n                <div *ngIf=\"row[column.dataIndex][2]\" style=\"display: flex; flex-direction: row;\">\r\n                    <mat-icon style=\"color:#A1A2A3;\" title=\"{{row[column.dataIndex][2].optionName}}\">lens</mat-icon>\r\n                    <span style=\"margin: 4px 0 0 4px;\">{{row[column.dataIndex][2].voteCount}}</span>\r\n                </div>\r\n                <div *ngIf=\"row[column.dataIndex][3]\" style=\"display: flex; flex-direction: row;\">\r\n                    <mat-icon style=\"color: #9C7A3C\" title=\"{{row[column.dataIndex][3].optionName}}\">lens</mat-icon>\r\n                    <span style=\"margin: 4px 0 0 4px;\">{{row[column.dataIndex][3].voteCount}}</span>\r\n                </div>\r\n            </div>\r\n            <ng-template #elseBlock1>\r\n                <div *ngIf=\"showButtonSelection && row[column.dataIndex]=='action'; else elseBlock2\">\r\n                    <button (click)=\"detailPoll(row)\" class=\"btn-edit-mat\"><mat-icon>edit</mat-icon></button>\r\n                    <button (click)=\"deletePoll(row)\" class=\"btn-delete-mat\"><mat-icon>delete</mat-icon></button>\r\n                </div>\r\n                <ng-template #elseBlock2>\r\n                    {{(row[column.dataIndex] !== null) ? row[column.dataIndex]: \"\"}}\r\n                </ng-template>\r\n            </ng-template>\r\n        </td>\r\n        <td *ngIf=\"showBtn\" class=\"table-cell\" style=\"text-align: center;\">\r\n            <button (click)=\"handlerDetail(row)\" mat-raised-button color=\"basic\">Detail</button>\r\n            <button mat-raised-button color=\"basic\" style=\"margin-left: 10px;\">Delete</button>\r\n        </td>\r\n    </tr>\r\n</table>"
        },
        {
            "name": "TextareaComponent",
            "id": "component-TextareaComponent-a8315c2bd48685a06330cdbf7e3b855d",
            "file": "src/app/shared/components/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-textarea",
            "styleUrls": [
                "./textarea.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./textarea.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "initValue",
                    "defaultValue": "''",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "row",
                    "defaultValue": "3",
                    "line": 13,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "value",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handlerChangeTextarea",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'brc-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: ['./textarea.component.scss'],\r\n})\r\nexport class TextareaComponent implements OnInit {\r\n  @Input() name: string = '';\r\n  @Input() id: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() initValue: string = '';\r\n  @Input() row: number = 3;\r\n  @Input() readonly : boolean = false;\r\n\r\n  @Output() value = new EventEmitter<string>();\r\n\r\n  handlerChangeTextarea() {\r\n    this.initValue.trim() !== ''\r\n      ? this.value.emit(this.initValue)\r\n      : this.value.emit(null);\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".textarea-container {\r\n  width: 100%;\r\n  height: 75%;\r\n}\r\n\r\n.textarea-container textarea {\r\n  width: calc(100% - 22px);\r\n  padding: 0;\r\n  resize: vertical;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n}\r\n\r\n/* width */\r\n.textarea-container ::-webkit-scrollbar {\r\n  width: 5px;\r\n  height: 5px;\r\n  cursor: default !important;\r\n}\r\n\r\n/* Track */\r\n.textarea-container ::-webkit-scrollbar-track {\r\n  box-shadow: inset 0 0 5px rgb(201, 201, 201);\r\n  // border-radius: 10px;\r\n}\r\n\r\n/* Handle */\r\n.textarea-container ::-webkit-scrollbar-thumb {\r\n  background: rgb(177, 177, 177);\r\n  border-radius: 10px;\r\n\r\n}\r\n\r\n/* Handle on hover */\r\n.textarea-container ::-webkit-scrollbar-thumb:hover {\r\n  background: #999999;\r\n}\r\n\r\ntextarea {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./textarea.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"textarea-container\">\r\n    <textarea [readonly]=\"readonly\" name={{name}} id={{id}} rows={{row}} (keyup)=\"handlerChangeTextarea()\" placeholder={{placeholder}}\r\n        [(ngModel)]=\"initValue\"></textarea>\r\n</div>\r\n"
        },
        {
            "name": "TimePickerComponent",
            "id": "component-TimePickerComponent-6c3ebafe9a6489ac752f65bd78b4c99b",
            "file": "src/app/shared/components/date-time-picker/time-picker/time-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-time-picker",
            "styleUrls": [
                "./time-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "times",
                    "defaultValue": "\"20 : 11\"",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "getHour",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "getMinute",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "hourpicker",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'hourpicker'"
                        }
                    ]
                },
                {
                    "name": "hours",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "minutes",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"HH : mm\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "stringTimeNow",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "stringTimeNowTest",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "strTimeInput",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "time",
                    "defaultValue": "[\r\n    {hour : '00'},\r\n    {minute : '00'},\r\n  ]",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "timeNow",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "timeNowTest",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "timepicker",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timepicker'"
                        }
                    ]
                },
                {
                    "name": "toggleButton",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'hidepicker'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addHour",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMinute",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTimeNow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getHours",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinutes",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStringTime",
                    "args": [
                        {
                            "name": "e",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeNowTest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input, ViewChild, ElementRef, Renderer2 } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'brc-time-picker',\r\n  templateUrl: './time-picker.component.html',\r\n  styleUrls: ['./time-picker.component.scss']\r\n})\r\nexport class TimePickerComponent implements OnInit {\r\n\r\n  @ViewChild('timepicker') timepicker: ElementRef;\r\n  @ViewChild('hourpicker') hourpicker: ElementRef;\r\n  @ViewChild('hidepicker') toggleButton: ElementRef;\r\n  placeholder: string = \"HH : mm\";\r\n  @Input() times: string =\"20 : 11\";\r\n  @Output() getHour = new EventEmitter<string>();\r\n\r\n  @Output() getMinute = new EventEmitter<string>();\r\n\r\n  time : any = [\r\n    {hour : '00'},\r\n    {minute : '00'},\r\n  ]\r\n  showed = false;\r\n\r\n  stringTimeNow = '';\r\n  timeNow : any;\r\n  \r\n\r\n  addHour(item){\r\n    this.getHour.emit(item)\r\n  }\r\n  addMinute(item){\r\n    this.getMinute.emit(item)\r\n  }\r\n  addTimeNow(){\r\n    this.timeNow= new Date();\r\n    this.stringTimeNow = formatDate(this.timeNow, 'HH:mm', 'en-US', '+7');\r\n    this.getHour.emit(this.stringTimeNow.slice(0,2))\r\n    this.getMinute.emit(this.stringTimeNow.slice(3,5))\r\n  }\r\n\r\n  constructor(private renderer: Renderer2) {\r\n    this.renderer.listen('window', 'click',(e:Event)=>{\r\n      if(!this.toggleButton.nativeElement.contains(e.target) && !this.timepicker.nativeElement.contains(e.target) && !this.hourpicker.nativeElement.contains(e.target)) {\r\n          this.showed=false;\r\n      }\r\n    });\r\n  }\r\n\r\n  hours = [];\r\n  minutes = [];\r\n  ngOnInit(): void {\r\n    for(let i = 0; i <= 23; i++){\r\n      if(i < 10)\r\n        this.hours.push(\"0\"+i)\r\n      else\r\n        this.hours.push(i)\r\n    }\r\n    for(let i = 0; i < 60; i++){\r\n      if(i < 10)\r\n        this.minutes.push(\"0\"+i)\r\n      else\r\n        this.minutes.push(i)\r\n    }\r\n     this.time.hour = '';\r\n     this.time.minute = '';\r\n  }\r\n\r\n  getHours(item){\r\n    \r\n    this.time.hour = item+\":\";\r\n    if(this.time.minute == \"\" ){\r\n      this.time.minute = \"00\";\r\n    }\r\n\r\n  }\r\n  getMinutes(item){\r\n    console.log(this.time.hour);\r\n    if(this.time.hour == \"\" ) {\r\n      this.time.hour = \"00:\";\r\n    }\r\n    this.time.minute = \"\" +item\r\n  }\r\n\r\n  stringTimeNowTest = '';\r\n  timeNowTest : any;\r\n  getTimeNowTest(){\r\n    this.timeNowTest= new Date();\r\n    this.stringTimeNowTest = formatDate(this.timeNowTest, 'HH:mm ', 'en-US', '+7');\r\n    this.time.hour =  this.stringTimeNowTest.slice(0,3)\r\n    this.time.minute =  this.stringTimeNowTest.slice(3,5)\r\n    console.log(this.time);\r\n  }\r\n\r\n  strTimeInput : string\r\n  getStringTime(e){\r\n\r\n    //format hh:mm 24h\r\n    var regex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\r\n\r\n    //get value from input\r\n    this.strTimeInput = e.target.value\r\n\r\n    //check regex\r\n    if(!regex.test(this.strTimeInput.replace(/\\s/g, ''))) {\r\n      alert('Vui lòng nhập lại');\r\n    }\r\n    else{\r\n    //remove space\r\n    this.strTimeInput.replace(/\\s/g, '');\r\n    console.log(this.strTimeInput.replace(/\\s/g, ''));\r\n    this.time.hour = this.strTimeInput.replace(/\\s/g, '').slice(0,2)+\":\";\r\n    this.time.minute = this.strTimeInput.replace(/\\s/g, '').slice(3,5)\r\n    this.getHour.emit(this.time.hour.slice(0,2))\r\n    this.getMinute.emit(this.time.minute)\r\n   }\r\n\r\n  }\r\n  toggleMenu() {\r\n    this.showed = !this.showed;\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    box-sizing: border-box;\r\n}\r\n\r\n// input,\r\n// textarea {\r\n//     margin: 0;\r\n//     padding-top: 11px;\r\n// }\r\n.time-input {\r\n    width: 100%;\r\n    margin-top: 1px;\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n}\r\n\r\n.mat-icon {\r\n    padding-top: 5px;\r\n    font-size: 20px;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    border-radius: 5%;\r\n}\r\n\r\n// a {\r\n//     border: none;\r\n//     border-radius: 5%;\r\n//     background-color: white;\r\n// }\r\n.txtDate {\r\n    width: 100%;\r\n}\r\n\r\n// .btnShow :hover {\r\n//     cursor: pointer;\r\n// }\r\n// .mat-icon :hover {\r\n//     background: none;\r\n// }\r\n// .btnShow {\r\n//     max-width: 12%;\r\n//     min-width: 12%;\r\n//     float: right;\r\n//     padding: 2px;\r\n// }\r\n// .form-timepicker {\r\n//     width: 100%;\r\n// }\r\n// .form {\r\n//     max-height: 260px;\r\n// }\r\n.picker-time {\r\n    border-radius: 4px;\r\n    border: 1px solid #ccc;\r\n    float: left;\r\n    width: 100%;\r\n    background-color: #FAFCFF;\r\n    max-width: 100%;\r\n    padding-top: 4px;\r\n    min-width: 100%;\r\n    line-height: 28px;\r\n}\r\n\r\n.picker-hours {\r\n    width: 50%;\r\n    color: black;\r\n    float: left;\r\n    text-align: center;\r\n}\r\n\r\n.picker-hours ::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.picker-minutes ::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.picker-minutes {\r\n    width: 50%;\r\n    color: black;\r\n    float: left;\r\n    text-align: center;\r\n}\r\n\r\n.picker-hours ul {\r\n    border-bottom: 1px solid #ccc;\r\n    border-right: 1px solid #ccc;\r\n    border-radius: 4px;\r\n    height: 200px;\r\n    overflow: hidden;\r\n    padding: 0px;\r\n    margin: 0px;\r\n    border-top: none;\r\n}\r\n\r\n.picker-hours ul:hover {\r\n    overflow: auto;\r\n}\r\n\r\n.picker-hours ul li {\r\n    display: block;\r\n}\r\n\r\n.picker-hours ul li:hover,\r\nul li:focus {\r\n    background-color: #e6f7ff;\r\n}\r\n\r\n// minute\r\n.picker-minutes ul {\r\n    border-bottom: 1px solid #ccc;\r\n    height: 200px;\r\n    overflow: hidden;\r\n    padding: 0px;\r\n    margin: 0px;\r\n    border-top: none;\r\n    // border-radius: 4px;\r\n    // border-left: 1px solid #6C6969;\r\n    // border-right: 1px solid #6C6969;\r\n}\r\n\r\n.picker-minutes ul:hover {\r\n    overflow: auto;\r\n}\r\n\r\n.picker-minutes ul li {\r\n    display: block;\r\n}\r\n\r\n.picker-minutes ul li:hover,\r\nul li:focus {\r\n    background-color: #e6f7ff;\r\n}\r\n\r\n.picker-minutes ul li {\r\n    padding: 5px;\r\n    text-align: center;\r\n}\r\n\r\n.picker-hours ul li {\r\n    padding: 5px;\r\n    text-align: center;\r\n}\r\n\r\n// aaaaaaaaaaa\r\n.pagination ul,\r\nli {\r\n    height: 18%;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.control {\r\n    width: 100%;\r\n    padding-left: 2px;\r\n}\r\n\r\n.now-time {\r\n    margin: 5px;\r\n    width: 60%;\r\n    float: right;\r\n    border-radius: 4px;\r\n}\r\n\r\n.now-time button {\r\n    float: right;\r\n    border-radius: 10%;\r\n    background-color: white;\r\n    color: black;\r\n    border: 2px solid #4CAF50;\r\n    padding: 5px;\r\n}\r\n\r\n.now-time button:hover {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n}",
                    "styleUrl": "./time-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-timepicker\" style=\"position: relative;\" >\r\n\r\n    <div class=\"form\" style=\"position: absolute; \">\r\n        <div class=\"time-input\">\r\n            <input class=\"txtDate\" [(ngModel)]=\"times\" (click)='showed=!showed' [placeholder]=\"placeholder\" [value]=\"time.hour+time.minute \" (change)=\"getStringTime($event)\">\r\n            <button class=\"btnShow\" #hidepicker>\r\n                <mat-icon (click)=\"toggleMenu()\">schedule</mat-icon>\r\n            </button>\r\n        </div>\r\n\r\n        <div class=\"picker-time \"  style=\"z-index:3;position: relative;background-color: #f1f2f6; \" [hidden]=\"!showed \">\r\n            <div class=\"picker-hours \" #timepicker>\r\n                <ul>\r\n                    <li (click)=\"addHour(item) \" (click)=\"getHours(item) \" *ngFor=\"let item of hours \">{{item}}</li>\r\n                </ul>\r\n            </div>\r\n            <div class=\"picker-minutes \" #hourpicker>\r\n                <ul>\r\n                    <li (click)=\"addMinute(item) \" (click)=\"getMinutes(item) \" (click)='showed=!showed' *ngFor=\"let item of minutes \">{{item}}</li>\r\n                </ul>\r\n                \r\n            </div>\r\n            <div class=\"control \">\r\n                <div class=\"now-time \">\r\n                    <button (click) = \"addTimeNow()\"  (click)=\"getTimeNowTest() \">now</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "TodoDetailComponent",
            "id": "component-TodoDetailComponent-9e2eda7e0b25648608af6ff7bee14d41",
            "file": "src/app/shared/components/todo-detail/todo-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-todo-detail",
            "styleUrls": [
                "./todo-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "defaultValue": "{\r\n    todoId: '',\r\n    todoName: '',\r\n    description: '',\r\n    status: '',\r\n    deadline: new Date(),\r\n    importance: '',\r\n    created: new Date(),\r\n    modified: new Date(),\r\n    todoDetailUser: {\r\n      userId: '',\r\n      userName: '',\r\n      fullName: '',\r\n    },\r\n    todoDetailCategory: {\r\n      todoCategoryId: '',\r\n      todoCategoryName: '',\r\n    },\r\n  }",
                    "line": 12,
                    "type": "TodoDetail"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClickEmt",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 31,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "btnClickEmtDelete",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 34,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "btnClickEmtStatus",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 32,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "btnClickEmtUpdate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 33,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clickButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "clickButtonDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "clickButtonStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "clickButtonUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { TodoDetail } from '../../../store/models/detail-todo';\r\n\r\n@Component({\r\n  selector: 'brc-todo-detail',\r\n  templateUrl: './todo-detail.component.html',\r\n  styleUrls: ['./todo-detail.component.scss'],\r\n})\r\nexport class TodoDetailComponent implements OnInit {\r\n  // text-area\r\n  @Input() todo: TodoDetail = {\r\n    todoId: '',\r\n    todoName: '',\r\n    description: '',\r\n    status: '',\r\n    deadline: new Date(),\r\n    importance: '',\r\n    created: new Date(),\r\n    modified: new Date(),\r\n    todoDetailUser: {\r\n      userId: '',\r\n      userName: '',\r\n      fullName: '',\r\n    },\r\n    todoDetailCategory: {\r\n      todoCategoryId: '',\r\n      todoCategoryName: '',\r\n    },\r\n  };\r\n  @Output() btnClickEmt: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() btnClickEmtStatus: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() btnClickEmtUpdate: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() btnClickEmtDelete: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  clickButton() {\r\n    this.btnClickEmt.emit();\r\n  }\r\n\r\n  clickButtonStatus() {\r\n    this.btnClickEmtStatus.emit();\r\n  }\r\n\r\n  clickButtonUpdate() {\r\n    this.btnClickEmtUpdate.emit();\r\n  }\r\n\r\n  clickButtonDelete() {\r\n    this.btnClickEmtDelete.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p b {\r\n  font-size: 16px;\r\n}\r\n\r\n.color-medium {\r\n  background-color: white;\r\n  padding: 20px;\r\n}\r\n\r\n.color-medium .color-medium-p {\r\n  border-radius: 10px;\r\n  border: 1px solid rgb(247, 247, 250);\r\n  background-color: rgb(247, 247, 250);\r\n  padding: 10px;\r\n}\r\n\r\n@media (max-width: 1000px) {\r\n  .container {\r\n    max-width: 100% !important;\r\n    // margin-left: auto;\r\n    margin-left: 0px;\r\n  }\r\n}\r\n@media (min-width: 1500px) {\r\n  .container {\r\n    max-width: 70% !important;\r\n    margin: auto;\r\n  }\r\n}\r\n\r\n.title-todo {\r\n  text-align: center;\r\n  font-weight: bold;\r\n  margin: 20px 20px;\r\n}\r\n.back-todo a {\r\n  padding-left: 20px;\r\n  color: #0f78da;\r\n  font-size: 14px;\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\n",
                    "styleUrl": "./todo-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\r\n<div class=\"container\" fxLayout=\"row wrap\" fxLayoutAlign=\"center start\">\r\n  <div\r\n  fxFlex=\"100\"\r\n  class=\"back-todo\"\r\n  style=\"\r\n    background-color: rgb(221, 235, 247);\r\n    padding-bottom: 3px;\r\n      padding-top: 7px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n  \"\r\n>\r\n  <a  fxFlex.xs=\"100\" style=\"margin: 0 0 5px;\" (click)=\"clickButton()\">Back to Todo</a>\r\n</div>\r\n  <div\r\n    class=\"created-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    style=\"\r\n      padding-bottom: 3px;\r\n      padding-top: 7px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n      background-color: rgb(123, 168, 226);\r\n      margin-top: 5px;\r\n    \"\r\n  >\r\n    <h1 fxFlex.xs=\"100\" style=\"margin: 0 0 5px;\" id=\"todo-name-text\">{{ todo?.todoName }}</h1>\r\n  </div>\r\n  <div\r\n    class=\"deadline-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    style=\"\r\n      padding-bottom: 7px;\r\n      padding-top: 7px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      background-color: rgb(174, 219, 236);\r\n      border: 1px solid rgb(235, 229, 229);\r\n      margin-top: 5px;\r\n    \"\r\n  >\r\n    <button\r\n      (click)=\"clickButtonStatus()\"\r\n      mat-raised-button\r\n      color=\"basic\"\r\n      style=\"margin-right: 10px;\"\r\n      id =\"status-text\"\r\n    >\r\n      {{ todo?.status == \"complete\" ? \"Done\" : todo?.status }}\r\n    </button>\r\n    <button\r\n      (click)=\"clickButtonUpdate()\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      style=\"margin-right: 10px;\"\r\n    >\r\n      <mat-icon>update</mat-icon>\r\n    </button>\r\n    <button (click)=\"clickButtonDelete()\" mat-raised-button color=\"warn\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div\r\n    class=\"categoryname-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    style=\"\r\n      padding-bottom: 0px;\r\n      padding-top: 11px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n    \"\r\n  >\r\n    <p\r\n      fxFlex=\"10\"\r\n      fxFlex.xs=\"100\"\r\n      fxLayoutAlign=\"start center\"\r\n      style=\"color: grey;\"\r\n    >\r\n      Category:\r\n    </p>\r\n    <p fxFlex.xs=\"100\" id=\"todo-category-name-text\">{{ todo?.todoDetailCategory.todoCategoryName }}</p>\r\n  </div>\r\n  <div\r\n    class=\"deadline-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    style=\"\r\n      padding-bottom: 0px;\r\n      padding-top: 11px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n    \"\r\n  >\r\n    <p\r\n      class=\"deadline\"\r\n      style=\"vertical-align: center;\"\r\n      fxFlex=\"10\"\r\n      fxFlex.xs=\"100\"\r\n      fxLayoutAlign=\"start center\"\r\n      style=\"color: grey;\"\r\n    >\r\n      Deadline:\r\n    </p>\r\n    <p fxFlex.xs=\"100\" id=\"deadline-text\">{{ todo?.deadline }}</p>\r\n  </div>\r\n\r\n  <div\r\n    class=\"status-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    style=\"\r\n      padding-bottom: 0px;\r\n      padding-top: 11px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n    \"\r\n  >\r\n    <p\r\n      class=\"status\"\r\n      fxFlex=\"10\"\r\n      fxLayoutAlign=\"start center\"\r\n      fxFlex.xs=\"100\"\r\n      style=\"color: grey;\"\r\n    >\r\n      Todo Name:\r\n    </p>\r\n    <p fxFlex.xs=\"100\" id=\" todo-name-text\">{{ todo?.todoName }}</p>\r\n  </div>\r\n  <div\r\n    class=\"importance-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    style=\"\r\n      padding-bottom: 0px;\r\n      padding-top: 11px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n    \"\r\n  >\r\n    <p\r\n      class=\"importance\"\r\n      fxFlex=\"10\"\r\n      fxFlex.xs=\"100\"\r\n      fxLayoutAlign=\"start center\"\r\n      style=\"color: grey;\"\r\n    >\r\n      Importance:\r\n    </p>\r\n    <p fxFlex.xs=\"100\" id= \"importance-text\">{{ todo?.importance }}</p>\r\n  </div>\r\n\r\n  <div\r\n    class=\"description-todo color-medium\"\r\n    fxFlex=\"100\"\r\n    style=\"\r\n      padding-bottom: 0px;\r\n      padding-top: 11px;\r\n      margin-left: 20px;\r\n      margin-right: 20px;\r\n      border: 1px solid rgb(235, 229, 229);\r\n    \"\r\n  >\r\n    <p\r\n      class=\"description\"\r\n      fxFlex=\"10\"\r\n      fxFlex.xs=\"100\"\r\n      fxLayoutAlign=\"start center\"\r\n      style=\"color: grey;\"\r\n    >\r\n      Description:\r\n    </p>\r\n    <p fxFlex.xs=\"100\" id=\"description-text\">{{ todo?.description }}</p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "TodoListComponent",
            "id": "component-TodoListComponent-5e4888b41d280b1981116c2f4217681e",
            "file": "src/app/shared/components/todo-list/todo-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "brc-todo-list",
            "styleUrls": [
                "./todo-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "configTodoList",
                    "defaultValue": "{\r\n    filterBox: 'Filter Box',\r\n    title: 'Todo List',\r\n    btnAdd: 'Add Todo',\r\n  }",
                    "line": 44,
                    "type": "ToDoList"
                },
                {
                    "name": "todoButtonReset",
                    "line": 23,
                    "type": "configButton"
                },
                {
                    "name": "todoButtonSubmit",
                    "line": 22,
                    "type": "configButton"
                },
                {
                    "name": "todoColumns",
                    "defaultValue": "[]",
                    "line": 36,
                    "type": "Column[]"
                },
                {
                    "name": "todoDataCategory",
                    "line": 33,
                    "type": "Category[]"
                },
                {
                    "name": "todoDataCheckbox",
                    "line": 32,
                    "type": "CheckboxInterface[]"
                },
                {
                    "name": "todoDataImportance",
                    "line": 34,
                    "type": "LabelledValue<string>[]"
                },
                {
                    "name": "todoDataSource",
                    "defaultValue": "[]",
                    "line": 37,
                    "type": "Object[]"
                },
                {
                    "name": "todoLabelCategory",
                    "line": 27,
                    "type": "LabelInterface"
                },
                {
                    "name": "todoLabelFromDate",
                    "line": 25,
                    "type": "LabelInterface"
                },
                {
                    "name": "todoLabelImportance",
                    "line": 24,
                    "type": "LabelInterface"
                },
                {
                    "name": "todoLabelToDate",
                    "line": 26,
                    "type": "LabelInterface"
                },
                {
                    "name": "todoPageIndex",
                    "defaultValue": "0",
                    "line": 42,
                    "type": "number"
                },
                {
                    "name": "todoPlaceholderSearch",
                    "defaultValue": "'search todo ...'",
                    "line": 28,
                    "type": "string"
                },
                {
                    "name": "todoRecordsPerPage",
                    "defaultValue": "0",
                    "line": 41,
                    "type": "number"
                },
                {
                    "name": "todoShowRowSelection",
                    "defaultValue": "false",
                    "line": 38,
                    "type": "boolean"
                },
                {
                    "name": "todoTitleCategory",
                    "defaultValue": "'Category'",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "todoTitleGroupCheckbox",
                    "defaultValue": "'Status'",
                    "line": 29,
                    "type": "string"
                },
                {
                    "name": "todoTitleImportance",
                    "defaultValue": "'Importance'",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "todoTotalRecords",
                    "defaultValue": "0",
                    "line": 40,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnAddTodo",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 59,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 57,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "pageOnPageChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 60,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "rowClicked",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 53,
                    "type": "EventEmitter"
                },
                {
                    "name": "rowsSelected",
                    "defaultValue": "new EventEmitter<Object>()",
                    "line": 54,
                    "type": "EventEmitter"
                },
                {
                    "name": "sort",
                    "defaultValue": "new EventEmitter<SortItem[]>()",
                    "line": 55,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueFilter",
                    "defaultValue": "new EventEmitter()",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handlerClickRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleronPageChange",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlerSelectRow",
                    "args": [
                        {
                            "name": "data",
                            "type": "Object"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Object",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlersort",
                    "args": [
                        {
                            "name": "data",
                            "type": "SortItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "SortItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onClickBtnAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onPageEvent",
                    "args": [
                        {
                            "name": "data",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "todoValueFilter",
                    "args": [
                        {
                            "name": "data",
                            "type": "FilterTodo"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "FilterTodo",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { configButton } from '../../../store/models/button.i';\r\nimport { Category } from '../../../store/models/category.i';\r\nimport { CheckboxInterface, ICheckBoxItem } from '../../../store/models/checkbox-item.i';\r\nimport { Column, SortItem } from '../../../store/models/column.i';\r\nimport { LabelInterface } from '../../../store/models/label.i';\r\nimport { LabelledValue } from '../../../store/models/labelvalue.i';\r\nimport { Pagination } from '../../../store/models/pagination.i';\r\nimport { FilterTodo } from '../../../store/models/todo-filter.i';\r\nimport { ToDoList } from '../../../store/models/todoList.i';\r\n\r\n@Component({\r\n  selector: 'brc-todo-list',\r\n  templateUrl: './todo-list.component.html',\r\n  styleUrls: ['./todo-list.component.scss'],\r\n})\r\nexport class TodoListComponent implements OnInit {\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n\r\n  //Input filter\r\n  @Input() todoButtonSubmit: configButton;\r\n  @Input() todoButtonReset: configButton;\r\n  @Input() todoLabelImportance: LabelInterface;\r\n  @Input() todoLabelFromDate: LabelInterface;\r\n  @Input() todoLabelToDate: LabelInterface;\r\n  @Input() todoLabelCategory: LabelInterface;\r\n  @Input() todoPlaceholderSearch: string = 'search todo ...';\r\n  @Input() todoTitleGroupCheckbox: string = 'Status';\r\n  @Input() todoTitleImportance: string = 'Importance';\r\n  @Input() todoTitleCategory: string = 'Category';\r\n  @Input() todoDataCheckbox: CheckboxInterface[];\r\n  @Input() todoDataCategory: Category[];\r\n  @Input() todoDataImportance: LabelledValue<string>[];\r\n  //Input table\r\n  @Input() todoColumns: Column[] = [];\r\n  @Input() todoDataSource: Object[] = [];\r\n  @Input() todoShowRowSelection: boolean = false;\r\n  //Input pagination\r\n  @Input() todoTotalRecords: number = 0;\r\n  @Input() todoRecordsPerPage: number = 0;\r\n  @Input() todoPageIndex: number = 0;\r\n  //Input todolist\r\n  @Input() configTodoList: ToDoList = {\r\n    filterBox: 'Filter Box',\r\n    title: 'Todo List',\r\n    btnAdd: 'Add Todo',\r\n  };\r\n\r\n  //Output filter\r\n  @Output() valueFilter = new EventEmitter();\r\n  //Output table\r\n  @Output() rowClicked = new EventEmitter<Object>();\r\n  @Output() rowsSelected = new EventEmitter<Object>();\r\n  @Output() sort = new EventEmitter<SortItem[]>();\r\n  //Output pagination\r\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter();\r\n  //Out put todolist\r\n  @Output() btnAddTodo: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() pageOnPageChange: EventEmitter<number> = new EventEmitter<number>();\r\n  todoValueFilter(data: FilterTodo) {\r\n    this.valueFilter.emit(data);\r\n  }\r\n  handleronPageChange(data: number) {\r\n    this.onPageChange.emit(data);\r\n  }\r\n  handlerClickRow(data: Object) {\r\n    this.rowClicked.emit(data);\r\n  }\r\n  handlersort(data: SortItem[]) {\r\n    this.sort.emit(data);\r\n  }\r\n  handlerSelectRow(data: Object) {\r\n    this.rowsSelected.emit(data);\r\n  }\r\n  onClickBtnAdd() {\r\n    this.btnAddTodo.emit();\r\n  }\r\n  onPageEvent(data: number) {\r\n    this.pageOnPageChange.emit(data);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".pagination-list {\r\n    margin-left: 30% !important;\r\n    margin-top: 20px;\r\n}\r\n\r\n.container {\r\n    align-items: unset !important;\r\n}\r\n",
                    "styleUrl": "./todo-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  class=\"container\"\r\n  style=\"padding: 10px;\"\r\n  fxLayoutGap=\"10px\"\r\n  fxLayoutGap.xs=\"0\"\r\n  fxLayout.gt-sm =\"row \"\r\n  fxLayout.lt-md = \"column\"\r\n>\r\n  <div\r\n    fxFlex=\"20\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"30\"\r\n    fxFlex.gt-lg=\"20\"\r\n    style=\"\r\n      border: 1px solid #f0f0f0;\r\n      height: 100%;\r\n      padding-bottom: 5%;\r\n    \"\r\n  >\r\n    <brc-list-filter\r\n      [buttonSubmit]=\"todoButtonSubmit\"\r\n      [buttonReset]=\"todoButtonReset\"\r\n      [labelImportance]=\"todoLabelImportance\"\r\n      [labelFromDate]=\"todoLabelFromDate\"\r\n      [labelToDate]=\"todoLabelToDate\"\r\n      [labelCategory]=\"todoLabelCategory\"\r\n      [placeholderSearch]=\"todoPlaceholderSearch\"\r\n      [titleGroupCheckbox]=\"todoTitleGroupCheckbox\"\r\n      [titleImportance]=\"todoTitleImportance\"\r\n      [titleCategory]=\"todoTitleCategory\"\r\n      [dataCheckbox]=\"todoDataCheckbox\"\r\n      [dataCategory]=\"todoDataCategory\"\r\n      [dataImportance]=\"todoDataImportance\"\r\n      (valueFilter)=\"todoValueFilter($event)\"\r\n    >\r\n    </brc-list-filter>\r\n  </div>\r\n\r\n  <div\r\n    fxFlex=\"80\"\r\n    fxFlex.sm=\"100\"\r\n    fxFlex.xs=\"100\"\r\n    fxFlex.md=\"70\"\r\n    fxFlex.gt-lg=\"80\"\r\n  >\r\n    <div style=\"text-align: left; font-weight: 600;\">\r\n      <h1>\r\n        <b>{{ configTodoList.title }}</b>\r\n      </h1>\r\n    </div>\r\n    <div style=\"margin: auto; display: flex; justify-content: flex-end;\">\r\n      <button mat-raised-button color=\"primary\"   data-test=\"submit-action\" (click)=\"onClickBtnAdd()\">\r\n        <mat-icon>add</mat-icon>{{ configTodoList.btnAdd }}\r\n      </button>\r\n    </div>\r\n    <div style=\"margin: auto; display: block; min-width: 100%;\">\r\n      <brc-table\r\n        [columns]=\"todoColumns\"\r\n        [dataSource]=\"todoDataSource\"\r\n        [showRowSelection]=\"todoShowRowSelection\"\r\n        (rowClicked)=\"handlerClickRow($event)\"\r\n        (rowsSelected)=\"handlerSelectRow($event)\"\r\n        (sort)=\"handlersort($event)\"\r\n      >\r\n      </brc-table>\r\n    </div>\r\n    <div class=\"pagination-list\" *ngIf=\"todoDataSource.length > 0\">\r\n      <!-- <brc-pagination\r\n            [totalRecords] = \"todoTotalRecords\"\r\n            [recordsPerPage] = \"todoRecordsPerPage\"\r\n            (onPageChange) = \"handleronPageChange($event)\">\r\n        </brc-pagination> -->\r\n      <brc-mat-paginator\r\n        [total]=\"todoTotalRecords\"\r\n        [pageSize]=\"todoRecordsPerPage\"\r\n        [pageIndex]=\"todoPageIndex\"\r\n        (onPageChange)=\"onPageEvent($event)\"\r\n      ></brc-mat-paginator>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AddListExcelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "PopupModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddPollModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddPollComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DateTimePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SelectMultipleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddPollComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddPollPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddPollPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddPollModule"
                        },
                        {
                            "name": "AddPollPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddPollPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddPollPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddScheduleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CheckboxModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SelectMultipleSearchModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextareaModule"
                        },
                        {
                            "name": "TimePickerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddSchedulePageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddSchedulePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddScheduleModule"
                        },
                        {
                            "name": "AddSchedulePageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddSchedulePageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddSchedulePageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddTodoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddTodoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextareaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddTodoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddTodoPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddTodoPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddTodoModule"
                        },
                        {
                            "name": "AddTodoPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AddTodoPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AddTodoPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppStoreModule"
                        },
                        {
                            "name": "LoginPageModule"
                        },
                        {
                            "name": "MainLayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "bootstrapsEnvironment.app"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStoreModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CalendarModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BottomActionComponent"
                        },
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "CheckboxGroupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "CheckboxGroupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CheckboxNewModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxNewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CheckboxNewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DateTimePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DateTimePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "TimePickerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DateTimePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DetailTodoPageRouting",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "EditListExcelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "PopupModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EditListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelDetailPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExcelDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExcelDetailPageRouter"
                        },
                        {
                            "name": "ListDetailExcelModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExcelDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelDetailPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelListPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExcelListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExcelListPageRouter"
                        },
                        {
                            "name": "ListExcelModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExcelListPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelListPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelTemplateDetailPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExcelTemplateDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ExcelTemplateDetailPageRouter"
                        },
                        {
                            "name": "ListDetailExcelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExcelTemplateDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExcelTemplateDetailPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ExpansionFilterScheduleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ExpansionFilterScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "ScheduleFilterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ExpansionFilterScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckboxNewComponent"
                        },
                        {
                            "name": "ListFilterScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DateTimePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SelectMultipleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListFilterScheduleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilterNotificationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonGroupComponent"
                        },
                        {
                            "name": "FilterNotificationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FilterNotificationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListDetailExcelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListDetailExcelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListDetailExcelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ListExcelModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TableModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListExcelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LoginRouter"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LoginPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LoginRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainLayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MainLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainLayoutRoutingModule"
                        },
                        {
                            "name": "PopupModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MainLayoutComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainLayoutRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialCustomModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MatPaginatorCustomModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MatPaginatorCustomComponent"
                        },
                        {
                            "name": "PaginationDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MatPaginatorCustomComponent"
                        },
                        {
                            "name": "PaginationDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "FilterNotificationModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotificationListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NotificationPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NotificationListModule"
                        },
                        {
                            "name": "NotificationRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NotificationPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NotificationRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PageTodoListRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollDetailModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PollDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextareaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PollDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollDetailPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PollDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AddScheduleModule"
                        },
                        {
                            "name": "PollDetailPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PollDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollDetailPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollListPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PollListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PollListPageRouter"
                        },
                        {
                            "name": "ScheduleListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PollListPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollListPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollMainModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PollMainComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DatePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextareaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PollMainComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollMainPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PollMainPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PollMainModule"
                        },
                        {
                            "name": "PollMainPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PollMainPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PollMainPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PopUpComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopupPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PopupPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PopupModule"
                        },
                        {
                            "name": "PopupPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PopupPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PopupPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleDetailModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScheduleDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleDetailPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "ScheduleDetailModule"
                        },
                        {
                            "name": "ScheduleDetailPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScheduleDetailPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleDetailPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleFilterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "DateTimePickerModule"
                        },
                        {
                            "name": "LabelModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "SelectModule"
                        },
                        {
                            "name": "SelectMultipleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScheduleFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "ScheduleFilterModule"
                        },
                        {
                            "name": "SearchModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScheduleListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "ScheduleFilterModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleListPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ScheduleListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ScheduleListModule"
                        },
                        {
                            "name": "ScheduleListPageRouter"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ScheduleListPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ScheduleListPageRouter",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SchedulePageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SchedulePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CalendarModule"
                        },
                        {
                            "name": "ExpansionFilterScheduleModule"
                        },
                        {
                            "name": "SchedulePageRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SchedulePageRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SearchModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectMultipleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectMultipleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectMultipleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectMultipleSearchModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectMultipleSearchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectMultipleSearchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderItemComponent"
                        },
                        {
                            "name": "NotificationIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderItemComponent"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "NotificationIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TextareaModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TextareaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TimePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TimePickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialCustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TimePickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoDetailModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TodoDetailComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TextareaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TodoDetailComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoDetailPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DetailTodoPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DetailTodoPageRouting"
                        },
                        {
                            "name": "TodoDetailModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DetailTodoPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TodoListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FilterModule"
                        },
                        {
                            "name": "MatPaginatorCustomModule"
                        },
                        {
                            "name": "MaterialCustomModule"
                        },
                        {
                            "name": "PaginationModule"
                        },
                        {
                            "name": "TableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TodoListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodoListPageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageTodoListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PageTodoListRouter"
                        },
                        {
                            "name": "TodoListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PageTodoListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_snackbarReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(SnackbarActions.OpenSnackbars, (state, action) => {\r\n    return { ...state, show: true };\r\n  }),\r\n\r\n  on(SnackbarActions.CloseSnackbars, (state, action) => {\r\n    return { ...state, show: false };\r\n  })\r\n)"
            },
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/calendar/calendar.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n      label: '<i class=\"material-icons\">event_note</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons s-10\">edit</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons\">delete</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n  ]"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "serve/index.ts",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app-state.ts",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  todo: todoReducer,\r\n  notification: noticeReducer,\r\n  schedule: scheduleReducer,\r\n  snackbar: snackbarReducer,\r\n}"
            },
            {
                "name": "bootstrapsEnvironment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/bootstraps/bootstrap.ts",
                "type": "object",
                "defaultValue": "{\r\n    app: [AppComponent]\r\n  }"
            },
            {
                "name": "btnGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
            },
            {
                "name": "btnGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n      {\r\n        value: 'all',\r\n        displayValue: 'All',\r\n      },\r\n      {\r\n        value: 'read',\r\n        displayValue: 'Already Read',\r\n      },\r\n      {\r\n        value: 'unread',\r\n        displayValue: 'Unread',\r\n      },\r\n      {\r\n        value: 'remove',\r\n        displayValue: 'Remove ',\r\n      },\r\n    ]"
            },
            {
                "name": "btnGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
            },
            {
                "name": "btnGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n      {\r\n        value: 'all',\r\n        displayValue: 'All',\r\n      },\r\n      {\r\n        value: 'read',\r\n        displayValue: 'Already Read',\r\n      },\r\n      {\r\n        value: 'unread',\r\n        displayValue: 'Unread',\r\n      },\r\n      {\r\n        value: 'remove',\r\n        displayValue: 'Remove ',\r\n      },\r\n    ]"
            },
            {
                "name": "buttonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
            },
            {
                "name": "buttonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n    buttonSubmit: {\r\n      colorButton: 'primary',\r\n      colorMouseOver: 'primary',\r\n      colorMouseOut: 'primary',\r\n      type: 'submit',\r\n      text: 'Filter',\r\n    },\r\n    buttonReset: {\r\n      colorButton: 'basic',\r\n      colorMouseOver: 'basic',\r\n      colorMouseOut: 'basic',\r\n      type: 'reset',\r\n      text: 'Clear',\r\n    },\r\n  }"
            },
            {
                "name": "buttonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
            },
            {
                "name": "buttonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
            },
            {
                "name": "buttonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
            },
            {
                "name": "category",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "string",
                "defaultValue": "'Category'"
            },
            {
                "name": "category",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "string",
                "defaultValue": "'Category'"
            },
            {
                "name": "category",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "string",
                "defaultValue": "'Category'"
            },
            {
                "name": "category",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "string",
                "defaultValue": "'Category'"
            },
            {
                "name": "cateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n    {\r\n      label: 'All',\r\n      value: 'all',\r\n    },\r\n    {\r\n      label: 'System',\r\n      value: 'system'\r\n    },\r\n    {\r\n      label: 'Todo',\r\n      value: 'todo'\r\n    },\r\n    {\r\n      label: 'Schedule',\r\n      value: 'schedule'\r\n    },\r\n    {\r\n      label: 'Workflow',\r\n      value: 'workflow'\r\n    },\r\n]"
            },
            {
                "name": "cateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n      {\r\n        label: 'All',\r\n        value: 'all',\r\n      },\r\n      {\r\n        label: 'System',\r\n        value: 'system',\r\n      },\r\n      {\r\n        label: 'Todo',\r\n        value: 'todo',\r\n      },\r\n      {\r\n        label: 'Schedule',\r\n        value: 'schedule',\r\n      },\r\n      {\r\n        label: 'Workflow',\r\n        value: 'workflow',\r\n      },\r\n    ]"
            },
            {
                "name": "cateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'All',\r\n    value: 'all',\r\n  },\r\n  {\r\n    label: 'System',\r\n    value: 'system',\r\n  },\r\n  {\r\n    label: 'Todo',\r\n    value: 'todo',\r\n  },\r\n  {\r\n    label: 'Schedule',\r\n    value: 'schedule',\r\n  },\r\n  {\r\n    label: 'Workflow',\r\n    value: 'workflow',\r\n  },\r\n]"
            },
            {
                "name": "cateSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n      {\r\n        label: 'All',\r\n        value: 'all',\r\n      },\r\n      {\r\n        label: 'System',\r\n        value: 'system',\r\n      },\r\n      {\r\n        label: 'Todo',\r\n        value: 'todo',\r\n      },\r\n      {\r\n        label: 'Schedule',\r\n        value: 'schedule',\r\n      },\r\n      {\r\n        label: 'Workflow',\r\n        value: 'workflow',\r\n      },\r\n    ]"
            },
            {
                "name": "checkboxContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "CheckboxInterface[]",
                "defaultValue": "[\r\n  { name: \"Allow multiple Poll answers\", checked: false },\r\n]"
            },
            {
                "name": "checkboxContent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "CheckboxInterface[]",
                "defaultValue": "[\r\n  {name : \"Complete\", checked : false},\r\n  {name : \"Incomplete\", checked : false},\r\n]"
            },
            {
                "name": "checkboxField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "CheckboxInterface[]",
                "defaultValue": "[\r\n  { name: 'Complete', checked: false },\r\n  { name: 'Incomplete', checked: false },\r\n]"
            },
            {
                "name": "checkboxField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "ICheckBoxItem[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
            },
            {
                "name": "checkboxField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "ICheckBoxItem[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
            },
            {
                "name": "checkboxField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "CheckboxInterface[]",
                "defaultValue": "[\r\n  {name : \"Complete\", checked : false},\r\n  {name : \"Incomplete\", checked : false},\r\n]"
            },
            {
                "name": "checkboxField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "ICheckBoxItem[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
            },
            {
                "name": "CloseSnackbars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/snackbar.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Snackbar] Close Snackbars')"
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/schedule.reducer.ts",
                "type": "object",
                "defaultValue": "{\r\n  aqua: { primary: '#00ffff', secondary: '#D1E8FF' },\r\n  azure: { primary: '#f0ffff', secondary: '#D1E8FF' },\r\n  beige: { primary: '#f5f5dc', secondary: '#E9F5DC' },\r\n  blue: { primary: '#0000ff', secondary: '#0080FF' },\r\n  brown: { primary: '#a52a2a', secondary: '#A52A68' },\r\n  cyan: { primary: '#00ffff', secondary: '#0080FF' },\r\n  darkblue: { primary: '#00008b', secondary: '#00468B' },\r\n  darkcyan: { primary: '#008b8b', secondary: '#008B46' },\r\n  darkgrey: { primary: '#a9a9a9', secondary: '#A9A9A9' },\r\n  darkgreen: { primary: '#006400', secondary: '#006432' },\r\n  darkkhaki: { primary: '#bdb76b', secondary: '#9ABD6B' },\r\n  darkmagenta: { primary: '#8b008b', secondary: '#8B0046' },\r\n  darkolivegreen: { primary: '#556b2f', secondary: '#376B2F' },\r\n  darkorange: { primary: '#ff8c00', secondary: '#F3FF00' },\r\n  darkorchid: { primary: '#9932cc', secondary: '#CC32B2' },\r\n  darkred: { primary: '#8b0000', secondary: '#8B4600' },\r\n  darksalmon: { primary: '#e9967a', secondary: '#E9CD7A' },\r\n  darkviolet: { primary: '#9400d3', secondary: '#D300A8' },\r\n  fuchsia: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  gold: { primary: '#ffd700', secondary: '#A7FF00' },\r\n  green: { primary: '#008000', secondary: '#008040' },\r\n  indigo: { primary: '#4b0082', secondary: '#820078' },\r\n  khaki: { primary: '#f0e68c', secondary: '#C8F08C' },\r\n  lightblue: { primary: '#add8e6', secondary: '#ADBCE6' },\r\n  lightcyan: { primary: '#e0ffff', secondary: '#E0F0FF' },\r\n  lightgreen: { primary: '#90ee90', secondary: '#90EEBF' },\r\n  lightgrey: { primary: '#d3d3d3', secondary: '#D3D3D3' },\r\n  lightpink: { primary: '#ffb6c1', secondary: '#FFD0B6' },\r\n  lightyellow: { primary: '#ffffe0', secondary: '#F0FFE0' },\r\n  lime: { primary: '#00ff00', secondary: '#00FF80' },\r\n  magenta: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  maroon: { primary: '#800000', secondary: '#804000' },\r\n  navy: { primary: '#000080', secondary: '#400080' },\r\n  olive: { primary: '#808000', secondary: '#408000' },\r\n  orange: { primary: '#ffa500', secondary: '#FF2600' },\r\n  pink: { primary: '#ffc0cb', secondary: '#FFD4C0' },\r\n  purple: { primary: '#800080', secondary: '#800040' },\r\n  red: { primary: '#ff0000', secondary: '#FF8000' },\r\n  yellow: { primary: '#ffff00', secondary: '#80FF00' },\r\n}"
            },
            {
                "name": "columnHasSorts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/table/table.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Id',\r\n    dataIndex: 'id',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Weight',\r\n    dataIndex: 'weight',\r\n  },\r\n  {\r\n    title: 'Symbol',\r\n    dataIndex: 'symbol',\r\n  },\r\n]"
            },
            {
                "name": "columnHasSorts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n    {\r\n        title: 'Id',\r\n        dataIndex: 'id',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n    },\r\n    {\r\n        title: 'Symbol',\r\n        dataIndex: 'symbol',\r\n    },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/notification-page/notification-page.component.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Event Type',\r\n    dataIndex: 'eventTypeName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Start Time',\r\n    dataIndex: 'eventStartTime',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-list-page/poll-list-page.component.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'STT',\r\n    dataIndex: 'stt',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Question',\r\n    dataIndex: 'question',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Expiration',\r\n    dataIndex: 'expiration',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Created by',\r\n    dataIndex: 'create_by',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Top votes',\r\n    dataIndex: 'topvotes',\r\n    sort: false,\r\n  },\r\n  {\r\n    title: 'Action',\r\n    dataIndex: 'action',\r\n    sort: false,\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Title Schedule',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'scheduleCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Place',\r\n    dataIndex: 'place',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Type Repeat',\r\n    dataIndex: 'typeRepeat',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Users',\r\n    dataIndex: 'users',\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Title Todo',\r\n    dataIndex: 'todoName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Deadline',\r\n    dataIndex: 'deadline',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'todoCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n      {\r\n        title: 'Stt',\r\n        dataIndex: 'Stt',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'From',\r\n    dataIndex: 'from',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Sub description',\r\n    dataIndex: 'subDescription',\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n    {\r\n        title: 'STT',\r\n        dataIndex: 'stt',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Question',\r\n        dataIndex: 'question',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Expriration',\r\n        dataIndex: 'expriration',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Status',\r\n        dataIndex: '',\r\n    },\r\n    {\r\n        title: 'Created by',\r\n        dataIndex: 'createdby',\r\n        sort: true,\r\n    },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n    {\r\n        title: 'Title Schedule',\r\n        dataIndex: 'scheduleName',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Time',\r\n        dataIndex: 'time',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n    },\r\n    {\r\n        title: 'Place',\r\n        dataIndex: 'place',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Importance',\r\n        dataIndex: 'importance',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Type Repeat',\r\n        dataIndex: 'typeRepeat',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Users',\r\n        dataIndex: 'users',\r\n    },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/table/table.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Id',\r\n    dataIndex: 'id',\r\n  },\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n  },\r\n  {\r\n    title: 'Weight',\r\n    dataIndex: 'weight',\r\n  },\r\n  {\r\n    title: 'Symbol',\r\n    dataIndex: 'symbol',\r\n  },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n    {\r\n        title: 'Todo Name',\r\n        dataIndex: 'todoName',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n    },\r\n    {\r\n        title: 'Deadline',\r\n        dataIndex: 'deadline',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Importance',\r\n        dataIndex: 'importance',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Status',\r\n        dataIndex: 'status',\r\n        sort: true,\r\n    },\r\n]"
            },
            {
                "name": "columns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "Column[]",
                "defaultValue": "[\r\n      {\r\n        title: 'Template Name',\r\n        dataIndex: 'template_name',\r\n      },\r\n      {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date'\r\n      }\r\n    ]"
            },
            {
                "name": "configButtonFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "ButtonFilterSchedule<configButton>",
                "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
            },
            {
                "name": "configButtonReset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
            },
            {
                "name": "configButtonReset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
            },
            {
                "name": "configButtonReset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
            },
            {
                "name": "configButtonReset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
            },
            {
                "name": "configButtonSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
            },
            {
                "name": "configButtonSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Create Poll',\r\n}"
            },
            {
                "name": "configButtonSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
            },
            {
                "name": "configButtonSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "configButton",
                "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
            },
            {
                "name": "configLabelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
            },
            {
                "name": "configPlaceholderFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "PlaceholderFilterSchedule",
                "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'High',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Low',\r\n    value: 'Low',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n    {\r\n      label: 'Normal',\r\n      value: 'Normal',\r\n    },\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n  ]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'medium',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: 'low',\r\n    value: '3',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'medium',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: 'low',\r\n    value: '3',\r\n  },\r\n]"
            },
            {
                "name": "dataImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n      {\r\n        Stt: '1',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'Spider men',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '2',\r\n        Employees: 'n_anh',\r\n        Employees1: 'Iron men',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '3',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '4',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '5',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n    ]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 1, stt: '1', question: 'Giải đấu Liên Quân', expriration: '31/12/2020 17:30', status: 'In process', createdby: 'Phuong Dung'},\r\n  { id: 2, stt: '2', question: 'Cuối tuần bạn muốn đi đâu?', expriration: '25/12/2020 11:30',  status: 'In process', createdby: 'Thach monus'},\r\n  { id: 3, stt: '3', question: 'Tiệc Noel ăn gì?', expriration: '18/12/2020 17:30', status: 'In process', createdby: 'nc_nghi'},\r\n  { id: 4, stt: '4', question: 'Teambuilding', expriration: '31/11/2020 17:30', status: 'Expired', createdby: 'Phuong Dung'},\r\n  { id: 5, stt: '5', question: 'Mùa hè sôi động', expriration: '25/5/2020 17:30', status: 'Expired', createdby: 'Phuong Dung'},\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n    { id: 1, scheduleName: 'Read book', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework',  description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 2, scheduleName: 'Do homework', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Easy', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 3, scheduleName: 'Play game', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Game', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 4, scheduleName: 'Exercise', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Exercise', description: 'Open Library is an open', place: 'room 2 F6', importance: 'Medium', typeRepeat: 'everyday', users: 'quoc, hien, my' },\r\n    { id: 5, scheduleName: 'Create component', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 6, scheduleName: 'Meeting', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Home', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Medium', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 7, scheduleName: 'Go home', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F5', importance: 'Easy', typeRepeat: 'monthly', users: 'quoc, hien, my' },\r\n    { id: 8, scheduleName: 'Time work', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F6', importance: 'Easy', typeRepeat: 'monthly', users: 'quoc, hien, my' },\r\n    { id: 9, scheduleName: 'Time learning NestJS', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 10, scheduleName: 'Time eat', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Exercise', description: 'Open Library is an open', place: 'room 2 F5', importance: 'Medium', typeRepeat: 'everyday', users: 'quoc, hien, my' }\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/table/table.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  { id: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\r\n  { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n  { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n  { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n  { id: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\r\n  { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n  { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n  { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n  { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n  { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n    { id: 1, todoName: 'Read book', description: 'Open Library is an open', deadline: '01/01/2020', importance: 'Hard', category: 'Homework', status: 'Complate' },\r\n    { id: 2, todoName: 'Do homework', description: 'Open Library is an open', deadline: '01/02/2020', importance: 'Easy', category: 'Homework', status: 'Complate' },\r\n    { id: 3, todoName: 'Play game', description: 'Open Library is an open', deadline: '11/01/2020', importance: 'Hard', category: 'Game', status: 'Incomplate' },\r\n    { id: 4, todoName: 'Exercise', description: 'Open Library is an open', deadline: '01/05/2020', importance: 'Medium', category: 'Exercise', status: 'Complate' },\r\n    { id: 5, todoName: 'Create component', description: 'Open Library is an open', deadline: '01/01/2020', importance: 'Hard', category: 'Homework', status: 'Complate' },\r\n    { id: 6, todoName: 'Meeting', description: 'Open Library is an open', deadline: '11/11/2020', importance: 'Medium', category: 'Home', status: 'Incomplate' },\r\n    { id: 7, todoName: 'Go home', description: 'Open Library is an open', deadline: '18/3/2020', importance: 'Easy', category: 'Homework', status: 'Incomplate' },\r\n    { id: 8, todoName: 'Time work', description: 'Open Library is an open', deadline: '01/09/2020', importance: 'Easy', category: 'Homework', status: 'Complate' },\r\n    { id: 9, todoName: 'Time learning NestJS', description: 'Open Library is an open', deadline: '01/10/2020', importance: 'Hard', category: 'Homework', status: 'Incomplate' },\r\n    { id: 10, todoName: 'Time eat', description: 'Open Library is an open', deadline: '02/01/2020', importance: 'Medium', category: 'Exercise', status: 'Complate' }\r\n]"
            },
            {
                "name": "dataSource",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n      {\r\n        id: 1,\r\n        template_name: 'Template 1',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      {\r\n        id: 2,\r\n        template_name: 'Template 2',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      { \r\n        id: 3,\r\n        template_name: 'Template 3',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      {\r\n        id: 4,\r\n        template_name: 'Template 4',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n    ]"
            },
            {
                "name": "dataSourceTextOverWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/table/table.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    name: 'Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen ',\r\n    weight: 1.0079,\r\n    symbol: 'H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H ',\r\n  },\r\n  { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n  { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n  { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n  {\r\n    id: 5,\r\n    name:\r\n      'Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron ',\r\n    weight: 10.811,\r\n    symbol: 'B',\r\n  },\r\n  { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n  { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n  { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n  { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n  { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
            },
            {
                "name": "dataSourceTextOverWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        id: 1,\r\n        name: 'Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen ',\r\n        weight: 1.0079,\r\n        symbol: 'H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H ',\r\n    },\r\n    { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n    { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n    { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n    {\r\n        id: 5,\r\n        name:\r\n            'Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron ',\r\n        weight: 10.811,\r\n        symbol: 'B',\r\n    },\r\n    { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n    { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n    { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n    { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n    { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
            },
            {
                "name": "dates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "",
                "defaultValue": "[...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n})"
            },
            {
                "name": "dates",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "",
                "defaultValue": "[...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  urlTodo: 'http://192.168.4.230:3000/todo',\r\n  urlCategory: 'http://192.168.4.230:3000/category',\r\n  urlNotification: 'http://192.168.4.230:3000/notification',\r\n  urlEvent: 'http://192.168.4.230:3000/event',\r\n  urlSchedule: 'http://192.168.4.230:3000/schedule',\r\n  urlCountNotification: 'http://192.168.4.230:3000/notification/total-unread',\r\n  urlEquipment: 'http://192.168.4.230:3000/equipment',\r\n  snackbarDelayTime: 700000,\r\n  urlDetailTodo: \"http://192.168.4.230:3000/todo\",\r\n  urlSocket : \"192.168.4.224:3001\",\r\n  urlUser : \"http://192.168.4.230:3000/user\",\r\n  urlImport: \"http://192.168.4.29:8080/api/exceltemplate\",\r\n  urlExcelTemplateDetail : \"http://192.168.4.29:8080/api/exceltemplatedetail\",\r\n}"
            },
            {
                "name": "environments",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "serve/index.ts",
                "type": "object",
                "defaultValue": "{\r\n  port: 4200,\r\n}"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Meeting', categoryId: 1 },\r\n  { categoryName: 'Event', categoryId: 2 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n    { categoryName: 'Meeting', categoryId: 1 },\r\n    { categoryName: 'Event', categoryId: 2 },\r\n  ]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Meeting', categoryId: 1 },\r\n  { categoryName: 'Event', categoryId: 2 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Angular',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'React',\r\n    value: '2'\r\n  },\r\n  {\r\n    label: 'Ruby on rails',\r\n    value: '3'\r\n  },\r\n  {\r\n    label: 'Laravel',\r\n    value: '4'\r\n  },\r\n  {\r\n    label: 'Python',\r\n    value: '5'\r\n  },\r\n]"
            },
            {
                "name": "fakeData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
            },
            {
                "name": "fakeLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "string",
                "defaultValue": "'Your option'"
            },
            {
                "name": "getCategories",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.categories\r\n)"
            },
            {
                "name": "getCountNotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/notification.selector.ts",
                "type": "",
                "defaultValue": "createSelector(getnotification, (state: NotificationState) => state.countTotal)"
            },
            {
                "name": "getDataFilterByCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleFilter\r\n)"
            },
            {
                "name": "getDataFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleFilter\r\n)"
            },
            {
                "name": "getDelSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.delSchedule\r\n)"
            },
            {
                "name": "getDelScheduleReal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleRealAfterDel\r\n)"
            },
            {
                "name": "getEventsAfterTomorrow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsAfterTomorrow\r\n)"
            },
            {
                "name": "getEventsToday",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsToday\r\n)"
            },
            {
                "name": "getEventsTomorrow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsTomorrow\r\n)"
            },
            {
                "name": "getFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.filter\r\n)"
            },
            {
                "name": "getIsRead",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/notification.selector.ts",
                "type": "",
                "defaultValue": "createSelector(getnotification, (state: NotificationState) => state.isRead)"
            },
            {
                "name": "getLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.isLoading\r\n)"
            },
            {
                "name": "getnotification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/notification.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  notificationFeture,\r\n  (state: NotificationState) => state\r\n)"
            },
            {
                "name": "getSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  scheduleFeature,\r\n  (state: ScheduleState) => state\r\n)"
            },
            {
                "name": "getSchedules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.listSchedule\r\n)"
            },
            {
                "name": "getTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/todo.selector.ts",
                "type": "",
                "defaultValue": "createSelector(todoFeature,(state :TodoState) => state)"
            },
            {
                "name": "importance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "string",
                "defaultValue": "'Importance'"
            },
            {
                "name": "importance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "string",
                "defaultValue": "'Importance'"
            },
            {
                "name": "importance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "string",
                "defaultValue": "'Importance'"
            },
            {
                "name": "importance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "object",
                "defaultValue": "{content :'Importance'}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "SnackbarState",
                "defaultValue": "{\r\n  show: false,\r\n}"
            },
            {
                "name": "initNotificationState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/notification.reducer.ts",
                "type": "NotificationState",
                "defaultValue": "{\r\n  listNotification: [],\r\n  pagination: {\r\n    total: 0,\r\n    page: 1,\r\n    pageSize: 10,\r\n  },\r\n  isLoading: false,\r\n  listEvent: [],\r\n  selectedEvent: '',\r\n  isRead: -1,\r\n}"
            },
            {
                "name": "initScheduleState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/schedule.reducer.ts",
                "type": "ScheduleState",
                "defaultValue": "{\r\n  userId: 1,\r\n  listSchedule: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 20,\r\n  },\r\n  listImportance: [\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ],\r\n  isLoading: false,\r\n  filter: {\r\n    textSearch: '',\r\n    importance: '',\r\n    category: [],\r\n    from: '',\r\n    to: '',\r\n    fromDateList: '',\r\n    toDateList: '',\r\n  },\r\n  eventsToday: [],\r\n  eventsTomorrow: [],\r\n  eventsAfterTomorrow: [],\r\n  delSchedule: [],\r\n  categories: [],\r\n  scheduleFilter: [],\r\n}"
            },
            {
                "name": "initTodoState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/todo.reducer.ts",
                "type": "TodoState",
                "defaultValue": "{\r\n  userId : 1,\r\n  todos: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total : 20,\r\n  },\r\n  filter :{\r\n    textSearch :\"\",\r\n    category : [],\r\n    status :\"\",\r\n    fromDate :\"\",\r\n    importance :\"\",\r\n    toDate : \"\"\r\n  },\r\n  isLoading: false,\r\n  listImportance :[\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ]\r\n}"
            },
            {
                "name": "labelCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelCategory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelExpiration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Expiration',\r\n  size: 17,\r\n  color: 'black',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelFromDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelFromDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelFromDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelFromDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelImportance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Option:',\r\n  size: 17,\r\n  color: 'black',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelQuestion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'Question:',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/label/label.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content:\"Label Component\",\r\n  size: 30,\r\n  color: \"\",\r\n  backgroundColor: \"\"\r\n}"
            },
            {
                "name": "labelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
            },
            {
                "name": "labelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n    labelImportance: {\r\n      content: 'Importance',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelFromDate: {\r\n      content: 'From date',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelToDate: {\r\n      content: 'To date',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelCategory: {\r\n      content: 'Category',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n  }"
            },
            {
                "name": "labelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
            },
            {
                "name": "labelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
            },
            {
                "name": "labelScheduleFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "LabelFilterSchedule<LabelInterface>",
                "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
            },
            {
                "name": "labelToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "labelToDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "LabelInterface",
                "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
            },
            {
                "name": "materialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/material-custom/material-custom.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  MatPseudoCheckboxModule,\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatAutocompleteModule,\r\n  MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatMenuModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatProgressBarModule,\r\n  MatDialogModule,\r\n  MatTooltipModule,\r\n  MatSnackBarModule,\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatPaginatorModule,\r\n  MatBadgeModule,\r\n  MatCheckboxModule,\r\n]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/login.reducer.ts",
                "type": "MetaReducer[]",
                "defaultValue": "[clearState]"
            },
            {
                "name": "mock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/setup-jest.ts",
                "type": "",
                "defaultValue": "() => {\r\n  let storage: { [key: string]: string } = {};\r\n  return {\r\n    getItem: (key: string) => (key in storage ? storage[key] : null),\r\n    setItem: (key: string, value: string) => (storage[key] = value || \"\"),\r\n    removeItem: (key: string) => delete storage[key],\r\n    clear: () => (storage = {}),\r\n  };\r\n}"
            },
            {
                "name": "notificationFeture",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/notification.selector.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.notification"
            },
            {
                "name": "nth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "",
                "defaultValue": "(d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n}"
            },
            {
                "name": "nth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "",
                "defaultValue": "(d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n}"
            },
            {
                "name": "OpenSnackbars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/snackbar.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Snackbar] Open Snackbars',\r\n  props<{\r\n    config: {\r\n      message: string;\r\n      action?: string;\r\n      config?: MatSnackBarConfig;\r\n    };\r\n  }>()\r\n)"
            },
            {
                "name": "OpenSnackbarsFromEffect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/snackbar.actions.ts",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Snackbar] Open Snackbars From Effect',\r\n  props<{\r\n    config: {\r\n      message: string;\r\n      action?: string;\r\n      config?: MatSnackBarConfig;\r\n    };\r\n  }>()\r\n)"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-group/button-group.stories.ts",
                "type": "IButtonGroup[]",
                "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
            },
            {
                "name": "placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "string",
                "defaultValue": "'search todo...'"
            },
            {
                "name": "placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "string",
                "defaultValue": "'search todo...'"
            },
            {
                "name": "placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "string",
                "defaultValue": "'search todo...'"
            },
            {
                "name": "placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/search/search.stories.ts",
                "type": "string",
                "defaultValue": "'Enter text to search'"
            },
            {
                "name": "placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "string",
                "defaultValue": "'search todo...'"
            },
            {
                "name": "placeholderFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "PlaceholderFilterSchedule",
                "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'importance',\r\n    titleCategory: 'category',\r\n  }"
            },
            {
                "name": "placeholderFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "PlaceholderFilterSchedule",
                "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
            },
            {
                "name": "placeholderFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "PlaceholderFilterSchedule",
                "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
            },
            {
                "name": "placeholderFilterSchedule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "PlaceholderFilterSchedule",
                "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "scheduleDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                "type": "ScheduleDetail",
                "defaultValue": "{\r\n  scheduleId: '12',\r\n  title: 'Schedule detail',\r\n  description: 'description',\r\n  startDate: '',\r\n  dueDate: '',\r\n  timeDueRepeat: '14:30',\r\n  timeStartRepeat: '15:30',\r\n  createBy: '1',\r\n  createdByName: 'nghia',\r\n  scheduleCategoryId: '15',\r\n  scheduleCategoryName: 'meeting',\r\n  created: '2020-01-01',\r\n  modified: '2020-01-01',\r\n  place: 'F4',\r\n  important: 'Hight',\r\n  equipmentNames: '',\r\n  type: 'Normal',\r\n  valueRepeat: '',\r\n  userNames: 'nghia nghia',\r\n}"
            },
            {
                "name": "scheduleFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/schedule.selector.ts",
                "type": "",
                "defaultValue": "(state: AppState) => state.schedule"
            },
            {
                "name": "scheduleTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                "type": "string",
                "defaultValue": "'Tuesday, November 10, 11:59 AM - 12:50 PM'"
            },
            {
                "name": "selectEquipmentFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
            },
            {
                "name": "selectEquipmentFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
            },
            {
                "name": "selectEquipmentFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  {\r\n    categoryName: 'laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
            },
            {
                "name": "selectImportantFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
            },
            {
                "name": "selectImportantFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
            },
            {
                "name": "selectImportantFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'normal',\r\n    value: '2',\r\n  },\r\n]"
            },
            {
                "name": "selectMonthlyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[]"
            },
            {
                "name": "selectMonthlyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[]"
            },
            {
                "name": "selectMonthlyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[]"
            },
            {
                "name": "selectTypeScheduleFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n]"
            },
            {
                "name": "selectTypeScheduleFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n]"
            },
            {
                "name": "selectTypeScheduleFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  {\r\n    label: 'meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'event',\r\n    value: '2',\r\n  },\r\n]"
            },
            {
                "name": "selectUserIdsFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "Category[]",
                "defaultValue": "[\r\n  {\r\n    categoryName: 'user 1',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'user 2',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'user 3',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'user 4',\r\n    categoryId: 4,\r\n  },\r\n]"
            },
            {
                "name": "selectWeekly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts",
                "type": "string[]",
                "defaultValue": "[\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n]"
            },
            {
                "name": "selectWeeklyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n]"
            },
            {
                "name": "selectWeeklyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n]"
            },
            {
                "name": "selectWeeklyFake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "LabelledValue[]",
                "defaultValue": "[]"
            },
            {
                "name": "snackbarERROR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/snackbar.constants.ts",
                "type": "MatSnackBarConfig",
                "defaultValue": "{\r\n  verticalPosition: 'top',\r\n  horizontalPosition: 'right',\r\n  panelClass: 'sanckbar-error',\r\n}"
            },
            {
                "name": "snackbarINFO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/snackbar.constants.ts",
                "type": "MatSnackBarConfig",
                "defaultValue": "{\r\n  verticalPosition: 'top',\r\n  horizontalPosition: 'right',\r\n  panelClass: 'sanckbar-info',\r\n}"
            },
            {
                "name": "snackbarSUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/constants/snackbar.constants.ts",
                "type": "MatSnackBarConfig",
                "defaultValue": "{\r\n  verticalPosition: 'bottom',\r\n  horizontalPosition: 'center',\r\n  panelClass: 'sanckbar-success',\r\n}"
            },
            {
                "name": "titleGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "string",
                "defaultValue": "'Status'"
            },
            {
                "name": "titleGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "string",
                "defaultValue": "''"
            },
            {
                "name": "titleGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "string",
                "defaultValue": "'Status'"
            },
            {
                "name": "titleGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "string",
                "defaultValue": "'Status'"
            },
            {
                "name": "todoFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/todo.selector.ts",
                "type": "",
                "defaultValue": "(state : AppState) => state.todo"
            },
            {
                "name": "transform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts",
                "type": "",
                "defaultValue": "(data = []) => {\r\n  const mappedData = {};\r\n  data.forEach((item) => (mappedData[item.value] = item));\r\n  return mappedData;\r\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.component.ts",
                "type": "",
                "defaultValue": "XLSX"
            },
            {
                "name": "vote",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "[]",
                "defaultValue": "[\r\n  {id: 1, name:'Đi nhậu'},\r\n  {id: 2, name:'Đi dạo phố'},\r\n  {id: 3, name:'Đi shopping'},\r\n]"
            }
        ],
        "functions": [
            {
                "name": "clearState",
                "file": "src/app/store/reducers/login.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "type": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "noticeReducer",
                "file": "src/app/store/reducers/notification.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "randomObj",
                "file": "src/app/store/reducers/schedule.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "obj",
                        "type": "any"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "obj",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "routes",
                "file": "serve/routes.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "Router"
            },
            {
                "name": "scheduleReducer",
                "file": "src/app/store/reducers/schedule.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "snackbarReducer",
                "file": "src/app/store/reducers/snackbar.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "todoReducer",
                "file": "src/app/store/reducers/todo.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "TodoState",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AOA",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "any[][]",
                "file": "src/app/shared/components/list-excel/list-excel.component.ts",
                "description": "",
                "kind": 166
            },
            {
                "name": "NotificationAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "NotificationAdd | NotificationAddSuccess | NotificationAddFail | NotificationLoadAll | NotificationLoadAllSuccess | NotificationLoadAllFail | NotificationUpdate | NotificationUpdateSuccess | NotificationUpdateFail | NotificationDelete | NotificationDeleteSuccess | NotificationAddFail | NotificationFilterEvent | NotificationFilterEventSuccess | NotificationFilterEventFail | NotificationFilterStatus | NotificationFilterStatusFail | NotificationFilterStatusSuccess | NotificationGetEvent | NotificationGetEventSuccess | NotificationGetEventFail | CountNotification | CountNotificationSuccess | CountNotificationFail",
                "file": "src/app/store/actions/notification.action.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ScheduleAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ScheduleLoadAll | ScheduleLoadAllSuccess | ScheduleLoadAllFail | ScheduleLoadEventsToday | ScheduleLoadEventsTodayFail | ScheduleLoadEventsTodaySuccess | ScheduleLoadEventsTomorrow | ScheduleLoadEventsTomorrowFail | ScheduleLoadEventsTomorrowSuccess | ScheduleLoadEventsAfterTomorrow | ScheduleLoadEventsAfterTomorrowFail | ScheduleLoadEventsAfterTomorrowSuccess | ScheduleDeleteEvent | ScheduleDeleteEventSuccess | ScheduleDeleteEventFail | ScheduleUndoDeleteEvent | ScheduleUndoDeleteEventSuccess | ScheduleUndoDeleteEventFail | ScheduleCategoryLoadAll | ScheduleCategoryLoadAllSuccess | ScheduleCategoryLoadAllFail | ScheduleFilterByCategory | ScheduleFilterByCategorySuccess | ScheduleFilterByCategoryFail | ScheduleAdd | ScheduleAddSuccess | ScheduleAddFail | CheckEquipment | CheckEquipmentSuccess | CheckEquipmentFail | ScheduleFilter | ScheduleFilterSuccess | ScheduleFilterFail",
                "file": "src/app/store/actions/schedule.action.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "TodoAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "TodoAdd | TodoAddSuccess | TodoAddFail | TodoUpdate | TodoUpdateFail | TodoUpdateSuccess | TodoDelete | TodoDeleteFail | TodoDeleteSuccess | TodoFilter | TodoFilterFail | TodoFilterSuccess | CategoryByUser | CategoryByUserSuccess | CategoryByUserFail",
                "file": "src/app/store/actions/todo.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "ELogin",
                "childs": [
                    {
                        "name": "LOGOUT",
                        "value": "[App] logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/login.action.ts"
            },
            {
                "name": "ENotification",
                "childs": [
                    {
                        "name": "LOADING",
                        "value": "[Notification] Loading"
                    },
                    {
                        "name": "LOAD_SUCCESS",
                        "value": "[Notification] load success"
                    },
                    {
                        "name": "LOAD_FAIL",
                        "value": "[Notification] load fail"
                    },
                    {
                        "name": "ADD",
                        "value": "[Notification] Adding"
                    },
                    {
                        "name": "ADD_SUCCESS",
                        "value": "[Notification] add success"
                    },
                    {
                        "name": "ADD_FAIL",
                        "value": "[Notification] add fail"
                    },
                    {
                        "name": "UPDATE",
                        "value": "[Notification] Updating"
                    },
                    {
                        "name": "UPDATE_SUCCESS",
                        "value": "[Notification] update success"
                    },
                    {
                        "name": "UPDATE_FAIL",
                        "value": "[Notification] update fail"
                    },
                    {
                        "name": "DELETE",
                        "value": "[Notification] Deleting"
                    },
                    {
                        "name": "DELETE_SUCCESS",
                        "value": "[Notification] delete success"
                    },
                    {
                        "name": "DELETE_FAIL",
                        "value": "[Notification] delete fail"
                    },
                    {
                        "name": "LOAD_ALL",
                        "value": "[Notification] Loading All"
                    },
                    {
                        "name": "LOAD_ALL_SUCCESS",
                        "value": "[Notification] load all success"
                    },
                    {
                        "name": "LOAD_ALL_FAIL",
                        "value": "[Notification] load all fail"
                    },
                    {
                        "name": "FILTER_STATUS",
                        "value": "[Notification] Filter Status Notification"
                    },
                    {
                        "name": "FILTER_STATUS_SUCCESS",
                        "value": "[Notification] Filter status notification success"
                    },
                    {
                        "name": "FILTER_STATUS_FAIL",
                        "value": "[Notification] Filter status notification fail"
                    },
                    {
                        "name": "FILTER_EVENT",
                        "value": "[Notification] Filter Event Notification"
                    },
                    {
                        "name": "FILTER_EVENT_SUCCESS",
                        "value": "[Notification] Filter event notification success"
                    },
                    {
                        "name": "FILTER_EVENT_FAIL",
                        "value": "[Notification] Filter event notification fail"
                    },
                    {
                        "name": "GET_EVENT",
                        "value": "[Notification] Get All Event"
                    },
                    {
                        "name": "GET_EVENT_SUCCESS",
                        "value": "[NOTIFICATION] Get Event notification success"
                    },
                    {
                        "name": "GET_EVENT_FAIL",
                        "value": "[NOTIFICATION] Get Event notification fail"
                    },
                    {
                        "name": "COUNT_NOTIFICATIONS",
                        "value": "[Notification] Count notification "
                    },
                    {
                        "name": "COUNT_NOTIFICATIONS_SUCCESS",
                        "value": "[Notification] Count notification  success"
                    },
                    {
                        "name": "COUNT_NOTIFICATIONS_FAIL",
                        "value": "[Notification] Count notification  fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/notification.action.ts"
            },
            {
                "name": "ESchedule",
                "childs": [
                    {
                        "name": "LOAD_ALL",
                        "value": "[Schedule] Load all"
                    },
                    {
                        "name": "LOAD_ALL_SUCCESS",
                        "value": "[Schedule] Load all success"
                    },
                    {
                        "name": "LOAD_ALL_FAIL",
                        "value": "[Schedule] Load all fail"
                    },
                    {
                        "name": "LOAD_EVENTS_TODAY",
                        "value": "[Schedule] Load events today"
                    },
                    {
                        "name": "LOAD_EVENTS_TODAY_FAIL",
                        "value": "[Schedule] Load events today fail"
                    },
                    {
                        "name": "LOAD_EVENTS_TODAY_SUCCESS",
                        "value": "[Schedule] Load events today success"
                    },
                    {
                        "name": "LOAD_EVENTS_TOMORROW",
                        "value": "[Schedule] Load events tomorrow"
                    },
                    {
                        "name": "LOAD_EVENTS_TOMORROW_FAIL",
                        "value": "[Schedule] Load events tomorrow fail"
                    },
                    {
                        "name": "LOAD_EVENTS_TOMORROW_SUCCESS",
                        "value": "[Schedule] Load events tomorrow success"
                    },
                    {
                        "name": "LOAD_EVENTS_AFTER_TOMORROW",
                        "value": "[Schedule] Load events after tomorrow"
                    },
                    {
                        "name": "LOAD_EVENTS_AFTER_TOMORROW_FAIL",
                        "value": "[Schedule] Load events after tomorrow fail"
                    },
                    {
                        "name": "LOAD_EVENTS_AFTER_TOMORROW_SUCCESS",
                        "value": "[Schedule] Load events after tomorrow success"
                    },
                    {
                        "name": "DELETE_EVENT",
                        "value": "[Schedule] Delete event"
                    },
                    {
                        "name": "DELETE_EVENT_SUCCESS",
                        "value": "[Schedule] Delete event success"
                    },
                    {
                        "name": "DELETE_EVENT_FAIL",
                        "value": "[Schedule] Delete event fail"
                    },
                    {
                        "name": "UNDO_DELETE_EVENT",
                        "value": "[Schedule] Undo delete event"
                    },
                    {
                        "name": "UNDO_DELETE_EVENT_SUCCESS",
                        "value": "[Schedule] Undo delete event success"
                    },
                    {
                        "name": "UNDO_DELETE_EVENT_FAIL",
                        "value": "[Schedule] Undo delete event fail"
                    },
                    {
                        "name": "LOAD_CATEGORY",
                        "value": "[Schedule] Load all category schedule"
                    },
                    {
                        "name": "LOAD_CATEGORY_SUCCESS",
                        "value": "[Schedule] Load all category schedule success"
                    },
                    {
                        "name": "LOAD_CATEGORY_FAIL",
                        "value": "[Schedule] Load all category schedule fail"
                    },
                    {
                        "name": "FILTER_BY_CATEGORY",
                        "value": "[Schedule] Filter by category schedule"
                    },
                    {
                        "name": "FILTER_BY_CATEGORY_SUCCESS",
                        "value": "[Schedule] Filter by category schedule success"
                    },
                    {
                        "name": "FILTER_BY_CATEGORY_FAIL",
                        "value": "[Schedule] Filter by category schedule fail"
                    },
                    {
                        "name": "ADD",
                        "value": "[Schedule] Adding"
                    },
                    {
                        "name": "ADD_SUCCESS",
                        "value": "[Schedule] Add success"
                    },
                    {
                        "name": "ADD_FAIL",
                        "value": "[Schedule] Add fail"
                    },
                    {
                        "name": "CHECK_EQUIPMENT",
                        "value": "[Check_equipment] Checking"
                    },
                    {
                        "name": "CHECK_EQUIPMENT_SUCCESS",
                        "value": "[Check_equipment] Check success"
                    },
                    {
                        "name": "CHECK_EQUIPMENT_FAIL",
                        "value": "[Check_equipment] Check fail"
                    },
                    {
                        "name": "FILTER",
                        "value": "[Schedule] filtering schedule"
                    },
                    {
                        "name": "FILTER_SUCCESS",
                        "value": "[Schedule] filter schedule success"
                    },
                    {
                        "name": "FILTER_FAIL",
                        "value": "[Schedule] filter schedule fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/schedule.action.ts"
            },
            {
                "name": "ETodo",
                "childs": [
                    {
                        "name": "ADD",
                        "value": "[TODO] adding"
                    },
                    {
                        "name": "ADD_SUCCESS",
                        "value": "[TODO] add success"
                    },
                    {
                        "name": "ADD_FAIL",
                        "value": "[TODO] add fail"
                    },
                    {
                        "name": "UPDATE",
                        "value": "[TODO] updating"
                    },
                    {
                        "name": "UPDATE_SUCCESS",
                        "value": "[TODO] update success"
                    },
                    {
                        "name": "UPDATE_FAIL",
                        "value": "[TODO] update fail"
                    },
                    {
                        "name": "DELETE",
                        "value": "[TODO] deleting"
                    },
                    {
                        "name": "DELETE_SUCCESS",
                        "value": "[TODO] delete success"
                    },
                    {
                        "name": "DELETE_FAIL",
                        "value": "[TODO] delete fail"
                    },
                    {
                        "name": "Filter",
                        "value": "[TODO] filtering todo"
                    },
                    {
                        "name": "Filter_SUCCESS",
                        "value": "[TODO] filter todo success"
                    },
                    {
                        "name": "Filter_FAIL",
                        "value": "[TODO] filter todo fail"
                    },
                    {
                        "name": "LOAD_CATEGORY",
                        "value": "[CATEGORY] loading category by user"
                    },
                    {
                        "name": "LOAD_CATEGORY_SUCCESS",
                        "value": "[CATEGORY] load category by user success"
                    },
                    {
                        "name": "LOAD_CATEGORY_FAIL",
                        "value": "[CATEGORY] load category by user fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/todo.action.ts"
            },
            {
                "name": "MessageConstants",
                "childs": [
                    {
                        "name": "TODO_FILTER_FAIL",
                        "value": "Todo filter fail"
                    },
                    {
                        "name": "TODO_ADD_FAIL",
                        "value": "Todo add fail"
                    },
                    {
                        "name": "TODO_UPDATE_FAIL",
                        "value": "Todo update fail"
                    },
                    {
                        "name": "TODO_DELETE_FAIL",
                        "value": "Todo delete fail"
                    },
                    {
                        "name": "SCHEDULE_FILTER_FAIL",
                        "value": "Schedule filter fail"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/shared/constants/message.contants.ts"
            },
            {
                "name": "SortType",
                "childs": [
                    {
                        "name": "asc",
                        "value": "asc"
                    },
                    {
                        "name": "desc",
                        "value": "desc"
                    },
                    {
                        "name": "none",
                        "value": "none"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/models/column.i.ts"
            },
            {
                "name": "StatusNotification",
                "childs": [
                    {
                        "name": "ALL",
                        "value": "All"
                    },
                    {
                        "name": "READ",
                        "value": "Alrealy Read"
                    },
                    {
                        "name": "UNREAD",
                        "value": " Unread"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/models/status-notification.e.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/reducers/snackbar.reducer.ts": [
                {
                    "name": "_snackbarReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/snackbar.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(SnackbarActions.OpenSnackbars, (state, action) => {\r\n    return { ...state, show: true };\r\n  }),\r\n\r\n  on(SnackbarActions.CloseSnackbars, (state, action) => {\r\n    return { ...state, show: false };\r\n  })\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/snackbar.reducer.ts",
                    "type": "SnackbarState",
                    "defaultValue": "{\r\n  show: false,\r\n}"
                }
            ],
            "src/app/shared/components/calendar/calendar.stories.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/calendar/calendar.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n      label: '<i class=\"material-icons\">event_note</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons s-10\">edit</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n    {\r\n      label: '<i class=\"material-icons\">delete</i>',\r\n      onClick: ({ event }: { event: CalendarEvent }): void => {\r\n        alert(event);\r\n      },\r\n    },\r\n  ]"
                }
            ],
            "serve/index.ts": [
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "serve/index.ts",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "environments",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "serve/index.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  port: 4200,\r\n}"
                }
            ],
            "src/app/store/app-state.ts": [
                {
                    "name": "appReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app-state.ts",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  todo: todoReducer,\r\n  notification: noticeReducer,\r\n  schedule: scheduleReducer,\r\n  snackbar: snackbarReducer,\r\n}"
                }
            ],
            "src/app/bootstraps/bootstrap.ts": [
                {
                    "name": "bootstrapsEnvironment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/bootstraps/bootstrap.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    app: [AppComponent]\r\n  }"
                }
            ],
            "src/app/shared/components/filter-notification/filter-notification.stories.ts": [
                {
                    "name": "btnGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
                },
                {
                    "name": "cateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n    {\r\n      label: 'All',\r\n      value: 'all',\r\n    },\r\n    {\r\n      label: 'System',\r\n      value: 'system'\r\n    },\r\n    {\r\n      label: 'Todo',\r\n      value: 'todo'\r\n    },\r\n    {\r\n      label: 'Schedule',\r\n      value: 'schedule'\r\n    },\r\n    {\r\n      label: 'Workflow',\r\n      value: 'workflow'\r\n    },\r\n]"
                }
            ],
            "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts": [
                {
                    "name": "btnGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n      {\r\n        value: 'all',\r\n        displayValue: 'All',\r\n      },\r\n      {\r\n        value: 'read',\r\n        displayValue: 'Already Read',\r\n      },\r\n      {\r\n        value: 'unread',\r\n        displayValue: 'Unread',\r\n      },\r\n      {\r\n        value: 'remove',\r\n        displayValue: 'Remove ',\r\n      },\r\n    ]"
                },
                {
                    "name": "cateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n      {\r\n        label: 'All',\r\n        value: 'all',\r\n      },\r\n      {\r\n        label: 'System',\r\n        value: 'system',\r\n      },\r\n      {\r\n        label: 'Todo',\r\n        value: 'todo',\r\n      },\r\n      {\r\n        label: 'Schedule',\r\n        value: 'schedule',\r\n      },\r\n      {\r\n        label: 'Workflow',\r\n        value: 'workflow',\r\n      },\r\n    ]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n      {\r\n        title: 'Stt',\r\n        dataIndex: 'Stt',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Họ và tên nhân viên',\r\n        dataIndex: 'Employees',\r\n        sort: true,\r\n      },\r\n      {\r\n        title: 'Tên vợ / chồng ',\r\n        dataIndex: 'Employees1'\r\n      },\r\n      {\r\n        title: 'Tên con',\r\n        dataIndex: 'Employees2',\r\n      },\r\n      {\r\n        title: 'Tuổi',\r\n        dataIndex: 'Employees3',\r\n      },\r\n      {\r\n        title: 'Đăng ký suất ăn',\r\n        dataIndex: 'Employees4',\r\n      },\r\n      {\r\n        title: 'Không đăng ký suất ăn',\r\n        dataIndex: 'Employees5',\r\n      },\r\n    ]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n      {\r\n        Stt: '1',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'Spider men',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '2',\r\n        Employees: 'n_anh',\r\n        Employees1: 'Iron men',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '3',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '4',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n      {\r\n        Stt: '5',\r\n        Employees: 'nv_quoc',\r\n        Employees1: 'abc',\r\n        Employees3: '3',\r\n        Employees4: 'X',\r\n        Employees5: '',\r\n      },\r\n    ]"
                }
            ],
            "src/app/shared/components/notification-list/notification-list.stories.ts": [
                {
                    "name": "btnGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
                },
                {
                    "name": "cateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'All',\r\n    value: 'all',\r\n  },\r\n  {\r\n    label: 'System',\r\n    value: 'system',\r\n  },\r\n  {\r\n    label: 'Todo',\r\n    value: 'todo',\r\n  },\r\n  {\r\n    label: 'Schedule',\r\n    value: 'schedule',\r\n  },\r\n  {\r\n    label: 'Workflow',\r\n    value: 'workflow',\r\n  },\r\n]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'From',\r\n    dataIndex: 'from',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Sub description',\r\n    dataIndex: 'subDescription',\r\n  },\r\n]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/notification-list/notification-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n  {\r\n    title: 'Update your account',\r\n    from: 'nv_quoc',\r\n    time: '08:00:00 01/01/2020',\r\n    subDescription: 'Please update your information',\r\n  },\r\n]"
                }
            ],
            "src/app/shared/components/list-excel/list-excel.stories.ts": [
                {
                    "name": "btnGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n      {\r\n        value: 'all',\r\n        displayValue: 'All',\r\n      },\r\n      {\r\n        value: 'read',\r\n        displayValue: 'Already Read',\r\n      },\r\n      {\r\n        value: 'unread',\r\n        displayValue: 'Unread',\r\n      },\r\n      {\r\n        value: 'remove',\r\n        displayValue: 'Remove ',\r\n      },\r\n    ]"
                },
                {
                    "name": "cateSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n      {\r\n        label: 'All',\r\n        value: 'all',\r\n      },\r\n      {\r\n        label: 'System',\r\n        value: 'system',\r\n      },\r\n      {\r\n        label: 'Todo',\r\n        value: 'todo',\r\n      },\r\n      {\r\n        label: 'Schedule',\r\n        value: 'schedule',\r\n      },\r\n      {\r\n        label: 'Workflow',\r\n        value: 'workflow',\r\n      },\r\n    ]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n      {\r\n        title: 'Template Name',\r\n        dataIndex: 'template_name',\r\n      },\r\n      {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date'\r\n      }\r\n    ]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-excel/list-excel.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n      {\r\n        id: 1,\r\n        template_name: 'Template 1',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      {\r\n        id: 2,\r\n        template_name: 'Template 2',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      { \r\n        id: 3,\r\n        template_name: 'Template 3',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n      {\r\n        id: 4,\r\n        template_name: 'Template 4',\r\n        description: '123',\r\n        date: '02/02/2020',\r\n      },\r\n    ]"
                }
            ],
            "src/app/modules/schedule-page/schedule-page.component.ts": [
                {
                    "name": "buttonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Meeting', categoryId: 1 },\r\n  { categoryName: 'Event', categoryId: 2 },\r\n]"
                },
                {
                    "name": "labelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-page/schedule-page.component.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
                }
            ],
            "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts": [
                {
                    "name": "buttonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n    buttonSubmit: {\r\n      colorButton: 'primary',\r\n      colorMouseOver: 'primary',\r\n      colorMouseOut: 'primary',\r\n      type: 'submit',\r\n      text: 'Filter',\r\n    },\r\n    buttonReset: {\r\n      colorButton: 'basic',\r\n      colorMouseOver: 'basic',\r\n      colorMouseOut: 'basic',\r\n      type: 'reset',\r\n      text: 'Clear',\r\n    },\r\n  }"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n    {\r\n      label: 'Normal',\r\n      value: 'Normal',\r\n    },\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n  ]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n    { categoryName: 'Meeting', categoryId: 1 },\r\n    { categoryName: 'Event', categoryId: 2 },\r\n  ]"
                },
                {
                    "name": "labelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n    labelImportance: {\r\n      content: 'Importance',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelFromDate: {\r\n      content: 'From date',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelToDate: {\r\n      content: 'To date',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n    labelCategory: {\r\n      content: 'Category',\r\n      size: 17,\r\n      color: '',\r\n      backgroundColor: '',\r\n    },\r\n  }"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                    "type": "PlaceholderFilterSchedule",
                    "defaultValue": "{\r\n    placeholderSearch: 'search schedule...',\r\n    titleImportance: 'importance',\r\n    titleCategory: 'category',\r\n  }"
                }
            ],
            "src/app/shared/components/poll-list/poll-list.stories.ts": [
                {
                    "name": "buttonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {\r\n        title: 'STT',\r\n        dataIndex: 'stt',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Question',\r\n        dataIndex: 'question',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Expriration',\r\n        dataIndex: 'expriration',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Status',\r\n        dataIndex: '',\r\n    },\r\n    {\r\n        title: 'Created by',\r\n        dataIndex: 'createdby',\r\n        sort: true,\r\n    },\r\n]"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'medium',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: 'low',\r\n    value: '3',\r\n  },\r\n]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 1, stt: '1', question: 'Giải đấu Liên Quân', expriration: '31/12/2020 17:30', status: 'In process', createdby: 'Phuong Dung'},\r\n  { id: 2, stt: '2', question: 'Cuối tuần bạn muốn đi đâu?', expriration: '25/12/2020 11:30',  status: 'In process', createdby: 'Thach monus'},\r\n  { id: 3, stt: '3', question: 'Tiệc Noel ăn gì?', expriration: '18/12/2020 17:30', status: 'In process', createdby: 'nc_nghi'},\r\n  { id: 4, stt: '4', question: 'Teambuilding', expriration: '31/11/2020 17:30', status: 'Expired', createdby: 'Phuong Dung'},\r\n  { id: 5, stt: '5', question: 'Mùa hè sôi động', expriration: '25/5/2020 17:30', status: 'Expired', createdby: 'Phuong Dung'},\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "labelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "PlaceholderFilterSchedule",
                    "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
                },
                {
                    "name": "vote",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/poll-list/poll-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {id: 1, name:'Đi nhậu'},\r\n  {id: 2, name:'Đi dạo phố'},\r\n  {id: 3, name:'Đi shopping'},\r\n]"
                }
            ],
            "src/app/shared/components/schedule-filter/schedule-filter.stories.ts": [
                {
                    "name": "buttonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Meeting', categoryId: 1 },\r\n  { categoryName: 'Event', categoryId: 2 },\r\n]"
                },
                {
                    "name": "labelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                    "type": "PlaceholderFilterSchedule",
                    "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
                }
            ],
            "src/app/shared/components/schedule-list/schedule-list.stories.ts": [
                {
                    "name": "buttonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {\r\n        title: 'Title Schedule',\r\n        dataIndex: 'scheduleName',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Time',\r\n        dataIndex: 'time',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n    },\r\n    {\r\n        title: 'Place',\r\n        dataIndex: 'place',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Importance',\r\n        dataIndex: 'importance',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Type Repeat',\r\n        dataIndex: 'typeRepeat',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Users',\r\n        dataIndex: 'users',\r\n    },\r\n]"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'medium',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: 'low',\r\n    value: '3',\r\n  },\r\n]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    { id: 1, scheduleName: 'Read book', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework',  description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 2, scheduleName: 'Do homework', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Easy', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 3, scheduleName: 'Play game', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Game', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 4, scheduleName: 'Exercise', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Exercise', description: 'Open Library is an open', place: 'room 2 F6', importance: 'Medium', typeRepeat: 'everyday', users: 'quoc, hien, my' },\r\n    { id: 5, scheduleName: 'Create component', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 6, scheduleName: 'Meeting', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Home', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Medium', typeRepeat: 'weekly', users: 'quoc, hien, my' },\r\n    { id: 7, scheduleName: 'Go home', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F5', importance: 'Easy', typeRepeat: 'monthly', users: 'quoc, hien, my' },\r\n    { id: 8, scheduleName: 'Time work', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F6', importance: 'Easy', typeRepeat: 'monthly', users: 'quoc, hien, my' },\r\n    { id: 9, scheduleName: 'Time learning NestJS', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Homework', description: 'Open Library is an open', place: 'room 2 F4', importance: 'Hard', typeRepeat: 'normal', users: 'quoc, hien, my' },\r\n    { id: 10, scheduleName: 'Time eat', time: '01/01/2020 10:10 - 10/01/2020 10:10', category: 'Exercise', description: 'Open Library is an open', place: 'room 2 F5', importance: 'Medium', typeRepeat: 'everyday', users: 'quoc, hien, my' }\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "labelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 17,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
                },
                {
                    "name": "placeholderFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                    "type": "PlaceholderFilterSchedule",
                    "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
                }
            ],
            "src/app/modules/todo-list-page/todo-list-page.component.ts": [
                {
                    "name": "category",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "string",
                    "defaultValue": "'Category'"
                },
                {
                    "name": "checkboxField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "CheckboxInterface[]",
                    "defaultValue": "[\r\n  { name: 'Complete', checked: false },\r\n  { name: 'Incomplete', checked: false },\r\n]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Title Todo',\r\n    dataIndex: 'todoName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Deadline',\r\n    dataIndex: 'deadline',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'todoCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n]"
                },
                {
                    "name": "configButtonReset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
                },
                {
                    "name": "configButtonSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Hight',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Low',\r\n    value: 'Low',\r\n  },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "importance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "string",
                    "defaultValue": "'Importance'"
                },
                {
                    "name": "labelCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelFromDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "string",
                    "defaultValue": "'search todo...'"
                },
                {
                    "name": "titleGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                    "type": "string",
                    "defaultValue": "'Status'"
                }
            ],
            "src/app/shared/components/add-poll/add-poll.stories.ts": [
                {
                    "name": "category",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "string",
                    "defaultValue": "'Category'"
                },
                {
                    "name": "checkboxContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "CheckboxInterface[]",
                    "defaultValue": "[\r\n  { name: \"Allow multiple Poll answers\", checked: false },\r\n]"
                },
                {
                    "name": "checkboxField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "ICheckBoxItem[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
                },
                {
                    "name": "configButtonReset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
                },
                {
                    "name": "configButtonSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Create Poll',\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "importance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "string",
                    "defaultValue": "'Importance'"
                },
                {
                    "name": "labelCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelExpiration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Expiration',\r\n  size: 17,\r\n  color: 'black',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelFromDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Option:',\r\n  size: 17,\r\n  color: 'black',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelQuestion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Question:',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "string",
                    "defaultValue": "'search todo...'"
                },
                {
                    "name": "titleGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-poll/add-poll.stories.ts",
                    "type": "string",
                    "defaultValue": "''"
                }
            ],
            "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts": [
                {
                    "name": "category",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "string",
                    "defaultValue": "'Category'"
                },
                {
                    "name": "checkboxContent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "CheckboxInterface[]",
                    "defaultValue": "[\r\n  {name : \"Complete\", checked : false},\r\n  {name : \"Incomplete\", checked : false},\r\n]"
                },
                {
                    "name": "checkboxField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "ICheckBoxItem[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
                },
                {
                    "name": "configButtonReset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
                },
                {
                    "name": "configButtonSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "importance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "string",
                    "defaultValue": "'Importance'"
                },
                {
                    "name": "labelCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelFromDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "string",
                    "defaultValue": "'search todo...'"
                },
                {
                    "name": "titleGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                    "type": "string",
                    "defaultValue": "'Status'"
                }
            ],
            "src/app/shared/components/todo-list/todo-list.stories.ts": [
                {
                    "name": "category",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "string",
                    "defaultValue": "'Category'"
                },
                {
                    "name": "checkboxField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "CheckboxInterface[]",
                    "defaultValue": "[\r\n  {name : \"Complete\", checked : false},\r\n  {name : \"Incomplete\", checked : false},\r\n]"
                },
                {
                    "name": "columnHasSorts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {\r\n        title: 'Id',\r\n        dataIndex: 'id',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n    },\r\n    {\r\n        title: 'Symbol',\r\n        dataIndex: 'symbol',\r\n    },\r\n]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n    {\r\n        title: 'Todo Name',\r\n        dataIndex: 'todoName',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Description',\r\n        dataIndex: 'description',\r\n    },\r\n    {\r\n        title: 'Deadline',\r\n        dataIndex: 'deadline',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Importance',\r\n        dataIndex: 'importance',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Category',\r\n        dataIndex: 'category',\r\n        sort: true,\r\n    },\r\n    {\r\n        title: 'Status',\r\n        dataIndex: 'status',\r\n        sort: true,\r\n    },\r\n]"
                },
                {
                    "name": "configButtonReset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'basic',\r\n  colorMouseOver: 'basic',\r\n  colorMouseOut: 'basic',\r\n  type: 'reset',\r\n  text: 'Clear',\r\n}"
                },
                {
                    "name": "configButtonSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "configButton",
                    "defaultValue": "{\r\n  colorButton: 'primary',\r\n  colorMouseOver: 'primary',\r\n  colorMouseOut: 'primary',\r\n  type: 'submit',\r\n  text: 'Filter',\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: '1',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: '2',\r\n    value: '2',\r\n  },\r\n  {\r\n    label: '3',\r\n    value: '3',\r\n  },\r\n]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    { id: 1, todoName: 'Read book', description: 'Open Library is an open', deadline: '01/01/2020', importance: 'Hard', category: 'Homework', status: 'Complate' },\r\n    { id: 2, todoName: 'Do homework', description: 'Open Library is an open', deadline: '01/02/2020', importance: 'Easy', category: 'Homework', status: 'Complate' },\r\n    { id: 3, todoName: 'Play game', description: 'Open Library is an open', deadline: '11/01/2020', importance: 'Hard', category: 'Game', status: 'Incomplate' },\r\n    { id: 4, todoName: 'Exercise', description: 'Open Library is an open', deadline: '01/05/2020', importance: 'Medium', category: 'Exercise', status: 'Complate' },\r\n    { id: 5, todoName: 'Create component', description: 'Open Library is an open', deadline: '01/01/2020', importance: 'Hard', category: 'Homework', status: 'Complate' },\r\n    { id: 6, todoName: 'Meeting', description: 'Open Library is an open', deadline: '11/11/2020', importance: 'Medium', category: 'Home', status: 'Incomplate' },\r\n    { id: 7, todoName: 'Go home', description: 'Open Library is an open', deadline: '18/3/2020', importance: 'Easy', category: 'Homework', status: 'Incomplate' },\r\n    { id: 8, todoName: 'Time work', description: 'Open Library is an open', deadline: '01/09/2020', importance: 'Easy', category: 'Homework', status: 'Complate' },\r\n    { id: 9, todoName: 'Time learning NestJS', description: 'Open Library is an open', deadline: '01/10/2020', importance: 'Hard', category: 'Homework', status: 'Incomplate' },\r\n    { id: 10, todoName: 'Time eat', description: 'Open Library is an open', deadline: '02/01/2020', importance: 'Medium', category: 'Exercise', status: 'Complate' }\r\n]"
                },
                {
                    "name": "dataSourceTextOverWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        id: 1,\r\n        name: 'Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen ',\r\n        weight: 1.0079,\r\n        symbol: 'H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H ',\r\n    },\r\n    { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n    { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n    { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n    {\r\n        id: 5,\r\n        name:\r\n            'Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron ',\r\n        weight: 10.811,\r\n        symbol: 'B',\r\n    },\r\n    { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n    { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n    { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n    { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n    { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
                },
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  { categoryName: 'Python', categoryId: 1 },\r\n  { categoryName: 'React', categoryId: 2 },\r\n  { categoryName: 'PHP', categoryId: 3 },\r\n  { categoryName: 'Laravel', categoryId: 4 },\r\n  { categoryName: 'NestJS', categoryId: 5 },\r\n  { categoryName: 'Spring Boot', categoryId: 6 },\r\n  { categoryName: 'Java', categoryId: 7 },\r\n  { categoryName: 'Ruby', categoryId: 8 },\r\n]"
                },
                {
                    "name": "importance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{content :'Importance'}"
                },
                {
                    "name": "labelCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Category',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelFromDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'From date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'Importance',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "labelToDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content: 'To date',\r\n  size: 17,\r\n  color: '',\r\n  backgroundColor: '',\r\n}"
                },
                {
                    "name": "placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "string",
                    "defaultValue": "'search todo...'"
                },
                {
                    "name": "titleGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/todo-list/todo-list.stories.ts",
                    "type": "string",
                    "defaultValue": "'Status'"
                }
            ],
            "src/app/shared/components/checkbox/checkbox-group/checkbox-group.stories.ts": [
                {
                    "name": "checkboxField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.stories.ts",
                    "type": "ICheckBoxItem[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Incomplete',\r\n    checked: false,\r\n    value: 'incomplete',\r\n  },\r\n  {\r\n    label: 'Complete',\r\n    checked: false,\r\n    value: 'complete',\r\n  },\r\n]"
                }
            ],
            "src/app/store/actions/snackbar.actions.ts": [
                {
                    "name": "CloseSnackbars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/snackbar.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Snackbar] Close Snackbars')"
                },
                {
                    "name": "OpenSnackbars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/snackbar.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Snackbar] Open Snackbars',\r\n  props<{\r\n    config: {\r\n      message: string;\r\n      action?: string;\r\n      config?: MatSnackBarConfig;\r\n    };\r\n  }>()\r\n)"
                },
                {
                    "name": "OpenSnackbarsFromEffect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/snackbar.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Snackbar] Open Snackbars From Effect',\r\n  props<{\r\n    config: {\r\n      message: string;\r\n      action?: string;\r\n      config?: MatSnackBarConfig;\r\n    };\r\n  }>()\r\n)"
                }
            ],
            "src/app/store/reducers/schedule.reducer.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/schedule.reducer.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  aqua: { primary: '#00ffff', secondary: '#D1E8FF' },\r\n  azure: { primary: '#f0ffff', secondary: '#D1E8FF' },\r\n  beige: { primary: '#f5f5dc', secondary: '#E9F5DC' },\r\n  blue: { primary: '#0000ff', secondary: '#0080FF' },\r\n  brown: { primary: '#a52a2a', secondary: '#A52A68' },\r\n  cyan: { primary: '#00ffff', secondary: '#0080FF' },\r\n  darkblue: { primary: '#00008b', secondary: '#00468B' },\r\n  darkcyan: { primary: '#008b8b', secondary: '#008B46' },\r\n  darkgrey: { primary: '#a9a9a9', secondary: '#A9A9A9' },\r\n  darkgreen: { primary: '#006400', secondary: '#006432' },\r\n  darkkhaki: { primary: '#bdb76b', secondary: '#9ABD6B' },\r\n  darkmagenta: { primary: '#8b008b', secondary: '#8B0046' },\r\n  darkolivegreen: { primary: '#556b2f', secondary: '#376B2F' },\r\n  darkorange: { primary: '#ff8c00', secondary: '#F3FF00' },\r\n  darkorchid: { primary: '#9932cc', secondary: '#CC32B2' },\r\n  darkred: { primary: '#8b0000', secondary: '#8B4600' },\r\n  darksalmon: { primary: '#e9967a', secondary: '#E9CD7A' },\r\n  darkviolet: { primary: '#9400d3', secondary: '#D300A8' },\r\n  fuchsia: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  gold: { primary: '#ffd700', secondary: '#A7FF00' },\r\n  green: { primary: '#008000', secondary: '#008040' },\r\n  indigo: { primary: '#4b0082', secondary: '#820078' },\r\n  khaki: { primary: '#f0e68c', secondary: '#C8F08C' },\r\n  lightblue: { primary: '#add8e6', secondary: '#ADBCE6' },\r\n  lightcyan: { primary: '#e0ffff', secondary: '#E0F0FF' },\r\n  lightgreen: { primary: '#90ee90', secondary: '#90EEBF' },\r\n  lightgrey: { primary: '#d3d3d3', secondary: '#D3D3D3' },\r\n  lightpink: { primary: '#ffb6c1', secondary: '#FFD0B6' },\r\n  lightyellow: { primary: '#ffffe0', secondary: '#F0FFE0' },\r\n  lime: { primary: '#00ff00', secondary: '#00FF80' },\r\n  magenta: { primary: '#ff00ff', secondary: '#FF0080' },\r\n  maroon: { primary: '#800000', secondary: '#804000' },\r\n  navy: { primary: '#000080', secondary: '#400080' },\r\n  olive: { primary: '#808000', secondary: '#408000' },\r\n  orange: { primary: '#ffa500', secondary: '#FF2600' },\r\n  pink: { primary: '#ffc0cb', secondary: '#FFD4C0' },\r\n  purple: { primary: '#800080', secondary: '#800040' },\r\n  red: { primary: '#ff0000', secondary: '#FF8000' },\r\n  yellow: { primary: '#ffff00', secondary: '#80FF00' },\r\n}"
                },
                {
                    "name": "initScheduleState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/schedule.reducer.ts",
                    "type": "ScheduleState",
                    "defaultValue": "{\r\n  userId: 1,\r\n  listSchedule: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total: 20,\r\n  },\r\n  listImportance: [\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ],\r\n  isLoading: false,\r\n  filter: {\r\n    textSearch: '',\r\n    importance: '',\r\n    category: [],\r\n    from: '',\r\n    to: '',\r\n    fromDateList: '',\r\n    toDateList: '',\r\n  },\r\n  eventsToday: [],\r\n  eventsTomorrow: [],\r\n  eventsAfterTomorrow: [],\r\n  delSchedule: [],\r\n  categories: [],\r\n  scheduleFilter: [],\r\n}"
                }
            ],
            "src/app/shared/components/table/table.stories.ts": [
                {
                    "name": "columnHasSorts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/table/table.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Id',\r\n    dataIndex: 'id',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Weight',\r\n    dataIndex: 'weight',\r\n  },\r\n  {\r\n    title: 'Symbol',\r\n    dataIndex: 'symbol',\r\n  },\r\n]"
                },
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/table/table.stories.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Id',\r\n    dataIndex: 'id',\r\n  },\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n  },\r\n  {\r\n    title: 'Weight',\r\n    dataIndex: 'weight',\r\n  },\r\n  {\r\n    title: 'Symbol',\r\n    dataIndex: 'symbol',\r\n  },\r\n]"
                },
                {
                    "name": "dataSource",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/table/table.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H' },\r\n  { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n  { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n  { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n  { id: 5, name: 'Boron', weight: 10.811, symbol: 'B' },\r\n  { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n  { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n  { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n  { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n  { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
                },
                {
                    "name": "dataSourceTextOverWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/table/table.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    name: 'Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen Hydrogen ',\r\n    weight: 1.0079,\r\n    symbol: 'H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H H ',\r\n  },\r\n  { id: 2, name: 'Helium', weight: 4.0026, symbol: 'He' },\r\n  { id: 3, name: 'Lithium', weight: 6.941, symbol: 'Li' },\r\n  { id: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be' },\r\n  {\r\n    id: 5,\r\n    name:\r\n      'Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron Boron ',\r\n    weight: 10.811,\r\n    symbol: 'B',\r\n  },\r\n  { id: 6, name: 'Carbon', weight: 12.0107, symbol: 'C' },\r\n  { id: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N' },\r\n  { id: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O' },\r\n  { id: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F' },\r\n  { id: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne' },\r\n]"
                }
            ],
            "src/app/modules/notification-page/notification-page.component.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/notification-page/notification-page.component.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Title',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Event Type',\r\n    dataIndex: 'eventTypeName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Start Time',\r\n    dataIndex: 'eventStartTime',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n]"
                }
            ],
            "src/app/modules/poll-list-page/poll-list-page.component.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-list-page/poll-list-page.component.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'STT',\r\n    dataIndex: 'stt',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Question',\r\n    dataIndex: 'question',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Expiration',\r\n    dataIndex: 'expiration',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Status',\r\n    dataIndex: 'status',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Created by',\r\n    dataIndex: 'create_by',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Top votes',\r\n    dataIndex: 'topvotes',\r\n    sort: false,\r\n  },\r\n  {\r\n    title: 'Action',\r\n    dataIndex: 'action',\r\n    sort: false,\r\n  },\r\n]"
                }
            ],
            "src/app/modules/schedule-list-page/schedule-list-page.component.ts": [
                {
                    "name": "columns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                    "type": "Column[]",
                    "defaultValue": "[\r\n  {\r\n    title: 'Title Schedule',\r\n    dataIndex: 'title',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Time',\r\n    dataIndex: 'time',\r\n  },\r\n  {\r\n    title: 'Category',\r\n    dataIndex: 'scheduleCategoryName',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Description',\r\n    dataIndex: 'description',\r\n  },\r\n  {\r\n    title: 'Place',\r\n    dataIndex: 'place',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Importance',\r\n    dataIndex: 'importance',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Type Repeat',\r\n    dataIndex: 'typeRepeat',\r\n    sort: true,\r\n  },\r\n  {\r\n    title: 'Users',\r\n    dataIndex: 'users',\r\n  },\r\n]"
                },
                {
                    "name": "configButtonFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                    "type": "ButtonFilterSchedule<configButton>",
                    "defaultValue": "{\r\n  buttonSubmit: {\r\n    colorButton: 'primary',\r\n    colorMouseOver: 'primary',\r\n    colorMouseOut: 'primary',\r\n    type: 'submit',\r\n    text: 'Filter',\r\n  },\r\n  buttonReset: {\r\n    colorButton: 'basic',\r\n    colorMouseOver: 'basic',\r\n    colorMouseOut: 'basic',\r\n    type: 'reset',\r\n    text: 'Clear',\r\n  },\r\n}"
                },
                {
                    "name": "configLabelScheduleFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                    "type": "LabelFilterSchedule<LabelInterface>",
                    "defaultValue": "{\r\n  labelImportance: {\r\n    content: 'Importance',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelFromDate: {\r\n    content: 'From date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelToDate: {\r\n    content: 'To date',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n  labelCategory: {\r\n    content: 'Category',\r\n    size: 15,\r\n    color: '',\r\n    backgroundColor: '',\r\n  },\r\n}"
                },
                {
                    "name": "configPlaceholderFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                    "type": "PlaceholderFilterSchedule",
                    "defaultValue": "{\r\n  placeholderSearch: 'search schedule...',\r\n  titleImportance: 'importance',\r\n  titleCategory: 'category',\r\n}"
                },
                {
                    "name": "dataImportance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'High',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/modules/add-schedule-page/add-schedule-page.component.ts": [
                {
                    "name": "dates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "",
                    "defaultValue": "[...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n})"
                },
                {
                    "name": "nth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "",
                    "defaultValue": "(d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n}"
                },
                {
                    "name": "selectEquipmentFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
                },
                {
                    "name": "selectImportantFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
                },
                {
                    "name": "selectMonthlyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "selectTypeScheduleFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n]"
                },
                {
                    "name": "selectWeeklyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n]"
                }
            ],
            "src/app/modules/poll-detail-page/poll-detail-page.component.ts": [
                {
                    "name": "dates",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "",
                    "defaultValue": "[...Array(31).keys()].slice(1).map((i) => {\r\n  selectMonthlyFake.push({\r\n    label: `${i}${nth(i)}`,\r\n    value: `${i}`,\r\n  });\r\n})"
                },
                {
                    "name": "nth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "",
                    "defaultValue": "(d) => {\r\n  if (d > 3 && d < 21) {\r\n    return 'th';\r\n  }\r\n  switch (d % 10) {\r\n    case 1:\r\n      return 'st';\r\n    case 2:\r\n      return 'nd';\r\n    case 3:\r\n      return 'rd';\r\n    default:\r\n      return 'th';\r\n  }\r\n}"
                },
                {
                    "name": "selectEquipmentFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  {\r\n    categoryName: 'Laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'Micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'Projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
                },
                {
                    "name": "selectImportantFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'High',\r\n    value: 'Hight',\r\n  },\r\n  {\r\n    label: 'Medium',\r\n    value: 'Medium',\r\n  },\r\n  {\r\n    label: 'Normal',\r\n    value: 'Normal',\r\n  },\r\n]"
                },
                {
                    "name": "selectMonthlyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "selectTypeScheduleFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'Event',\r\n    value: '2',\r\n  },\r\n]"
                },
                {
                    "name": "selectWeeklyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  urlTodo: 'http://192.168.4.230:3000/todo',\r\n  urlCategory: 'http://192.168.4.230:3000/category',\r\n  urlNotification: 'http://192.168.4.230:3000/notification',\r\n  urlEvent: 'http://192.168.4.230:3000/event',\r\n  urlSchedule: 'http://192.168.4.230:3000/schedule',\r\n  urlCountNotification: 'http://192.168.4.230:3000/notification/total-unread',\r\n  urlEquipment: 'http://192.168.4.230:3000/equipment',\r\n  snackbarDelayTime: 700000,\r\n  urlDetailTodo: \"http://192.168.4.230:3000/todo\",\r\n  urlSocket : \"192.168.4.224:3001\",\r\n  urlUser : \"http://192.168.4.230:3000/user\",\r\n  urlImport: \"http://192.168.4.29:8080/api/exceltemplate\",\r\n  urlExcelTemplateDetail : \"http://192.168.4.29:8080/api/exceltemplatedetail\",\r\n}"
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "fakeData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Angular',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'React',\r\n    value: '2'\r\n  },\r\n  {\r\n    label: 'Ruby on rails',\r\n    value: '3'\r\n  },\r\n  {\r\n    label: 'Laravel',\r\n    value: '4'\r\n  },\r\n  {\r\n    label: 'Python',\r\n    value: '5'\r\n  },\r\n]"
                },
                {
                    "name": "fakeLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "string",
                    "defaultValue": "'Your option'"
                }
            ],
            "src/app/store/selectors/schedule.selector.ts": [
                {
                    "name": "getCategories",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.categories\r\n)"
                },
                {
                    "name": "getDataFilterByCategory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleFilter\r\n)"
                },
                {
                    "name": "getDataFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleFilter\r\n)"
                },
                {
                    "name": "getDelSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.delSchedule\r\n)"
                },
                {
                    "name": "getDelScheduleReal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.scheduleRealAfterDel\r\n)"
                },
                {
                    "name": "getEventsAfterTomorrow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsAfterTomorrow\r\n)"
                },
                {
                    "name": "getEventsToday",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsToday\r\n)"
                },
                {
                    "name": "getEventsTomorrow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.eventsTomorrow\r\n)"
                },
                {
                    "name": "getFilterSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.filter\r\n)"
                },
                {
                    "name": "getLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.isLoading\r\n)"
                },
                {
                    "name": "getSchedule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  scheduleFeature,\r\n  (state: ScheduleState) => state\r\n)"
                },
                {
                    "name": "getSchedules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  getSchedule,\r\n  (state: ScheduleState) => state.listSchedule\r\n)"
                },
                {
                    "name": "scheduleFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/schedule.selector.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.schedule"
                }
            ],
            "src/app/store/selectors/notification.selector.ts": [
                {
                    "name": "getCountNotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/notification.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(getnotification, (state: NotificationState) => state.countTotal)"
                },
                {
                    "name": "getIsRead",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/notification.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(getnotification, (state: NotificationState) => state.isRead)"
                },
                {
                    "name": "getnotification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/notification.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  notificationFeture,\r\n  (state: NotificationState) => state\r\n)"
                },
                {
                    "name": "notificationFeture",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/notification.selector.ts",
                    "type": "",
                    "defaultValue": "(state: AppState) => state.notification"
                }
            ],
            "src/app/store/selectors/todo.selector.ts": [
                {
                    "name": "getTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/todo.selector.ts",
                    "type": "",
                    "defaultValue": "createSelector(todoFeature,(state :TodoState) => state)"
                },
                {
                    "name": "todoFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/todo.selector.ts",
                    "type": "",
                    "defaultValue": "(state : AppState) => state.todo"
                }
            ],
            "src/app/store/reducers/notification.reducer.ts": [
                {
                    "name": "initNotificationState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/notification.reducer.ts",
                    "type": "NotificationState",
                    "defaultValue": "{\r\n  listNotification: [],\r\n  pagination: {\r\n    total: 0,\r\n    page: 1,\r\n    pageSize: 10,\r\n  },\r\n  isLoading: false,\r\n  listEvent: [],\r\n  selectedEvent: '',\r\n  isRead: -1,\r\n}"
                }
            ],
            "src/app/store/reducers/todo.reducer.ts": [
                {
                    "name": "initTodoState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/todo.reducer.ts",
                    "type": "TodoState",
                    "defaultValue": "{\r\n  userId : 1,\r\n  todos: [],\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 10,\r\n    total : 20,\r\n  },\r\n  filter :{\r\n    textSearch :\"\",\r\n    category : [],\r\n    status :\"\",\r\n    fromDate :\"\",\r\n    importance :\"\",\r\n    toDate : \"\"\r\n  },\r\n  isLoading: false,\r\n  listImportance :[\r\n    {\r\n      label: 'Hight',\r\n      value: 'Hight',\r\n    },\r\n    {\r\n      label: 'Medium',\r\n      value: 'Medium',\r\n    },\r\n    {\r\n      label: 'Low',\r\n      value: 'Low',\r\n    },\r\n  ]\r\n}"
                }
            ],
            "src/app/shared/components/label/label.stories.ts": [
                {
                    "name": "labels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/label/label.stories.ts",
                    "type": "LabelInterface",
                    "defaultValue": "{\r\n  content:\"Label Component\",\r\n  size: 30,\r\n  color: \"\",\r\n  backgroundColor: \"\"\r\n}"
                }
            ],
            "src/app/shared/material-custom/material-custom.module.ts": [
                {
                    "name": "materialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/material-custom/material-custom.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatPseudoCheckboxModule,\r\n  MatButtonModule,\r\n  MatInputModule,\r\n  MatAutocompleteModule,\r\n  MatDatepickerModule,\r\n  MatFormFieldModule,\r\n  MatRadioModule,\r\n  MatSelectModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatMenuModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n  MatListModule,\r\n  MatGridListModule,\r\n  MatCardModule,\r\n  MatStepperModule,\r\n  MatTabsModule,\r\n  MatExpansionModule,\r\n  MatButtonToggleModule,\r\n  MatChipsModule,\r\n  MatIconModule,\r\n  MatProgressSpinnerModule,\r\n  MatProgressBarModule,\r\n  MatDialogModule,\r\n  MatTooltipModule,\r\n  MatSnackBarModule,\r\n  MatTableModule,\r\n  MatSortModule,\r\n  MatPaginatorModule,\r\n  MatBadgeModule,\r\n  MatCheckboxModule,\r\n]"
                }
            ],
            "src/app/store/reducers/login.reducer.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/login.reducer.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "[clearState]"
                }
            ],
            "src/setup-jest.ts": [
                {
                    "name": "mock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/setup-jest.ts",
                    "type": "",
                    "defaultValue": "() => {\r\n  let storage: { [key: string]: string } = {};\r\n  return {\r\n    getItem: (key: string) => (key in storage ? storage[key] : null),\r\n    setItem: (key: string, value: string) => (storage[key] = value || \"\"),\r\n    removeItem: (key: string) => delete storage[key],\r\n    clear: () => (storage = {}),\r\n  };\r\n}"
                }
            ],
            "src/app/shared/components/button-group/button-group.stories.ts": [
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-group/button-group.stories.ts",
                    "type": "IButtonGroup[]",
                    "defaultValue": "[\r\n  {\r\n    value: 'all',\r\n    displayValue: 'All',\r\n  },\r\n  {\r\n    value: 'read',\r\n    displayValue: 'Already Read',\r\n  },\r\n  {\r\n    value: 'unread',\r\n    displayValue: 'Unread',\r\n  },\r\n  {\r\n    value: 'remove',\r\n    displayValue: 'Remove ',\r\n  },\r\n]"
                }
            ],
            "src/app/shared/components/search/search.stories.ts": [
                {
                    "name": "placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/search/search.stories.ts",
                    "type": "string",
                    "defaultValue": "'Enter text to search'"
                }
            ],
            "src/app/shared/components/schedule-detail/schedule-detail.stories.ts": [
                {
                    "name": "scheduleDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                    "type": "ScheduleDetail",
                    "defaultValue": "{\r\n  scheduleId: '12',\r\n  title: 'Schedule detail',\r\n  description: 'description',\r\n  startDate: '',\r\n  dueDate: '',\r\n  timeDueRepeat: '14:30',\r\n  timeStartRepeat: '15:30',\r\n  createBy: '1',\r\n  createdByName: 'nghia',\r\n  scheduleCategoryId: '15',\r\n  scheduleCategoryName: 'meeting',\r\n  created: '2020-01-01',\r\n  modified: '2020-01-01',\r\n  place: 'F4',\r\n  important: 'Hight',\r\n  equipmentNames: '',\r\n  type: 'Normal',\r\n  valueRepeat: '',\r\n  userNames: 'nghia nghia',\r\n}"
                },
                {
                    "name": "scheduleTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                    "type": "string",
                    "defaultValue": "'Tuesday, November 10, 11:59 AM - 12:50 PM'"
                }
            ],
            "src/app/shared/components/add-schedule/add-schedule.stories.ts": [
                {
                    "name": "selectEquipmentFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  {\r\n    categoryName: 'laptop',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'micro',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'projector ',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'TV',\r\n    categoryId: 4,\r\n  },\r\n]"
                },
                {
                    "name": "selectImportantFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'high',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'normal',\r\n    value: '2',\r\n  },\r\n]"
                },
                {
                    "name": "selectMonthlyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "selectTypeScheduleFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'meeting',\r\n    value: '1',\r\n  },\r\n  {\r\n    label: 'event',\r\n    value: '2',\r\n  },\r\n]"
                },
                {
                    "name": "selectUserIdsFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "Category[]",
                    "defaultValue": "[\r\n  {\r\n    categoryName: 'user 1',\r\n    categoryId: 1,\r\n  },\r\n  {\r\n    categoryName: 'user 2',\r\n    categoryId: 2,\r\n  },\r\n  {\r\n    categoryName: 'user 3',\r\n    categoryId: 3,\r\n  },\r\n  {\r\n    categoryName: 'user 4',\r\n    categoryId: 4,\r\n  },\r\n]"
                },
                {
                    "name": "selectWeeklyFake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                    "type": "LabelledValue[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts": [
                {
                    "name": "selectWeekly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts",
                    "type": "string[]",
                    "defaultValue": "[\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n]"
                }
            ],
            "src/app/shared/constants/snackbar.constants.ts": [
                {
                    "name": "snackbarERROR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/snackbar.constants.ts",
                    "type": "MatSnackBarConfig",
                    "defaultValue": "{\r\n  verticalPosition: 'top',\r\n  horizontalPosition: 'right',\r\n  panelClass: 'sanckbar-error',\r\n}"
                },
                {
                    "name": "snackbarINFO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/snackbar.constants.ts",
                    "type": "MatSnackBarConfig",
                    "defaultValue": "{\r\n  verticalPosition: 'top',\r\n  horizontalPosition: 'right',\r\n  panelClass: 'sanckbar-info',\r\n}"
                },
                {
                    "name": "snackbarSUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/constants/snackbar.constants.ts",
                    "type": "MatSnackBarConfig",
                    "defaultValue": "{\r\n  verticalPosition: 'bottom',\r\n  horizontalPosition: 'center',\r\n  panelClass: 'sanckbar-success',\r\n}"
                }
            ],
            "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts": [
                {
                    "name": "transform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts",
                    "type": "",
                    "defaultValue": "(data = []) => {\r\n  const mappedData = {};\r\n  data.forEach((item) => (mappedData[item.value] = item));\r\n  return mappedData;\r\n}"
                }
            ],
            "src/app/app.component.ts": [
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.component.ts",
                    "type": "",
                    "defaultValue": "XLSX"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/login.reducer.ts": [
                {
                    "name": "clearState",
                    "file": "src/app/store/reducers/login.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "type": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/notification.reducer.ts": [
                {
                    "name": "noticeReducer",
                    "file": "src/app/store/reducers/notification.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/schedule.reducer.ts": [
                {
                    "name": "randomObj",
                    "file": "src/app/store/reducers/schedule.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scheduleReducer",
                    "file": "src/app/store/reducers/schedule.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "serve/routes.ts": [
                {
                    "name": "routes",
                    "file": "serve/routes.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "Router"
                }
            ],
            "src/app/store/reducers/snackbar.reducer.ts": [
                {
                    "name": "snackbarReducer",
                    "file": "src/app/store/reducers/snackbar.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/todo.reducer.ts": [
                {
                    "name": "todoReducer",
                    "file": "src/app/store/reducers/todo.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "TodoState",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/login.action.ts": [
                {
                    "name": "ELogin",
                    "childs": [
                        {
                            "name": "LOGOUT",
                            "value": "[App] logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/login.action.ts"
                }
            ],
            "src/app/store/actions/notification.action.ts": [
                {
                    "name": "ENotification",
                    "childs": [
                        {
                            "name": "LOADING",
                            "value": "[Notification] Loading"
                        },
                        {
                            "name": "LOAD_SUCCESS",
                            "value": "[Notification] load success"
                        },
                        {
                            "name": "LOAD_FAIL",
                            "value": "[Notification] load fail"
                        },
                        {
                            "name": "ADD",
                            "value": "[Notification] Adding"
                        },
                        {
                            "name": "ADD_SUCCESS",
                            "value": "[Notification] add success"
                        },
                        {
                            "name": "ADD_FAIL",
                            "value": "[Notification] add fail"
                        },
                        {
                            "name": "UPDATE",
                            "value": "[Notification] Updating"
                        },
                        {
                            "name": "UPDATE_SUCCESS",
                            "value": "[Notification] update success"
                        },
                        {
                            "name": "UPDATE_FAIL",
                            "value": "[Notification] update fail"
                        },
                        {
                            "name": "DELETE",
                            "value": "[Notification] Deleting"
                        },
                        {
                            "name": "DELETE_SUCCESS",
                            "value": "[Notification] delete success"
                        },
                        {
                            "name": "DELETE_FAIL",
                            "value": "[Notification] delete fail"
                        },
                        {
                            "name": "LOAD_ALL",
                            "value": "[Notification] Loading All"
                        },
                        {
                            "name": "LOAD_ALL_SUCCESS",
                            "value": "[Notification] load all success"
                        },
                        {
                            "name": "LOAD_ALL_FAIL",
                            "value": "[Notification] load all fail"
                        },
                        {
                            "name": "FILTER_STATUS",
                            "value": "[Notification] Filter Status Notification"
                        },
                        {
                            "name": "FILTER_STATUS_SUCCESS",
                            "value": "[Notification] Filter status notification success"
                        },
                        {
                            "name": "FILTER_STATUS_FAIL",
                            "value": "[Notification] Filter status notification fail"
                        },
                        {
                            "name": "FILTER_EVENT",
                            "value": "[Notification] Filter Event Notification"
                        },
                        {
                            "name": "FILTER_EVENT_SUCCESS",
                            "value": "[Notification] Filter event notification success"
                        },
                        {
                            "name": "FILTER_EVENT_FAIL",
                            "value": "[Notification] Filter event notification fail"
                        },
                        {
                            "name": "GET_EVENT",
                            "value": "[Notification] Get All Event"
                        },
                        {
                            "name": "GET_EVENT_SUCCESS",
                            "value": "[NOTIFICATION] Get Event notification success"
                        },
                        {
                            "name": "GET_EVENT_FAIL",
                            "value": "[NOTIFICATION] Get Event notification fail"
                        },
                        {
                            "name": "COUNT_NOTIFICATIONS",
                            "value": "[Notification] Count notification "
                        },
                        {
                            "name": "COUNT_NOTIFICATIONS_SUCCESS",
                            "value": "[Notification] Count notification  success"
                        },
                        {
                            "name": "COUNT_NOTIFICATIONS_FAIL",
                            "value": "[Notification] Count notification  fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/notification.action.ts"
                }
            ],
            "src/app/store/actions/schedule.action.ts": [
                {
                    "name": "ESchedule",
                    "childs": [
                        {
                            "name": "LOAD_ALL",
                            "value": "[Schedule] Load all"
                        },
                        {
                            "name": "LOAD_ALL_SUCCESS",
                            "value": "[Schedule] Load all success"
                        },
                        {
                            "name": "LOAD_ALL_FAIL",
                            "value": "[Schedule] Load all fail"
                        },
                        {
                            "name": "LOAD_EVENTS_TODAY",
                            "value": "[Schedule] Load events today"
                        },
                        {
                            "name": "LOAD_EVENTS_TODAY_FAIL",
                            "value": "[Schedule] Load events today fail"
                        },
                        {
                            "name": "LOAD_EVENTS_TODAY_SUCCESS",
                            "value": "[Schedule] Load events today success"
                        },
                        {
                            "name": "LOAD_EVENTS_TOMORROW",
                            "value": "[Schedule] Load events tomorrow"
                        },
                        {
                            "name": "LOAD_EVENTS_TOMORROW_FAIL",
                            "value": "[Schedule] Load events tomorrow fail"
                        },
                        {
                            "name": "LOAD_EVENTS_TOMORROW_SUCCESS",
                            "value": "[Schedule] Load events tomorrow success"
                        },
                        {
                            "name": "LOAD_EVENTS_AFTER_TOMORROW",
                            "value": "[Schedule] Load events after tomorrow"
                        },
                        {
                            "name": "LOAD_EVENTS_AFTER_TOMORROW_FAIL",
                            "value": "[Schedule] Load events after tomorrow fail"
                        },
                        {
                            "name": "LOAD_EVENTS_AFTER_TOMORROW_SUCCESS",
                            "value": "[Schedule] Load events after tomorrow success"
                        },
                        {
                            "name": "DELETE_EVENT",
                            "value": "[Schedule] Delete event"
                        },
                        {
                            "name": "DELETE_EVENT_SUCCESS",
                            "value": "[Schedule] Delete event success"
                        },
                        {
                            "name": "DELETE_EVENT_FAIL",
                            "value": "[Schedule] Delete event fail"
                        },
                        {
                            "name": "UNDO_DELETE_EVENT",
                            "value": "[Schedule] Undo delete event"
                        },
                        {
                            "name": "UNDO_DELETE_EVENT_SUCCESS",
                            "value": "[Schedule] Undo delete event success"
                        },
                        {
                            "name": "UNDO_DELETE_EVENT_FAIL",
                            "value": "[Schedule] Undo delete event fail"
                        },
                        {
                            "name": "LOAD_CATEGORY",
                            "value": "[Schedule] Load all category schedule"
                        },
                        {
                            "name": "LOAD_CATEGORY_SUCCESS",
                            "value": "[Schedule] Load all category schedule success"
                        },
                        {
                            "name": "LOAD_CATEGORY_FAIL",
                            "value": "[Schedule] Load all category schedule fail"
                        },
                        {
                            "name": "FILTER_BY_CATEGORY",
                            "value": "[Schedule] Filter by category schedule"
                        },
                        {
                            "name": "FILTER_BY_CATEGORY_SUCCESS",
                            "value": "[Schedule] Filter by category schedule success"
                        },
                        {
                            "name": "FILTER_BY_CATEGORY_FAIL",
                            "value": "[Schedule] Filter by category schedule fail"
                        },
                        {
                            "name": "ADD",
                            "value": "[Schedule] Adding"
                        },
                        {
                            "name": "ADD_SUCCESS",
                            "value": "[Schedule] Add success"
                        },
                        {
                            "name": "ADD_FAIL",
                            "value": "[Schedule] Add fail"
                        },
                        {
                            "name": "CHECK_EQUIPMENT",
                            "value": "[Check_equipment] Checking"
                        },
                        {
                            "name": "CHECK_EQUIPMENT_SUCCESS",
                            "value": "[Check_equipment] Check success"
                        },
                        {
                            "name": "CHECK_EQUIPMENT_FAIL",
                            "value": "[Check_equipment] Check fail"
                        },
                        {
                            "name": "FILTER",
                            "value": "[Schedule] filtering schedule"
                        },
                        {
                            "name": "FILTER_SUCCESS",
                            "value": "[Schedule] filter schedule success"
                        },
                        {
                            "name": "FILTER_FAIL",
                            "value": "[Schedule] filter schedule fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/schedule.action.ts"
                }
            ],
            "src/app/store/actions/todo.action.ts": [
                {
                    "name": "ETodo",
                    "childs": [
                        {
                            "name": "ADD",
                            "value": "[TODO] adding"
                        },
                        {
                            "name": "ADD_SUCCESS",
                            "value": "[TODO] add success"
                        },
                        {
                            "name": "ADD_FAIL",
                            "value": "[TODO] add fail"
                        },
                        {
                            "name": "UPDATE",
                            "value": "[TODO] updating"
                        },
                        {
                            "name": "UPDATE_SUCCESS",
                            "value": "[TODO] update success"
                        },
                        {
                            "name": "UPDATE_FAIL",
                            "value": "[TODO] update fail"
                        },
                        {
                            "name": "DELETE",
                            "value": "[TODO] deleting"
                        },
                        {
                            "name": "DELETE_SUCCESS",
                            "value": "[TODO] delete success"
                        },
                        {
                            "name": "DELETE_FAIL",
                            "value": "[TODO] delete fail"
                        },
                        {
                            "name": "Filter",
                            "value": "[TODO] filtering todo"
                        },
                        {
                            "name": "Filter_SUCCESS",
                            "value": "[TODO] filter todo success"
                        },
                        {
                            "name": "Filter_FAIL",
                            "value": "[TODO] filter todo fail"
                        },
                        {
                            "name": "LOAD_CATEGORY",
                            "value": "[CATEGORY] loading category by user"
                        },
                        {
                            "name": "LOAD_CATEGORY_SUCCESS",
                            "value": "[CATEGORY] load category by user success"
                        },
                        {
                            "name": "LOAD_CATEGORY_FAIL",
                            "value": "[CATEGORY] load category by user fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/todo.action.ts"
                }
            ],
            "src/app/shared/constants/message.contants.ts": [
                {
                    "name": "MessageConstants",
                    "childs": [
                        {
                            "name": "TODO_FILTER_FAIL",
                            "value": "Todo filter fail"
                        },
                        {
                            "name": "TODO_ADD_FAIL",
                            "value": "Todo add fail"
                        },
                        {
                            "name": "TODO_UPDATE_FAIL",
                            "value": "Todo update fail"
                        },
                        {
                            "name": "TODO_DELETE_FAIL",
                            "value": "Todo delete fail"
                        },
                        {
                            "name": "SCHEDULE_FILTER_FAIL",
                            "value": "Schedule filter fail"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/shared/constants/message.contants.ts"
                }
            ],
            "src/app/store/models/column.i.ts": [
                {
                    "name": "SortType",
                    "childs": [
                        {
                            "name": "asc",
                            "value": "asc"
                        },
                        {
                            "name": "desc",
                            "value": "desc"
                        },
                        {
                            "name": "none",
                            "value": "none"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/models/column.i.ts"
                }
            ],
            "src/app/store/models/status-notification.e.ts": [
                {
                    "name": "StatusNotification",
                    "childs": [
                        {
                            "name": "ALL",
                            "value": "All"
                        },
                        {
                            "name": "READ",
                            "value": "Alrealy Read"
                        },
                        {
                            "name": "UNREAD",
                            "value": " Unread"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/models/status-notification.e.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/components/list-excel/list-excel.component.ts": [
                {
                    "name": "AOA",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "any[][]",
                    "file": "src/app/shared/components/list-excel/list-excel.component.ts",
                    "description": "",
                    "kind": 166
                }
            ],
            "src/app/store/actions/notification.action.ts": [
                {
                    "name": "NotificationAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "NotificationAdd | NotificationAddSuccess | NotificationAddFail | NotificationLoadAll | NotificationLoadAllSuccess | NotificationLoadAllFail | NotificationUpdate | NotificationUpdateSuccess | NotificationUpdateFail | NotificationDelete | NotificationDeleteSuccess | NotificationAddFail | NotificationFilterEvent | NotificationFilterEventSuccess | NotificationFilterEventFail | NotificationFilterStatus | NotificationFilterStatusFail | NotificationFilterStatusSuccess | NotificationGetEvent | NotificationGetEventSuccess | NotificationGetEventFail | CountNotification | CountNotificationSuccess | CountNotificationFail",
                    "file": "src/app/store/actions/notification.action.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/schedule.action.ts": [
                {
                    "name": "ScheduleAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ScheduleLoadAll | ScheduleLoadAllSuccess | ScheduleLoadAllFail | ScheduleLoadEventsToday | ScheduleLoadEventsTodayFail | ScheduleLoadEventsTodaySuccess | ScheduleLoadEventsTomorrow | ScheduleLoadEventsTomorrowFail | ScheduleLoadEventsTomorrowSuccess | ScheduleLoadEventsAfterTomorrow | ScheduleLoadEventsAfterTomorrowFail | ScheduleLoadEventsAfterTomorrowSuccess | ScheduleDeleteEvent | ScheduleDeleteEventSuccess | ScheduleDeleteEventFail | ScheduleUndoDeleteEvent | ScheduleUndoDeleteEventSuccess | ScheduleUndoDeleteEventFail | ScheduleCategoryLoadAll | ScheduleCategoryLoadAllSuccess | ScheduleCategoryLoadAllFail | ScheduleFilterByCategory | ScheduleFilterByCategorySuccess | ScheduleFilterByCategoryFail | ScheduleAdd | ScheduleAddSuccess | ScheduleAddFail | CheckEquipment | CheckEquipmentSuccess | CheckEquipmentFail | ScheduleFilter | ScheduleFilterSuccess | ScheduleFilterFail",
                    "file": "src/app/store/actions/schedule.action.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/store/actions/todo.action.ts": [
                {
                    "name": "TodoAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "TodoAdd | TodoAddSuccess | TodoAddFail | TodoUpdate | TodoUpdateFail | TodoUpdateSuccess | TodoDelete | TodoDeleteFail | TodoDeleteSuccess | TodoFilter | TodoFilterFail | TodoFilterSuccess | CategoryByUser | CategoryByUserSuccess | CategoryByUserFail",
                    "file": "src/app/store/actions/todo.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginPageComponent"
                    },
                    {
                        "path": "",
                        "component": "MainLayoutComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/modules/login-page/login-page-routing.module.ts",
                "module": "LoginRouter",
                "children": [
                    {
                        "path": "",
                        "component": "LoginPageComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/main-layout/main-layout-routing.module.ts",
                "module": "MainLayoutRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "serve/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "serve/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environments",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "serve/routes.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/bootstraps/bootstrap.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrapsEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guard/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/main-layout/main-layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainLayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-poll-page/add-poll-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddPollPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSchedulePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEquipmentFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectImportantFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMonthlyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTypeScheduleFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-schedule-page/add-schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWeeklyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/add-todo-page/add-todo-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTodoPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/detail-todo-page/detail-todo-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DetailTodoPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/excel-detail-page/excel-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExcelDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/excel-list-page/excel-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExcelListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/excel-template-detail-page/excel-template-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExcelTemplateDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/login-page/token.interceptor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddHeaderInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/notification-page/notification-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/notification-page/notification-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PollDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dates",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEquipmentFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectImportantFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMonthlyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTypeScheduleFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-detail-page/poll-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWeeklyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-list-page/poll-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PollListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-list-page/poll-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/poll-main-page/poll-main-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PollMainPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/popup-notification/popup-page/popup-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopupPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleDetailPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-detail-page/schedule-detail-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWeekly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configLabelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configPlaceholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-list-page/schedule-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SchedulePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/schedule-page/schedule-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageTodoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonReset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelFromDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/todo-list-page/todo-list-page.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/provider/api/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-list-excel/add-list-excel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddListExcelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddPollComponent",
                "coveragePercent": 0,
                "coverageCount": "0/53",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonReset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelExpiration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelFromDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelQuestion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-poll/add-poll.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddScheduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/78",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEquipmentFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectImportantFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMonthlyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTypeScheduleFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserIdsFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-schedule/add-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectWeeklyFake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/add-todo/add-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-group/button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/bottom-action/bottom-action.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BottomActionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarComponent",
                "coveragePercent": 6,
                "coverageCount": "2/33",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/calendar.fakeDB.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CalendarFakeDb",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/calendar/custom-event-title-formatter.provider.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomEventTitleFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "transform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox-group/checkbox-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox-new/checkbox-new.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxNewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/item/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/date-time-picker/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/date-time-picker/date-time-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DateTimePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/date-time-picker/time-picker/time-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-excel/edit-list-excel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditListExcelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExpansionFilterScheduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/expansion-filter-schedule/expansion-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/filter-notification/filter-notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterNotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "btnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/filter-notification/filter-notification.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cateSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header-item/header-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-detail-excel/list-detail-excel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListDetailExcelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "btnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cateSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-detail-excel/list-detail-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListExcelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UploaderService",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "btnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cateSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-excel/list-excel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListFilterScheduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxContent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonReset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelFromDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-filter-schedule/list-filter-schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/mat-paginator-custom/mat-paginator-custom.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MatPaginatorCustomComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/mat-paginator-custom/pagination.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PaginationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-icon/notification-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-list/notification-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "btnGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cateSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-list/notification-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-detail/poll-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PollDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-list/poll-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "vote",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/poll-main/poll-main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PollMainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/pop-up/pop-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PopUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-detail/schedule-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scheduleDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-detail/schedule-detail.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scheduleTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-filter/schedule-filter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/schedule-list/schedule-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/search/search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/search/search.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select-multiple-search/select-multiple-search.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMultipleSearchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select-multiple/select-multiple.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectMultipleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnHasSorts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSourceTextOverWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-detail/todo-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "category",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkboxField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columnHasSorts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "columns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonReset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configButtonSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSource",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataSourceTextOverWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fakeData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "importance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelFromDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelImportance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "labelToDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "titleGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/snackbar.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "snackbarERROR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/snackbar.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "snackbarINFO",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/constants/snackbar.constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "snackbarSUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/material-custom/material-custom.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "materialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/socket-client/socket-client.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocketClientService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogoutAction",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CountNotification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CountNotificationFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CountNotificationSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationAdd",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationAddFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationAddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationDelete",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationDeleteFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationDeleteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterEvent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterEventFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterEventSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterStatus",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterStatusFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationFilterStatusSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationGetEvent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationGetEventFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationGetEventSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationLoadAll",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationLoadAllFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationLoadAllSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationLoading",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationUpdate",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationUpdateFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/notification.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NotificationUpdateSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckEquipment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckEquipmentFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckEquipmentSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleAdd",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleAddFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleAddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleCategoryLoadAll",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleCategoryLoadAllFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleCategoryLoadAllSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleDeleteEvent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleDeleteEventFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleDeleteEventSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilterByCategory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilterByCategoryFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilterByCategorySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilterFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleFilterSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadAll",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadAllFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadAllSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsAfterTomorrow",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsAfterTomorrowFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsAfterTomorrowSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsToday",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsTodayFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsTodaySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsTomorrow",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsTomorrowFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleLoadEventsTomorrowSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleUndoDeleteEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleUndoDeleteEventFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/schedule.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ScheduleUndoDeleteEventSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/snackbar.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CloseSnackbars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/snackbar.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OpenSnackbars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/snackbar.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OpenSnackbarsFromEffect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CategoryByUser",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CategoryByUserFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CategoryByUserSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoAdd",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoAddFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoAddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoDelete",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoDeleteFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoDeleteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoFilter",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoFilterFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoFilterSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoUpdateFail",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/todo.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TodoUpdateSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/notification.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationEffect",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/schedule.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScheduleEffects",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/snackbar.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/todo.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoEffect",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/add-schedule.i.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Equipment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/add-schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/add-schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckFreeTimeParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/add-schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckFreeTimeResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/add-schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecordsCheckTime",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/addtodo.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "addTodoValue",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/button-group.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButtonGroup",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/button.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "configButton",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/category.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/checkFreeTime.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckFreeTime",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/checkbox-item.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxInterface",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/checkbox-item.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckBoxItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/column.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/column.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SortItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/datetime-picker.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DatetimePicker",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/detail-todo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CategoryDetailTodo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/detail-todo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoDetail",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/detail-todo.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetailTodo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/event-notification.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EventNotification",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/event.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CalendarEventModel",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/is_read.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IsRead",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/label.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LabelInterface",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/labelvalue.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LabelExpansionFilter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/labelvalue.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LabelledValue",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/login.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/login.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/menu-item.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/notificaiton-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterNotification",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/notification.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/notification.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/page.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/pagination.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/pollList.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PollList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/pollList.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PollRecord",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/reminder-notification.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReminderNotification",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LabelFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlaceholderFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValueFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CategorySchedule",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EquipmentNames",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Schedule",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScheduleData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScheduleDetail",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/schedule.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserNames",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/scheduleList.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScheduleList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/todo-filter.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterTodo",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/todo.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/todoList.i.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToDoList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/models/vote.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Vote",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/login.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "clearState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/login.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/notification.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationState",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/notification.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "noticeReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/notification.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initNotificationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/schedule.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScheduleState",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/schedule.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "randomObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/schedule.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "scheduleReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/schedule.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "colors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/schedule.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initScheduleState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SnackbarState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "snackbarReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_snackbarReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/snackbar.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/todo.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/todo.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "todoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/todo.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initTodoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/notification.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCountNotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/notification.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getIsRead",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/notification.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getnotification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/notification.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "notificationFeture",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCategories",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDataFilterByCategory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDataFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDelSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getDelScheduleReal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEventsAfterTomorrow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEventsToday",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getEventsTomorrow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFilterSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSchedule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSchedules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/schedule.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scheduleFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/todo.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/todo.selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/services/poll.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PollService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/services/schedule.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ScheduleService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/store/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store-facades/login.store-facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreFacade",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store-facades/notification.store-facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationStoreFacade",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store-facades/schedule.store-facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreFacade",
                "coveragePercent": 3,
                "coverageCount": "1/33",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store-facades/snackbar.store-facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarStoreFacade",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/store-facades/todo.store-facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StoreFacade",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/setup-jest.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}